/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={874:t=>{"use strict";t.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},755:function(t,e){var i;!function(e,i){"use strict";"object"==typeof t.exports?t.exports=e.document?i(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(e)}("undefined"!=typeof window?window:this,(function(n,r){"use strict";var s=[],o=Object.getPrototypeOf,a=s.slice,l=s.flat?function(t){return s.flat.call(t)}:function(t){return s.concat.apply([],t)},h=s.push,c=s.indexOf,u={},d=u.toString,g=u.hasOwnProperty,f=g.toString,p=f.call(Object),m={},_=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},y=function(t){return null!=t&&t===t.window},v=n.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function w(t,e,i){var n,r,s=(i=i||v).createElement("script");if(s.text=t,e)for(n in x)(r=e[n]||e.getAttribute&&e.getAttribute(n))&&s.setAttribute(n,r);i.head.appendChild(s).parentNode.removeChild(s)}function C(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?u[d.call(t)]||"object":typeof t}var S="3.7.1",E=/HTML$/i,b=function(t,e){return new b.fn.init(t,e)};function T(t){var e=!!t&&"length"in t&&t.length,i=C(t);return!_(t)&&!y(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function R(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}b.fn=b.prototype={jquery:S,constructor:b,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=b.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return b.each(this,t)},map:function(t){return this.pushStack(b.map(this,(function(e,i){return t.call(e,i,e)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(b.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(b.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:h,sort:s.sort,splice:s.splice},b.extend=b.fn.extend=function(){var t,e,i,n,r,s,o=arguments[0]||{},a=1,l=arguments.length,h=!1;for("boolean"==typeof o&&(h=o,o=arguments[a]||{},a++),"object"==typeof o||_(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=t[e],"__proto__"!==e&&o!==n&&(h&&n&&(b.isPlainObject(n)||(r=Array.isArray(n)))?(i=o[e],s=r&&!Array.isArray(i)?[]:r||b.isPlainObject(i)?i:{},r=!1,o[e]=b.extend(h,s,n)):void 0!==n&&(o[e]=n));return o},b.extend({expando:"jQuery"+(S+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==d.call(t)||(e=o(t))&&("function"!=typeof(i=g.call(e,"constructor")&&e.constructor)||f.call(i)!==p))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,i){w(t,{nonce:e&&e.nonce},i)},each:function(t,e){var i,n=0;if(T(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},text:function(t){var e,i="",n=0,r=t.nodeType;if(!r)for(;e=t[n++];)i+=b.text(e);return 1===r||11===r?t.textContent:9===r?t.documentElement.textContent:3===r||4===r?t.nodeValue:i},makeArray:function(t,e){var i=e||[];return null!=t&&(T(Object(t))?b.merge(i,"string"==typeof t?[t]:t):h.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:c.call(e,t,i)},isXMLDoc:function(t){var e=t&&t.namespaceURI,i=t&&(t.ownerDocument||t).documentElement;return!E.test(e||i&&i.nodeName||"HTML")},merge:function(t,e){for(var i=+e.length,n=0,r=t.length;n<i;n++)t[r++]=e[n];return t.length=r,t},grep:function(t,e,i){for(var n=[],r=0,s=t.length,o=!i;r<s;r++)!e(t[r],r)!==o&&n.push(t[r]);return n},map:function(t,e,i){var n,r,s=0,o=[];if(T(t))for(n=t.length;s<n;s++)null!=(r=e(t[s],s,i))&&o.push(r);else for(s in t)null!=(r=e(t[s],s,i))&&o.push(r);return l(o)},guid:1,support:m}),"function"==typeof Symbol&&(b.fn[Symbol.iterator]=s[Symbol.iterator]),b.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){u["[object "+e+"]"]=e.toLowerCase()}));var I=s.pop,M=s.sort,k=s.splice,L="[\\x20\\t\\r\\n\\f]",A=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g");b.contains=function(t,e){var i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(t.contains?t.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))};var P=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function F(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}b.escapeSelector=function(t){return(t+"").replace(P,F)};var D=v,O=h;!function(){var t,e,i,r,o,l,h,u,d,f,p=O,_=b.expando,y=0,v=0,x=tt(),w=tt(),C=tt(),S=tt(),E=function(t,e){return t===e&&(o=!0),0},T="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="(?:\\\\[\\da-fA-F]{1,6}"+L+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\["+L+"*("+P+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+L+"*\\]",N=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",j=new RegExp(L+"+","g"),G=new RegExp("^"+L+"*,"+L+"*"),W=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),z=new RegExp(L+"|>"),X=new RegExp(N),B=new RegExp("^"+P+"$"),q={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+N),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+T+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,H=/^h\d$/i,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/[+~]/,V=new RegExp("\\\\[\\da-fA-F]{1,6}"+L+"?|\\\\([^\\r\\n\\f])","g"),U=function(t,e){var i="0x"+t.slice(1)-65536;return e||(i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320))},$=function(){lt()},J=dt((function(t){return!0===t.disabled&&R(t,"fieldset")}),{dir:"parentNode",next:"legend"});try{p.apply(s=a.call(D.childNodes),D.childNodes),s[D.childNodes.length].nodeType}catch(t){p={apply:function(t,e){O.apply(t,a.call(e))},call:function(t){O.apply(t,a.call(arguments,1))}}}function Q(t,e,i,n){var r,s,o,a,h,c,g,f=e&&e.ownerDocument,y=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==y&&9!==y&&11!==y)return i;if(!n&&(lt(e),e=e||l,u)){if(11!==y&&(h=K.exec(t)))if(r=h[1]){if(9===y){if(!(o=e.getElementById(r)))return i;if(o.id===r)return p.call(i,o),i}else if(f&&(o=f.getElementById(r))&&Q.contains(e,o)&&o.id===r)return p.call(i,o),i}else{if(h[2])return p.apply(i,e.getElementsByTagName(t)),i;if((r=h[3])&&e.getElementsByClassName)return p.apply(i,e.getElementsByClassName(r)),i}if(!(S[t+" "]||d&&d.test(t))){if(g=t,f=e,1===y&&(z.test(t)||W.test(t))){for((f=Z.test(t)&&at(e.parentNode)||e)==e&&m.scope||((a=e.getAttribute("id"))?a=b.escapeSelector(a):e.setAttribute("id",a=_)),s=(c=ct(t)).length;s--;)c[s]=(a?"#"+a:":scope")+" "+ut(c[s]);g=c.join(",")}try{return p.apply(i,f.querySelectorAll(g)),i}catch(e){S(t,!0)}finally{a===_&&e.removeAttribute("id")}}}return yt(t.replace(A,"$1"),e,i,n)}function tt(){var t=[];return function i(n,r){return t.push(n+" ")>e.cacheLength&&delete i[t.shift()],i[n+" "]=r}}function et(t){return t[_]=!0,t}function it(t){var e=l.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function nt(t){return function(e){return R(e,"input")&&e.type===t}}function rt(t){return function(e){return(R(e,"input")||R(e,"button"))&&e.type===t}}function st(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&J(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ot(t){return et((function(e){return e=+e,et((function(i,n){for(var r,s=t([],i.length,e),o=s.length;o--;)i[r=s[o]]&&(i[r]=!(n[r]=i[r]))}))}))}function at(t){return t&&void 0!==t.getElementsByTagName&&t}function lt(t){var i,n=t?t.ownerDocument||t:D;return n!=l&&9===n.nodeType&&n.documentElement?(h=(l=n).documentElement,u=!b.isXMLDoc(l),f=h.matches||h.webkitMatchesSelector||h.msMatchesSelector,h.msMatchesSelector&&D!=l&&(i=l.defaultView)&&i.top!==i&&i.addEventListener("unload",$),m.getById=it((function(t){return h.appendChild(t).id=b.expando,!l.getElementsByName||!l.getElementsByName(b.expando).length})),m.disconnectedMatch=it((function(t){return f.call(t,"*")})),m.scope=it((function(){return l.querySelectorAll(":scope")})),m.cssHas=it((function(){try{return l.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}})),m.getById?(e.filter.ID=function(t){var e=t.replace(V,U);return function(t){return t.getAttribute("id")===e}},e.find.ID=function(t,e){if(void 0!==e.getElementById&&u){var i=e.getElementById(t);return i?[i]:[]}}):(e.filter.ID=function(t){var e=t.replace(V,U);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},e.find.ID=function(t,e){if(void 0!==e.getElementById&&u){var i,n,r,s=e.getElementById(t);if(s){if((i=s.getAttributeNode("id"))&&i.value===t)return[s];for(r=e.getElementsByName(t),n=0;s=r[n++];)if((i=s.getAttributeNode("id"))&&i.value===t)return[s]}return[]}}),e.find.TAG=function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):e.querySelectorAll(t)},e.find.CLASS=function(t,e){if(void 0!==e.getElementsByClassName&&u)return e.getElementsByClassName(t)},d=[],it((function(t){var e;h.appendChild(t).innerHTML="<a id='"+_+"' href='' disabled='disabled'></a><select id='"+_+"-\r\\' disabled='disabled'><option selected=''></option></select>",t.querySelectorAll("[selected]").length||d.push("\\["+L+"*(?:value|"+T+")"),t.querySelectorAll("[id~="+_+"-]").length||d.push("~="),t.querySelectorAll("a#"+_+"+*").length||d.push(".#.+[+~]"),t.querySelectorAll(":checked").length||d.push(":checked"),(e=l.createElement("input")).setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),h.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&d.push(":enabled",":disabled"),(e=l.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||d.push("\\["+L+"*name"+L+"*="+L+"*(?:''|\"\")")})),m.cssHas||d.push(":has"),d=d.length&&new RegExp(d.join("|")),E=function(t,e){if(t===e)return o=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!m.sortDetached&&e.compareDocumentPosition(t)===i?t===l||t.ownerDocument==D&&Q.contains(D,t)?-1:e===l||e.ownerDocument==D&&Q.contains(D,e)?1:r?c.call(r,t)-c.call(r,e):0:4&i?-1:1)},l):l}for(t in Q.matches=function(t,e){return Q(t,null,null,e)},Q.matchesSelector=function(t,e){if(lt(t),u&&!S[e+" "]&&(!d||!d.test(e)))try{var i=f.call(t,e);if(i||m.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){S(e,!0)}return Q(e,l,null,[t]).length>0},Q.contains=function(t,e){return(t.ownerDocument||t)!=l&&lt(t),b.contains(t,e)},Q.attr=function(t,i){(t.ownerDocument||t)!=l&&lt(t);var n=e.attrHandle[i.toLowerCase()],r=n&&g.call(e.attrHandle,i.toLowerCase())?n(t,i,!u):void 0;return void 0!==r?r:t.getAttribute(i)},Q.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},b.uniqueSort=function(t){var e,i=[],n=0,s=0;if(o=!m.sortStable,r=!m.sortStable&&a.call(t,0),M.call(t,E),o){for(;e=t[s++];)e===t[s]&&(n=i.push(s));for(;n--;)k.call(t,i[n],1)}return r=null,t},b.fn.uniqueSort=function(){return this.pushStack(b.uniqueSort(a.apply(this)))},e=b.expr={cacheLength:50,createPseudo:et,match:q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(V,U),t[3]=(t[3]||t[4]||t[5]||"").replace(V,U),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||Q.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&Q.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return q.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&X.test(i)&&(e=ct(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(V,U).toLowerCase();return"*"===t?function(){return!0}:function(t){return R(t,e)}},CLASS:function(t){var e=x[t+" "];return e||(e=new RegExp("(^|"+L+")"+t+"("+L+"|$)"))&&x(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,i){return function(n){var r=Q.attr(n,t);return null==r?"!="===e:!e||(r+="","="===e?r===i:"!="===e?r!==i:"^="===e?i&&0===r.indexOf(i):"*="===e?i&&r.indexOf(i)>-1:"$="===e?i&&r.slice(-i.length)===i:"~="===e?(" "+r.replace(j," ")+" ").indexOf(i)>-1:"|="===e&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,i,n,r){var s="nth"!==t.slice(0,3),o="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===r?function(t){return!!t.parentNode}:function(e,i,l){var h,c,u,d,g,f=s!==o?"nextSibling":"previousSibling",p=e.parentNode,m=a&&e.nodeName.toLowerCase(),v=!l&&!a,x=!1;if(p){if(s){for(;f;){for(u=e;u=u[f];)if(a?R(u,m):1===u.nodeType)return!1;g=f="only"===t&&!g&&"nextSibling"}return!0}if(g=[o?p.firstChild:p.lastChild],o&&v){for(x=(d=(h=(c=p[_]||(p[_]={}))[t]||[])[0]===y&&h[1])&&h[2],u=d&&p.childNodes[d];u=++d&&u&&u[f]||(x=d=0)||g.pop();)if(1===u.nodeType&&++x&&u===e){c[t]=[y,d,x];break}}else if(v&&(x=d=(h=(c=e[_]||(e[_]={}))[t]||[])[0]===y&&h[1]),!1===x)for(;(u=++d&&u&&u[f]||(x=d=0)||g.pop())&&(!(a?R(u,m):1===u.nodeType)||!++x||(v&&((c=u[_]||(u[_]={}))[t]=[y,x]),u!==e)););return(x-=r)===n||x%n==0&&x/n>=0}}},PSEUDO:function(t,i){var n,r=e.pseudos[t]||e.setFilters[t.toLowerCase()]||Q.error("unsupported pseudo: "+t);return r[_]?r(i):r.length>1?(n=[t,t,"",i],e.setFilters.hasOwnProperty(t.toLowerCase())?et((function(t,e){for(var n,s=r(t,i),o=s.length;o--;)t[n=c.call(t,s[o])]=!(e[n]=s[o])})):function(t){return r(t,0,n)}):r}},pseudos:{not:et((function(t){var e=[],i=[],n=_t(t.replace(A,"$1"));return n[_]?et((function(t,e,i,r){for(var s,o=n(t,null,r,[]),a=t.length;a--;)(s=o[a])&&(t[a]=!(e[a]=s))})):function(t,r,s){return e[0]=t,n(e,null,s,i),e[0]=null,!i.pop()}})),has:et((function(t){return function(e){return Q(t,e).length>0}})),contains:et((function(t){return t=t.replace(V,U),function(e){return(e.textContent||b.text(e)).indexOf(t)>-1}})),lang:et((function(t){return B.test(t||"")||Q.error("unsupported lang: "+t),t=t.replace(V,U).toLowerCase(),function(e){var i;do{if(i=u?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===h},focus:function(t){return t===function(){try{return l.activeElement}catch(t){}}()&&l.hasFocus()&&!!(t.type||t.href||~t.tabIndex)},enabled:st(!1),disabled:st(!0),checked:function(t){return R(t,"input")&&!!t.checked||R(t,"option")&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!e.pseudos.empty(t)},header:function(t){return H.test(t.nodeName)},input:function(t){return Y.test(t.nodeName)},button:function(t){return R(t,"input")&&"button"===t.type||R(t,"button")},text:function(t){var e;return R(t,"input")&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:ot((function(){return[0]})),last:ot((function(t,e){return[e-1]})),eq:ot((function(t,e,i){return[i<0?i+e:i]})),even:ot((function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t})),odd:ot((function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t})),lt:ot((function(t,e,i){var n;for(n=i<0?i+e:i>e?e:i;--n>=0;)t.push(n);return t})),gt:ot((function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t}))}},e.pseudos.nth=e.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})e.pseudos[t]=nt(t);for(t in{submit:!0,reset:!0})e.pseudos[t]=rt(t);function ht(){}function ct(t,i){var n,r,s,o,a,l,h,c=w[t+" "];if(c)return i?0:c.slice(0);for(a=t,l=[],h=e.preFilter;a;){for(o in n&&!(r=G.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),n=!1,(r=W.exec(a))&&(n=r.shift(),s.push({value:n,type:r[0].replace(A," ")}),a=a.slice(n.length)),e.filter)!(r=q[o].exec(a))||h[o]&&!(r=h[o](r))||(n=r.shift(),s.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return i?a.length:a?Q.error(t):w(t,l).slice(0)}function ut(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function dt(t,e,i){var n=e.dir,r=e.next,s=r||n,o=i&&"parentNode"===s,a=v++;return e.first?function(e,i,r){for(;e=e[n];)if(1===e.nodeType||o)return t(e,i,r);return!1}:function(e,i,l){var h,c,u=[y,a];if(l){for(;e=e[n];)if((1===e.nodeType||o)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||o)if(c=e[_]||(e[_]={}),r&&R(e,r))e=e[n]||e;else{if((h=c[s])&&h[0]===y&&h[1]===a)return u[2]=h[2];if(c[s]=u,u[2]=t(e,i,l))return!0}return!1}}function gt(t){return t.length>1?function(e,i,n){for(var r=t.length;r--;)if(!t[r](e,i,n))return!1;return!0}:t[0]}function ft(t,e,i,n,r){for(var s,o=[],a=0,l=t.length,h=null!=e;a<l;a++)(s=t[a])&&(i&&!i(s,n,r)||(o.push(s),h&&e.push(a)));return o}function pt(t,e,i,n,r,s){return n&&!n[_]&&(n=pt(n)),r&&!r[_]&&(r=pt(r,s)),et((function(s,o,a,l){var h,u,d,g,f=[],m=[],_=o.length,y=s||function(t,e,i){for(var n=0,r=e.length;n<r;n++)Q(t,e[n],i);return i}(e||"*",a.nodeType?[a]:a,[]),v=!t||!s&&e?y:ft(y,f,t,a,l);if(i?i(v,g=r||(s?t:_||n)?[]:o,a,l):g=v,n)for(h=ft(g,m),n(h,[],a,l),u=h.length;u--;)(d=h[u])&&(g[m[u]]=!(v[m[u]]=d));if(s){if(r||t){if(r){for(h=[],u=g.length;u--;)(d=g[u])&&h.push(v[u]=d);r(null,g=[],h,l)}for(u=g.length;u--;)(d=g[u])&&(h=r?c.call(s,d):f[u])>-1&&(s[h]=!(o[h]=d))}}else g=ft(g===o?g.splice(_,g.length):g),r?r(null,o,g,l):p.apply(o,g)}))}function mt(t){for(var n,r,s,o=t.length,a=e.relative[t[0].type],l=a||e.relative[" "],h=a?1:0,u=dt((function(t){return t===n}),l,!0),d=dt((function(t){return c.call(n,t)>-1}),l,!0),g=[function(t,e,r){var s=!a&&(r||e!=i)||((n=e).nodeType?u(t,e,r):d(t,e,r));return n=null,s}];h<o;h++)if(r=e.relative[t[h].type])g=[dt(gt(g),r)];else{if((r=e.filter[t[h].type].apply(null,t[h].matches))[_]){for(s=++h;s<o&&!e.relative[t[s].type];s++);return pt(h>1&&gt(g),h>1&&ut(t.slice(0,h-1).concat({value:" "===t[h-2].type?"*":""})).replace(A,"$1"),r,h<s&&mt(t.slice(h,s)),s<o&&mt(t=t.slice(s)),s<o&&ut(t))}g.push(r)}return gt(g)}function _t(t,n){var r,s=[],o=[],a=C[t+" "];if(!a){for(n||(n=ct(t)),r=n.length;r--;)(a=mt(n[r]))[_]?s.push(a):o.push(a);a=C(t,function(t,n){var r=n.length>0,s=t.length>0,o=function(o,a,h,c,d){var g,f,m,_=0,v="0",x=o&&[],w=[],C=i,S=o||s&&e.find.TAG("*",d),E=y+=null==C?1:Math.random()||.1,T=S.length;for(d&&(i=a==l||a||d);v!==T&&null!=(g=S[v]);v++){if(s&&g){for(f=0,a||g.ownerDocument==l||(lt(g),h=!u);m=t[f++];)if(m(g,a||l,h)){p.call(c,g);break}d&&(y=E)}r&&((g=!m&&g)&&_--,o&&x.push(g))}if(_+=v,r&&v!==_){for(f=0;m=n[f++];)m(x,w,a,h);if(o){if(_>0)for(;v--;)x[v]||w[v]||(w[v]=I.call(c));w=ft(w)}p.apply(c,w),d&&!o&&w.length>0&&_+n.length>1&&b.uniqueSort(c)}return d&&(y=E,i=C),x};return r?et(o):o}(o,s)),a.selector=t}return a}function yt(t,i,n,r){var s,o,a,l,h,c="function"==typeof t&&t,d=!r&&ct(t=c.selector||t);if(n=n||[],1===d.length){if((o=d[0]=d[0].slice(0)).length>2&&"ID"===(a=o[0]).type&&9===i.nodeType&&u&&e.relative[o[1].type]){if(!(i=(e.find.ID(a.matches[0].replace(V,U),i)||[])[0]))return n;c&&(i=i.parentNode),t=t.slice(o.shift().value.length)}for(s=q.needsContext.test(t)?0:o.length;s--&&(a=o[s],!e.relative[l=a.type]);)if((h=e.find[l])&&(r=h(a.matches[0].replace(V,U),Z.test(o[0].type)&&at(i.parentNode)||i))){if(o.splice(s,1),!(t=r.length&&ut(o)))return p.apply(n,r),n;break}}return(c||_t(t,d))(r,i,!u,n,!i||Z.test(t)&&at(i.parentNode)||i),n}ht.prototype=e.filters=e.pseudos,e.setFilters=new ht,m.sortStable=_.split("").sort(E).join("")===_,lt(),m.sortDetached=it((function(t){return 1&t.compareDocumentPosition(l.createElement("fieldset"))})),b.find=Q,b.expr[":"]=b.expr.pseudos,b.unique=b.uniqueSort,Q.compile=_t,Q.select=yt,Q.setDocument=lt,Q.tokenize=ct,Q.escape=b.escapeSelector,Q.getText=b.text,Q.isXML=b.isXMLDoc,Q.selectors=b.expr,Q.support=b.support,Q.uniqueSort=b.uniqueSort}();var N=function(t,e,i){for(var n=[],r=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&b(t).is(i))break;n.push(t)}return n},j=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},G=b.expr.match.needsContext,W=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function z(t,e,i){return _(e)?b.grep(t,(function(t,n){return!!e.call(t,n,t)!==i})):e.nodeType?b.grep(t,(function(t){return t===e!==i})):"string"!=typeof e?b.grep(t,(function(t){return c.call(e,t)>-1!==i})):b.filter(e,t,i)}b.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?b.find.matchesSelector(n,t)?[n]:[]:b.find.matches(t,b.grep(e,(function(t){return 1===t.nodeType})))},b.fn.extend({find:function(t){var e,i,n=this.length,r=this;if("string"!=typeof t)return this.pushStack(b(t).filter((function(){for(e=0;e<n;e++)if(b.contains(r[e],this))return!0})));for(i=this.pushStack([]),e=0;e<n;e++)b.find(t,r[e],i);return n>1?b.uniqueSort(i):i},filter:function(t){return this.pushStack(z(this,t||[],!1))},not:function(t){return this.pushStack(z(this,t||[],!0))},is:function(t){return!!z(this,"string"==typeof t&&G.test(t)?b(t):t||[],!1).length}});var X,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(b.fn.init=function(t,e,i){var n,r;if(!t)return this;if(i=i||X,"string"==typeof t){if(!(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:B.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof b?e[0]:e,b.merge(this,b.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:v,!0)),W.test(n[1])&&b.isPlainObject(e))for(n in e)_(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(r=v.getElementById(n[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):_(t)?void 0!==i.ready?i.ready(t):t(b):b.makeArray(t,this)}).prototype=b.fn,X=b(v);var q=/^(?:parents|prev(?:Until|All))/,Y={children:!0,contents:!0,next:!0,prev:!0};function H(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}b.fn.extend({has:function(t){var e=b(t,this),i=e.length;return this.filter((function(){for(var t=0;t<i;t++)if(b.contains(this,e[t]))return!0}))},closest:function(t,e){var i,n=0,r=this.length,s=[],o="string"!=typeof t&&b(t);if(!G.test(t))for(;n<r;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(o?o.index(i)>-1:1===i.nodeType&&b.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(s.length>1?b.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?c.call(b(t),this[0]):c.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(b.uniqueSort(b.merge(this.get(),b(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),b.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return N(t,"parentNode")},parentsUntil:function(t,e,i){return N(t,"parentNode",i)},next:function(t){return H(t,"nextSibling")},prev:function(t){return H(t,"previousSibling")},nextAll:function(t){return N(t,"nextSibling")},prevAll:function(t){return N(t,"previousSibling")},nextUntil:function(t,e,i){return N(t,"nextSibling",i)},prevUntil:function(t,e,i){return N(t,"previousSibling",i)},siblings:function(t){return j((t.parentNode||{}).firstChild,t)},children:function(t){return j(t.firstChild)},contents:function(t){return null!=t.contentDocument&&o(t.contentDocument)?t.contentDocument:(R(t,"template")&&(t=t.content||t),b.merge([],t.childNodes))}},(function(t,e){b.fn[t]=function(i,n){var r=b.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=b.filter(n,r)),this.length>1&&(Y[t]||b.uniqueSort(r),q.test(t)&&r.reverse()),this.pushStack(r)}}));var K=/[^\x20\t\r\n\f]+/g;function Z(t){return t}function V(t){throw t}function U(t,e,i,n){var r;try{t&&_(r=t.promise)?r.call(t).done(e).fail(i):t&&_(r=t.then)?r.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}b.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return b.each(t.match(K)||[],(function(t,i){e[i]=!0})),e}(t):b.extend({},t);var e,i,n,r,s=[],o=[],a=-1,l=function(){for(r=r||t.once,n=e=!0;o.length;a=-1)for(i=o.shift();++a<s.length;)!1===s[a].apply(i[0],i[1])&&t.stopOnFalse&&(a=s.length,i=!1);t.memory||(i=!1),e=!1,r&&(s=i?[]:"")},h={add:function(){return s&&(i&&!e&&(a=s.length-1,o.push(i)),function e(i){b.each(i,(function(i,n){_(n)?t.unique&&h.has(n)||s.push(n):n&&n.length&&"string"!==C(n)&&e(n)}))}(arguments),i&&!e&&l()),this},remove:function(){return b.each(arguments,(function(t,e){for(var i;(i=b.inArray(e,s,i))>-1;)s.splice(i,1),i<=a&&a--})),this},has:function(t){return t?b.inArray(t,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=o=[],s=i="",this},disabled:function(){return!s},lock:function(){return r=o=[],i||e||(s=i=""),this},locked:function(){return!!r},fireWith:function(t,i){return r||(i=[t,(i=i||[]).slice?i.slice():i],o.push(i),e||l()),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!n}};return h},b.extend({Deferred:function(t){var e=[["notify","progress",b.Callbacks("memory"),b.Callbacks("memory"),2],["resolve","done",b.Callbacks("once memory"),b.Callbacks("once memory"),0,"resolved"],["reject","fail",b.Callbacks("once memory"),b.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return b.Deferred((function(i){b.each(e,(function(e,n){var r=_(t[n[4]])&&t[n[4]];s[n[1]]((function(){var t=r&&r.apply(this,arguments);t&&_(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[n[0]+"With"](this,r?[t]:arguments)}))})),t=null})).promise()},then:function(t,i,r){var s=0;function o(t,e,i,r){return function(){var a=this,l=arguments,h=function(){var n,h;if(!(t<s)){if((n=i.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");h=n&&("object"==typeof n||"function"==typeof n)&&n.then,_(h)?r?h.call(n,o(s,e,Z,r),o(s,e,V,r)):(s++,h.call(n,o(s,e,Z,r),o(s,e,V,r),o(s,e,Z,e.notifyWith))):(i!==Z&&(a=void 0,l=[n]),(r||e.resolveWith)(a,l))}},c=r?h:function(){try{h()}catch(n){b.Deferred.exceptionHook&&b.Deferred.exceptionHook(n,c.error),t+1>=s&&(i!==V&&(a=void 0,l=[n]),e.rejectWith(a,l))}};t?c():(b.Deferred.getErrorHook?c.error=b.Deferred.getErrorHook():b.Deferred.getStackHook&&(c.error=b.Deferred.getStackHook()),n.setTimeout(c))}}return b.Deferred((function(n){e[0][3].add(o(0,n,_(r)?r:Z,n.notifyWith)),e[1][3].add(o(0,n,_(t)?t:Z)),e[2][3].add(o(0,n,_(i)?i:V))})).promise()},promise:function(t){return null!=t?b.extend(t,r):r}},s={};return b.each(e,(function(t,n){var o=n[2],a=n[5];r[n[1]]=o.add,a&&o.add((function(){i=a}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),o.add(n[3].fire),s[n[0]]=function(){return s[n[0]+"With"](this===s?void 0:this,arguments),this},s[n[0]+"With"]=o.fireWith})),r.promise(s),t&&t.call(s,s),s},when:function(t){var e=arguments.length,i=e,n=Array(i),r=a.call(arguments),s=b.Deferred(),o=function(t){return function(i){n[t]=this,r[t]=arguments.length>1?a.call(arguments):i,--e||s.resolveWith(n,r)}};if(e<=1&&(U(t,s.done(o(i)).resolve,s.reject,!e),"pending"===s.state()||_(r[i]&&r[i].then)))return s.then();for(;i--;)U(r[i],o(i),s.reject);return s.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;b.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&$.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},b.readyException=function(t){n.setTimeout((function(){throw t}))};var J=b.Deferred();function Q(){v.removeEventListener("DOMContentLoaded",Q),n.removeEventListener("load",Q),b.ready()}b.fn.ready=function(t){return J.then(t).catch((function(t){b.readyException(t)})),this},b.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--b.readyWait:b.isReady)||(b.isReady=!0,!0!==t&&--b.readyWait>0||J.resolveWith(v,[b]))}}),b.ready.then=J.then,"complete"===v.readyState||"loading"!==v.readyState&&!v.documentElement.doScroll?n.setTimeout(b.ready):(v.addEventListener("DOMContentLoaded",Q),n.addEventListener("load",Q));var tt=function(t,e,i,n,r,s,o){var a=0,l=t.length,h=null==i;if("object"===C(i))for(a in r=!0,i)tt(t,e,a,i[a],!0,s,o);else if(void 0!==n&&(r=!0,_(n)||(o=!0),h&&(o?(e.call(t,n),e=null):(h=e,e=function(t,e,i){return h.call(b(t),i)})),e))for(;a<l;a++)e(t[a],i,o?n:n.call(t[a],a,e(t[a],i)));return r?t:h?e.call(t):l?e(t[0],i):s},et=/^-ms-/,it=/-([a-z])/g;function nt(t,e){return e.toUpperCase()}function rt(t){return t.replace(et,"ms-").replace(it,nt)}var st=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function ot(){this.expando=b.expando+ot.uid++}ot.uid=1,ot.prototype={cache:function(t){var e=t[this.expando];return e||(e={},st(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,r=this.cache(t);if("string"==typeof e)r[rt(e)]=i;else for(n in e)r[rt(n)]=e[n];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][rt(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(rt):(e=rt(e))in n?[e]:e.match(K)||[]).length;for(;i--;)delete n[e[i]]}(void 0===e||b.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!b.isEmptyObject(e)}};var at=new ot,lt=new ot,ht=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ct=/[A-Z]/g;function ut(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(ct,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:ht.test(t)?JSON.parse(t):t)}(i)}catch(t){}lt.set(t,e,i)}else i=void 0;return i}b.extend({hasData:function(t){return lt.hasData(t)||at.hasData(t)},data:function(t,e,i){return lt.access(t,e,i)},removeData:function(t,e){lt.remove(t,e)},_data:function(t,e,i){return at.access(t,e,i)},_removeData:function(t,e){at.remove(t,e)}}),b.fn.extend({data:function(t,e){var i,n,r,s=this[0],o=s&&s.attributes;if(void 0===t){if(this.length&&(r=lt.get(s),1===s.nodeType&&!at.get(s,"hasDataAttrs"))){for(i=o.length;i--;)o[i]&&0===(n=o[i].name).indexOf("data-")&&(n=rt(n.slice(5)),ut(s,n,r[n]));at.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each((function(){lt.set(this,t)})):tt(this,(function(e){var i;if(s&&void 0===e)return void 0!==(i=lt.get(s,t))||void 0!==(i=ut(s,t))?i:void 0;this.each((function(){lt.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){lt.remove(this,t)}))}}),b.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=at.get(t,e),i&&(!n||Array.isArray(i)?n=at.access(t,e,b.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=b.queue(t,e),n=i.length,r=i.shift(),s=b._queueHooks(t,e);"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===e&&i.unshift("inprogress"),delete s.stop,r.call(t,(function(){b.dequeue(t,e)}),s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return at.get(t,i)||at.access(t,i,{empty:b.Callbacks("once memory").add((function(){at.remove(t,[e+"queue",i])}))})}}),b.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?b.queue(this[0],t):void 0===e?this:this.each((function(){var i=b.queue(this,t,e);b._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&b.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){b.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,r=b.Deferred(),s=this,o=this.length,a=function(){--n||r.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)(i=at.get(s[o],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(e)}});var dt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,gt=new RegExp("^(?:([+-])=|)("+dt+")([a-z%]*)$","i"),ft=["Top","Right","Bottom","Left"],pt=v.documentElement,mt=function(t){return b.contains(t.ownerDocument,t)},_t={composed:!0};pt.getRootNode&&(mt=function(t){return b.contains(t.ownerDocument,t)||t.getRootNode(_t)===t.ownerDocument});var yt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&mt(t)&&"none"===b.css(t,"display")};function vt(t,e,i,n){var r,s,o=20,a=n?function(){return n.cur()}:function(){return b.css(t,e,"")},l=a(),h=i&&i[3]||(b.cssNumber[e]?"":"px"),c=t.nodeType&&(b.cssNumber[e]||"px"!==h&&+l)&&gt.exec(b.css(t,e));if(c&&c[3]!==h){for(l/=2,h=h||c[3],c=+l||1;o--;)b.style(t,e,c+h),(1-s)*(1-(s=a()/l||.5))<=0&&(o=0),c/=s;c*=2,b.style(t,e,c+h),i=i||[]}return i&&(c=+c||+l||0,r=i[1]?c+(i[1]+1)*i[2]:+i[2],n&&(n.unit=h,n.start=c,n.end=r)),r}var xt={};function wt(t){var e,i=t.ownerDocument,n=t.nodeName,r=xt[n];return r||(e=i.body.appendChild(i.createElement(n)),r=b.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),xt[n]=r,r)}function Ct(t,e){for(var i,n,r=[],s=0,o=t.length;s<o;s++)(n=t[s]).style&&(i=n.style.display,e?("none"===i&&(r[s]=at.get(n,"display")||null,r[s]||(n.style.display="")),""===n.style.display&&yt(n)&&(r[s]=wt(n))):"none"!==i&&(r[s]="none",at.set(n,"display",i)));for(s=0;s<o;s++)null!=r[s]&&(t[s].style.display=r[s]);return t}b.fn.extend({show:function(){return Ct(this,!0)},hide:function(){return Ct(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){yt(this)?b(this).show():b(this).hide()}))}});var St,Et,bt=/^(?:checkbox|radio)$/i,Tt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Rt=/^$|^module$|\/(?:java|ecma)script/i;St=v.createDocumentFragment().appendChild(v.createElement("div")),(Et=v.createElement("input")).setAttribute("type","radio"),Et.setAttribute("checked","checked"),Et.setAttribute("name","t"),St.appendChild(Et),m.checkClone=St.cloneNode(!0).cloneNode(!0).lastChild.checked,St.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!St.cloneNode(!0).lastChild.defaultValue,St.innerHTML="<option></option>",m.option=!!St.lastChild;var It={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Mt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&R(t,e)?b.merge([t],i):i}function kt(t,e){for(var i=0,n=t.length;i<n;i++)at.set(t[i],"globalEval",!e||at.get(e[i],"globalEval"))}It.tbody=It.tfoot=It.colgroup=It.caption=It.thead,It.th=It.td,m.option||(It.optgroup=It.option=[1,"<select multiple='multiple'>","</select>"]);var Lt=/<|&#?\w+;/;function At(t,e,i,n,r){for(var s,o,a,l,h,c,u=e.createDocumentFragment(),d=[],g=0,f=t.length;g<f;g++)if((s=t[g])||0===s)if("object"===C(s))b.merge(d,s.nodeType?[s]:s);else if(Lt.test(s)){for(o=o||u.appendChild(e.createElement("div")),a=(Tt.exec(s)||["",""])[1].toLowerCase(),l=It[a]||It._default,o.innerHTML=l[1]+b.htmlPrefilter(s)+l[2],c=l[0];c--;)o=o.lastChild;b.merge(d,o.childNodes),(o=u.firstChild).textContent=""}else d.push(e.createTextNode(s));for(u.textContent="",g=0;s=d[g++];)if(n&&b.inArray(s,n)>-1)r&&r.push(s);else if(h=mt(s),o=Mt(u.appendChild(s),"script"),h&&kt(o),i)for(c=0;s=o[c++];)Rt.test(s.type||"")&&i.push(s);return u}var Pt=/^([^.]*)(?:\.(.+)|)/;function Ft(){return!0}function Dt(){return!1}function Ot(t,e,i,n,r,s){var o,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)Ot(t,a,i,n,e[a],s);return t}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),!1===r)r=Dt;else if(!r)return t;return 1===s&&(o=r,r=function(t){return b().off(t),o.apply(this,arguments)},r.guid=o.guid||(o.guid=b.guid++)),t.each((function(){b.event.add(this,e,r,n,i)}))}function Nt(t,e,i){i?(at.set(t,e,!1),b.event.add(t,e,{namespace:!1,handler:function(t){var i,n=at.get(this,e);if(1&t.isTrigger&&this[e]){if(n)(b.event.special[e]||{}).delegateType&&t.stopPropagation();else if(n=a.call(arguments),at.set(this,e,n),this[e](),i=at.get(this,e),at.set(this,e,!1),n!==i)return t.stopImmediatePropagation(),t.preventDefault(),i}else n&&(at.set(this,e,b.event.trigger(n[0],n.slice(1),this)),t.stopPropagation(),t.isImmediatePropagationStopped=Ft)}})):void 0===at.get(t,e)&&b.event.add(t,e,Ft)}b.event={global:{},add:function(t,e,i,n,r){var s,o,a,l,h,c,u,d,g,f,p,m=at.get(t);if(st(t))for(i.handler&&(i=(s=i).handler,r=s.selector),r&&b.find.matchesSelector(pt,r),i.guid||(i.guid=b.guid++),(l=m.events)||(l=m.events=Object.create(null)),(o=m.handle)||(o=m.handle=function(e){return void 0!==b&&b.event.triggered!==e.type?b.event.dispatch.apply(t,arguments):void 0}),h=(e=(e||"").match(K)||[""]).length;h--;)g=p=(a=Pt.exec(e[h])||[])[1],f=(a[2]||"").split(".").sort(),g&&(u=b.event.special[g]||{},g=(r?u.delegateType:u.bindType)||g,u=b.event.special[g]||{},c=b.extend({type:g,origType:p,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&b.expr.match.needsContext.test(r),namespace:f.join(".")},s),(d=l[g])||((d=l[g]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,n,f,o)||t.addEventListener&&t.addEventListener(g,o)),u.add&&(u.add.call(t,c),c.handler.guid||(c.handler.guid=i.guid)),r?d.splice(d.delegateCount++,0,c):d.push(c),b.event.global[g]=!0)},remove:function(t,e,i,n,r){var s,o,a,l,h,c,u,d,g,f,p,m=at.hasData(t)&&at.get(t);if(m&&(l=m.events)){for(h=(e=(e||"").match(K)||[""]).length;h--;)if(g=p=(a=Pt.exec(e[h])||[])[1],f=(a[2]||"").split(".").sort(),g){for(u=b.event.special[g]||{},d=l[g=(n?u.delegateType:u.bindType)||g]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=d.length;s--;)c=d[s],!r&&p!==c.origType||i&&i.guid!==c.guid||a&&!a.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(d.splice(s,1),c.selector&&d.delegateCount--,u.remove&&u.remove.call(t,c));o&&!d.length&&(u.teardown&&!1!==u.teardown.call(t,f,m.handle)||b.removeEvent(t,g,m.handle),delete l[g])}else for(g in l)b.event.remove(t,g+e[h],i,n,!0);b.isEmptyObject(l)&&at.remove(t,"handle events")}},dispatch:function(t){var e,i,n,r,s,o,a=new Array(arguments.length),l=b.event.fix(t),h=(at.get(this,"events")||Object.create(null))[l.type]||[],c=b.event.special[l.type]||{};for(a[0]=l,e=1;e<arguments.length;e++)a[e]=arguments[e];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(o=b.event.handlers.call(this,l,h),e=0;(r=o[e++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,i=0;(s=r.handlers[i++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==s.namespace&&!l.rnamespace.test(s.namespace)||(l.handleObj=s,l.data=s.data,void 0!==(n=((b.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,a))&&!1===(l.result=n)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(t,e){var i,n,r,s,o,a=[],l=e.delegateCount,h=t.target;if(l&&h.nodeType&&!("click"===t.type&&t.button>=1))for(;h!==this;h=h.parentNode||this)if(1===h.nodeType&&("click"!==t.type||!0!==h.disabled)){for(s=[],o={},i=0;i<l;i++)void 0===o[r=(n=e[i]).selector+" "]&&(o[r]=n.needsContext?b(r,this).index(h)>-1:b.find(r,this,null,[h]).length),o[r]&&s.push(n);s.length&&a.push({elem:h,handlers:s})}return h=this,l<e.length&&a.push({elem:h,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(b.Event.prototype,t,{enumerable:!0,configurable:!0,get:_(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[b.expando]?t:new b.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return bt.test(e.type)&&e.click&&R(e,"input")&&Nt(e,"click",!0),!1},trigger:function(t){var e=this||t;return bt.test(e.type)&&e.click&&R(e,"input")&&Nt(e,"click"),!0},_default:function(t){var e=t.target;return bt.test(e.type)&&e.click&&R(e,"input")&&at.get(e,"click")||R(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},b.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},b.Event=function(t,e){if(!(this instanceof b.Event))return new b.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Ft:Dt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&b.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[b.expando]=!0},b.Event.prototype={constructor:b.Event,isDefaultPrevented:Dt,isPropagationStopped:Dt,isImmediatePropagationStopped:Dt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Ft,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Ft,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Ft,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},b.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},b.event.addProp),b.each({focus:"focusin",blur:"focusout"},(function(t,e){function i(t){if(v.documentMode){var i=at.get(this,"handle"),n=b.event.fix(t);n.type="focusin"===t.type?"focus":"blur",n.isSimulated=!0,i(t),n.target===n.currentTarget&&i(n)}else b.event.simulate(e,t.target,b.event.fix(t))}b.event.special[t]={setup:function(){var n;if(Nt(this,t,!0),!v.documentMode)return!1;(n=at.get(this,e))||this.addEventListener(e,i),at.set(this,e,(n||0)+1)},trigger:function(){return Nt(this,t),!0},teardown:function(){var t;if(!v.documentMode)return!1;(t=at.get(this,e)-1)?at.set(this,e,t):(this.removeEventListener(e,i),at.remove(this,e))},_default:function(e){return at.get(e.target,t)},delegateType:e},b.event.special[e]={setup:function(){var n=this.ownerDocument||this.document||this,r=v.documentMode?this:n,s=at.get(r,e);s||(v.documentMode?this.addEventListener(e,i):n.addEventListener(t,i,!0)),at.set(r,e,(s||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,r=v.documentMode?this:n,s=at.get(r,e)-1;s?at.set(r,e,s):(v.documentMode?this.removeEventListener(e,i):n.removeEventListener(t,i,!0),at.remove(r,e))}}})),b.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){b.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=t.relatedTarget,r=t.handleObj;return n&&(n===this||b.contains(this,n))||(t.type=r.origType,i=r.handler.apply(this,arguments),t.type=e),i}}})),b.fn.extend({on:function(t,e,i,n){return Ot(this,t,e,i,n)},one:function(t,e,i,n){return Ot(this,t,e,i,n,1)},off:function(t,e,i){var n,r;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,b(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=Dt),this.each((function(){b.event.remove(this,t,i,e)}))}});var jt=/<script|<style|<link/i,Gt=/checked\s*(?:[^=]|=\s*.checked.)/i,Wt=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function zt(t,e){return R(t,"table")&&R(11!==e.nodeType?e:e.firstChild,"tr")&&b(t).children("tbody")[0]||t}function Xt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Bt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function qt(t,e){var i,n,r,s,o,a;if(1===e.nodeType){if(at.hasData(t)&&(a=at.get(t).events))for(r in at.remove(e,"handle events"),a)for(i=0,n=a[r].length;i<n;i++)b.event.add(e,r,a[r][i]);lt.hasData(t)&&(s=lt.access(t),o=b.extend({},s),lt.set(e,o))}}function Yt(t,e){var i=e.nodeName.toLowerCase();"input"===i&&bt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function Ht(t,e,i,n){e=l(e);var r,s,o,a,h,c,u=0,d=t.length,g=d-1,f=e[0],p=_(f);if(p||d>1&&"string"==typeof f&&!m.checkClone&&Gt.test(f))return t.each((function(r){var s=t.eq(r);p&&(e[0]=f.call(this,r,s.html())),Ht(s,e,i,n)}));if(d&&(s=(r=At(e,t[0].ownerDocument,!1,t,n)).firstChild,1===r.childNodes.length&&(r=s),s||n)){for(a=(o=b.map(Mt(r,"script"),Xt)).length;u<d;u++)h=r,u!==g&&(h=b.clone(h,!0,!0),a&&b.merge(o,Mt(h,"script"))),i.call(t[u],h,u);if(a)for(c=o[o.length-1].ownerDocument,b.map(o,Bt),u=0;u<a;u++)h=o[u],Rt.test(h.type||"")&&!at.access(h,"globalEval")&&b.contains(c,h)&&(h.src&&"module"!==(h.type||"").toLowerCase()?b._evalUrl&&!h.noModule&&b._evalUrl(h.src,{nonce:h.nonce||h.getAttribute("nonce")},c):w(h.textContent.replace(Wt,""),h,c))}return t}function Kt(t,e,i){for(var n,r=e?b.filter(e,t):t,s=0;null!=(n=r[s]);s++)i||1!==n.nodeType||b.cleanData(Mt(n)),n.parentNode&&(i&&mt(n)&&kt(Mt(n,"script")),n.parentNode.removeChild(n));return t}b.extend({htmlPrefilter:function(t){return t},clone:function(t,e,i){var n,r,s,o,a=t.cloneNode(!0),l=mt(t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||b.isXMLDoc(t)))for(o=Mt(a),n=0,r=(s=Mt(t)).length;n<r;n++)Yt(s[n],o[n]);if(e)if(i)for(s=s||Mt(t),o=o||Mt(a),n=0,r=s.length;n<r;n++)qt(s[n],o[n]);else qt(t,a);return(o=Mt(a,"script")).length>0&&kt(o,!l&&Mt(t,"script")),a},cleanData:function(t){for(var e,i,n,r=b.event.special,s=0;void 0!==(i=t[s]);s++)if(st(i)){if(e=i[at.expando]){if(e.events)for(n in e.events)r[n]?b.event.remove(i,n):b.removeEvent(i,n,e.handle);i[at.expando]=void 0}i[lt.expando]&&(i[lt.expando]=void 0)}}}),b.fn.extend({detach:function(t){return Kt(this,t,!0)},remove:function(t){return Kt(this,t)},text:function(t){return tt(this,(function(t){return void 0===t?b.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Ht(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||zt(this,t).appendChild(t)}))},prepend:function(){return Ht(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=zt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Ht(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Ht(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(b.cleanData(Mt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return b.clone(this,t,e)}))},html:function(t){return tt(this,(function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!jt.test(t)&&!It[(Tt.exec(t)||["",""])[1].toLowerCase()]){t=b.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(b.cleanData(Mt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Ht(this,arguments,(function(e){var i=this.parentNode;b.inArray(this,t)<0&&(b.cleanData(Mt(this)),i&&i.replaceChild(e,this))}),t)}}),b.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){b.fn[t]=function(t){for(var i,n=[],r=b(t),s=r.length-1,o=0;o<=s;o++)i=o===s?this:this.clone(!0),b(r[o])[e](i),h.apply(n,i.get());return this.pushStack(n)}}));var Zt=new RegExp("^("+dt+")(?!px)[a-z%]+$","i"),Vt=/^--/,Ut=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},$t=function(t,e,i){var n,r,s={};for(r in e)s[r]=t.style[r],t.style[r]=e[r];for(r in n=i.call(t),e)t.style[r]=s[r];return n},Jt=new RegExp(ft.join("|"),"i");function Qt(t,e,i){var n,r,s,o,a=Vt.test(e),l=t.style;return(i=i||Ut(t))&&(o=i.getPropertyValue(e)||i[e],a&&o&&(o=o.replace(A,"$1")||void 0),""!==o||mt(t)||(o=b.style(t,e)),!m.pixelBoxStyles()&&Zt.test(o)&&Jt.test(e)&&(n=l.width,r=l.minWidth,s=l.maxWidth,l.minWidth=l.maxWidth=l.width=o,o=i.width,l.width=n,l.minWidth=r,l.maxWidth=s)),void 0!==o?o+"":o}function te(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){h.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",pt.appendChild(h).appendChild(c);var t=n.getComputedStyle(c);i="1%"!==t.top,l=12===e(t.marginLeft),c.style.right="60%",o=36===e(t.right),r=36===e(t.width),c.style.position="absolute",s=12===e(c.offsetWidth/3),pt.removeChild(h),c=null}}function e(t){return Math.round(parseFloat(t))}var i,r,s,o,a,l,h=v.createElement("div"),c=v.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===c.style.backgroundClip,b.extend(m,{boxSizingReliable:function(){return t(),r},pixelBoxStyles:function(){return t(),o},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),s},reliableTrDimensions:function(){var t,e,i,r;return null==a&&(t=v.createElement("table"),e=v.createElement("tr"),i=v.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="box-sizing:content-box;border:1px solid",e.style.height="1px",i.style.height="9px",i.style.display="block",pt.appendChild(t).appendChild(e).appendChild(i),r=n.getComputedStyle(e),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===e.offsetHeight,pt.removeChild(t)),a}}))}();var ee=["Webkit","Moz","ms"],ie=v.createElement("div").style,ne={};function re(t){return b.cssProps[t]||ne[t]||(t in ie?t:ne[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=ee.length;i--;)if((t=ee[i]+e)in ie)return t}(t)||t)}var se=/^(none|table(?!-c[ea]).+)/,oe={position:"absolute",visibility:"hidden",display:"block"},ae={letterSpacing:"0",fontWeight:"400"};function le(t,e,i){var n=gt.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function he(t,e,i,n,r,s){var o="width"===e?1:0,a=0,l=0,h=0;if(i===(n?"border":"content"))return 0;for(;o<4;o+=2)"margin"===i&&(h+=b.css(t,i+ft[o],!0,r)),n?("content"===i&&(l-=b.css(t,"padding"+ft[o],!0,r)),"margin"!==i&&(l-=b.css(t,"border"+ft[o]+"Width",!0,r))):(l+=b.css(t,"padding"+ft[o],!0,r),"padding"!==i?l+=b.css(t,"border"+ft[o]+"Width",!0,r):a+=b.css(t,"border"+ft[o]+"Width",!0,r));return!n&&s>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))||0),l+h}function ce(t,e,i){var n=Ut(t),r=(!m.boxSizingReliable()||i)&&"border-box"===b.css(t,"boxSizing",!1,n),s=r,o=Qt(t,e,n),a="offset"+e[0].toUpperCase()+e.slice(1);if(Zt.test(o)){if(!i)return o;o="auto"}return(!m.boxSizingReliable()&&r||!m.reliableTrDimensions()&&R(t,"tr")||"auto"===o||!parseFloat(o)&&"inline"===b.css(t,"display",!1,n))&&t.getClientRects().length&&(r="border-box"===b.css(t,"boxSizing",!1,n),(s=a in t)&&(o=t[a])),(o=parseFloat(o)||0)+he(t,e,i||(r?"border":"content"),s,n,o)+"px"}function ue(t,e,i,n,r){return new ue.prototype.init(t,e,i,n,r)}b.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Qt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,o,a=rt(e),l=Vt.test(e),h=t.style;if(l||(e=re(a)),o=b.cssHooks[e]||b.cssHooks[a],void 0===i)return o&&"get"in o&&void 0!==(r=o.get(t,!1,n))?r:h[e];"string"==(s=typeof i)&&(r=gt.exec(i))&&r[1]&&(i=vt(t,e,r),s="number"),null!=i&&i==i&&("number"!==s||l||(i+=r&&r[3]||(b.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==i||0!==e.indexOf("background")||(h[e]="inherit"),o&&"set"in o&&void 0===(i=o.set(t,i,n))||(l?h.setProperty(e,i):h[e]=i))}},css:function(t,e,i,n){var r,s,o,a=rt(e);return Vt.test(e)||(e=re(a)),(o=b.cssHooks[e]||b.cssHooks[a])&&"get"in o&&(r=o.get(t,!0,i)),void 0===r&&(r=Qt(t,e,n)),"normal"===r&&e in ae&&(r=ae[e]),""===i||i?(s=parseFloat(r),!0===i||isFinite(s)?s||0:r):r}}),b.each(["height","width"],(function(t,e){b.cssHooks[e]={get:function(t,i,n){if(i)return!se.test(b.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ce(t,e,n):$t(t,oe,(function(){return ce(t,e,n)}))},set:function(t,i,n){var r,s=Ut(t),o=!m.scrollboxSize()&&"absolute"===s.position,a=(o||n)&&"border-box"===b.css(t,"boxSizing",!1,s),l=n?he(t,e,n,a,s):0;return a&&o&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(s[e])-he(t,e,"border",!1,s)-.5)),l&&(r=gt.exec(i))&&"px"!==(r[3]||"px")&&(t.style[e]=i,i=b.css(t,e)),le(0,i,l)}}})),b.cssHooks.marginLeft=te(m.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Qt(t,"marginLeft"))||t.getBoundingClientRect().left-$t(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),b.each({margin:"",padding:"",border:"Width"},(function(t,e){b.cssHooks[t+e]={expand:function(i){for(var n=0,r={},s="string"==typeof i?i.split(" "):[i];n<4;n++)r[t+ft[n]+e]=s[n]||s[n-2]||s[0];return r}},"margin"!==t&&(b.cssHooks[t+e].set=le)})),b.fn.extend({css:function(t,e){return tt(this,(function(t,e,i){var n,r,s={},o=0;if(Array.isArray(e)){for(n=Ut(t),r=e.length;o<r;o++)s[e[o]]=b.css(t,e[o],!1,n);return s}return void 0!==i?b.style(t,e,i):b.css(t,e)}),t,e,arguments.length>1)}}),b.Tween=ue,ue.prototype={constructor:ue,init:function(t,e,i,n,r,s){this.elem=t,this.prop=i,this.easing=r||b.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=s||(b.cssNumber[i]?"":"px")},cur:function(){var t=ue.propHooks[this.prop];return t&&t.get?t.get(this):ue.propHooks._default.get(this)},run:function(t){var e,i=ue.propHooks[this.prop];return this.options.duration?this.pos=e=b.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ue.propHooks._default.set(this),this}},ue.prototype.init.prototype=ue.prototype,ue.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=b.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){b.fx.step[t.prop]?b.fx.step[t.prop](t):1!==t.elem.nodeType||!b.cssHooks[t.prop]&&null==t.elem.style[re(t.prop)]?t.elem[t.prop]=t.now:b.style(t.elem,t.prop,t.now+t.unit)}}},ue.propHooks.scrollTop=ue.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},b.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},b.fx=ue.prototype.init,b.fx.step={};var de,ge,fe=/^(?:toggle|show|hide)$/,pe=/queueHooks$/;function me(){ge&&(!1===v.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(me):n.setTimeout(me,b.fx.interval),b.fx.tick())}function _e(){return n.setTimeout((function(){de=void 0})),de=Date.now()}function ye(t,e){var i,n=0,r={height:t};for(e=e?1:0;n<4;n+=2-e)r["margin"+(i=ft[n])]=r["padding"+i]=t;return e&&(r.opacity=r.width=t),r}function ve(t,e,i){for(var n,r=(xe.tweeners[e]||[]).concat(xe.tweeners["*"]),s=0,o=r.length;s<o;s++)if(n=r[s].call(i,e,t))return n}function xe(t,e,i){var n,r,s=0,o=xe.prefilters.length,a=b.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var e=de||_e(),i=Math.max(0,h.startTime+h.duration-e),n=1-(i/h.duration||0),s=0,o=h.tweens.length;s<o;s++)h.tweens[s].run(n);return a.notifyWith(t,[h,n,i]),n<1&&o?i:(o||a.notifyWith(t,[h,1,0]),a.resolveWith(t,[h]),!1)},h=a.promise({elem:t,props:b.extend({},e),opts:b.extend(!0,{specialEasing:{},easing:b.easing._default},i),originalProperties:e,originalOptions:i,startTime:de||_e(),duration:i.duration,tweens:[],createTween:function(e,i){var n=b.Tween(t,h.opts,e,i,h.opts.specialEasing[e]||h.opts.easing);return h.tweens.push(n),n},stop:function(e){var i=0,n=e?h.tweens.length:0;if(r)return this;for(r=!0;i<n;i++)h.tweens[i].run(1);return e?(a.notifyWith(t,[h,1,0]),a.resolveWith(t,[h,e])):a.rejectWith(t,[h,e]),this}}),c=h.props;for(function(t,e){var i,n,r,s,o;for(i in t)if(r=e[n=rt(i)],s=t[i],Array.isArray(s)&&(r=s[1],s=t[i]=s[0]),i!==n&&(t[n]=s,delete t[i]),(o=b.cssHooks[n])&&"expand"in o)for(i in s=o.expand(s),delete t[n],s)i in t||(t[i]=s[i],e[i]=r);else e[n]=r}(c,h.opts.specialEasing);s<o;s++)if(n=xe.prefilters[s].call(h,t,c,h.opts))return _(n.stop)&&(b._queueHooks(h.elem,h.opts.queue).stop=n.stop.bind(n)),n;return b.map(c,ve,h),_(h.opts.start)&&h.opts.start.call(t,h),h.progress(h.opts.progress).done(h.opts.done,h.opts.complete).fail(h.opts.fail).always(h.opts.always),b.fx.timer(b.extend(l,{elem:t,anim:h,queue:h.opts.queue})),h}b.Animation=b.extend(xe,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return vt(i.elem,t,gt.exec(e),i),i}]},tweener:function(t,e){_(t)?(e=t,t=["*"]):t=t.match(K);for(var i,n=0,r=t.length;n<r;n++)i=t[n],xe.tweeners[i]=xe.tweeners[i]||[],xe.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,r,s,o,a,l,h,c,u="width"in e||"height"in e,d=this,g={},f=t.style,p=t.nodeType&&yt(t),m=at.get(t,"fxshow");for(n in i.queue||(null==(o=b._queueHooks(t,"fx")).unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,d.always((function(){d.always((function(){o.unqueued--,b.queue(t,"fx").length||o.empty.fire()}))}))),e)if(r=e[n],fe.test(r)){if(delete e[n],s=s||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!m||void 0===m[n])continue;p=!0}g[n]=m&&m[n]||b.style(t,n)}if((l=!b.isEmptyObject(e))||!b.isEmptyObject(g))for(n in u&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(h=m&&m.display)&&(h=at.get(t,"display")),"none"===(c=b.css(t,"display"))&&(h?c=h:(Ct([t],!0),h=t.style.display||h,c=b.css(t,"display"),Ct([t]))),("inline"===c||"inline-block"===c&&null!=h)&&"none"===b.css(t,"float")&&(l||(d.done((function(){f.display=h})),null==h&&(c=f.display,h="none"===c?"":c)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",d.always((function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]}))),l=!1,g)l||(m?"hidden"in m&&(p=m.hidden):m=at.access(t,"fxshow",{display:h}),s&&(m.hidden=!p),p&&Ct([t],!0),d.done((function(){for(n in p||Ct([t]),at.remove(t,"fxshow"),g)b.style(t,n,g[n])}))),l=ve(p?m[n]:0,n,d),n in m||(m[n]=l.start,p&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?xe.prefilters.unshift(t):xe.prefilters.push(t)}}),b.speed=function(t,e,i){var n=t&&"object"==typeof t?b.extend({},t):{complete:i||!i&&e||_(t)&&t,duration:t,easing:i&&e||e&&!_(e)&&e};return b.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in b.fx.speeds?n.duration=b.fx.speeds[n.duration]:n.duration=b.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){_(n.old)&&n.old.call(this),n.queue&&b.dequeue(this,n.queue)},n},b.fn.extend({fadeTo:function(t,e,i,n){return this.filter(yt).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var r=b.isEmptyObject(t),s=b.speed(e,i,n),o=function(){var e=xe(this,b.extend({},t),s);(r||at.get(this,"finish"))&&e.stop(!0)};return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,r=null!=t&&t+"queueHooks",s=b.timers,o=at.get(this);if(r)o[r]&&o[r].stop&&n(o[r]);else for(r in o)o[r]&&o[r].stop&&pe.test(r)&&n(o[r]);for(r=s.length;r--;)s[r].elem!==this||null!=t&&s[r].queue!==t||(s[r].anim.stop(i),e=!1,s.splice(r,1));!e&&i||b.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,i=at.get(this),n=i[t+"queue"],r=i[t+"queueHooks"],s=b.timers,o=n?n.length:0;for(i.finish=!0,b.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===t&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish}))}}),b.each(["toggle","show","hide"],(function(t,e){var i=b.fn[e];b.fn[e]=function(t,n,r){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(ye(e,!0),t,n,r)}})),b.each({slideDown:ye("show"),slideUp:ye("hide"),slideToggle:ye("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){b.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}})),b.timers=[],b.fx.tick=function(){var t,e=0,i=b.timers;for(de=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||b.fx.stop(),de=void 0},b.fx.timer=function(t){b.timers.push(t),b.fx.start()},b.fx.interval=13,b.fx.start=function(){ge||(ge=!0,me())},b.fx.stop=function(){ge=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fn.delay=function(t,e){return t=b.fx&&b.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,i){var r=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(r)}}))},function(){var t=v.createElement("input"),e=v.createElement("select").appendChild(v.createElement("option"));t.type="checkbox",m.checkOn=""!==t.value,m.optSelected=e.selected,(t=v.createElement("input")).value="t",t.type="radio",m.radioValue="t"===t.value}();var we,Ce=b.expr.attrHandle;b.fn.extend({attr:function(t,e){return tt(this,b.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){b.removeAttr(this,t)}))}}),b.extend({attr:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?b.prop(t,e,i):(1===s&&b.isXMLDoc(t)||(r=b.attrHooks[e.toLowerCase()]||(b.expr.match.bool.test(e)?we:void 0)),void 0!==i?null===i?void b.removeAttr(t,e):r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:(t.setAttribute(e,i+""),i):r&&"get"in r&&null!==(n=r.get(t,e))?n:null==(n=b.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!m.radioValue&&"radio"===e&&R(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,r=e&&e.match(K);if(r&&1===t.nodeType)for(;i=r[n++];)t.removeAttribute(i)}}),we={set:function(t,e,i){return!1===e?b.removeAttr(t,i):t.setAttribute(i,i),i}},b.each(b.expr.match.bool.source.match(/\w+/g),(function(t,e){var i=Ce[e]||b.find.attr;Ce[e]=function(t,e,n){var r,s,o=e.toLowerCase();return n||(s=Ce[o],Ce[o]=r,r=null!=i(t,e,n)?o:null,Ce[o]=s),r}}));var Se=/^(?:input|select|textarea|button)$/i,Ee=/^(?:a|area)$/i;function be(t){return(t.match(K)||[]).join(" ")}function Te(t){return t.getAttribute&&t.getAttribute("class")||""}function Re(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(K)||[]}b.fn.extend({prop:function(t,e){return tt(this,b.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[b.propFix[t]||t]}))}}),b.extend({prop:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&b.isXMLDoc(t)||(e=b.propFix[e]||e,r=b.propHooks[e]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:t[e]=i:r&&"get"in r&&null!==(n=r.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=b.find.attr(t,"tabindex");return e?parseInt(e,10):Se.test(t.nodeName)||Ee.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(b.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),b.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){b.propFix[this.toLowerCase()]=this})),b.fn.extend({addClass:function(t){var e,i,n,r,s,o;return _(t)?this.each((function(e){b(this).addClass(t.call(this,e,Te(this)))})):(e=Re(t)).length?this.each((function(){if(n=Te(this),i=1===this.nodeType&&" "+be(n)+" "){for(s=0;s<e.length;s++)r=e[s],i.indexOf(" "+r+" ")<0&&(i+=r+" ");o=be(i),n!==o&&this.setAttribute("class",o)}})):this},removeClass:function(t){var e,i,n,r,s,o;return _(t)?this.each((function(e){b(this).removeClass(t.call(this,e,Te(this)))})):arguments.length?(e=Re(t)).length?this.each((function(){if(n=Te(this),i=1===this.nodeType&&" "+be(n)+" "){for(s=0;s<e.length;s++)for(r=e[s];i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o=be(i),n!==o&&this.setAttribute("class",o)}})):this:this.attr("class","")},toggleClass:function(t,e){var i,n,r,s,o=typeof t,a="string"===o||Array.isArray(t);return _(t)?this.each((function(i){b(this).toggleClass(t.call(this,i,Te(this),e),e)})):"boolean"==typeof e&&a?e?this.addClass(t):this.removeClass(t):(i=Re(t),this.each((function(){if(a)for(s=b(this),r=0;r<i.length;r++)n=i[r],s.hasClass(n)?s.removeClass(n):s.addClass(n);else void 0!==t&&"boolean"!==o||((n=Te(this))&&at.set(this,"__className__",n),this.setAttribute&&this.setAttribute("class",n||!1===t?"":at.get(this,"__className__")||""))})))},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+be(Te(i))+" ").indexOf(e)>-1)return!0;return!1}});var Ie=/\r/g;b.fn.extend({val:function(t){var e,i,n,r=this[0];return arguments.length?(n=_(t),this.each((function(i){var r;1===this.nodeType&&(null==(r=n?t.call(this,i,b(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=b.map(r,(function(t){return null==t?"":t+""}))),(e=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))}))):r?(e=b.valHooks[r.type]||b.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(r,"value"))?i:"string"==typeof(i=r.value)?i.replace(Ie,""):null==i?"":i:void 0}}),b.extend({valHooks:{option:{get:function(t){var e=b.find.attr(t,"value");return null!=e?e:be(b.text(t))}},select:{get:function(t){var e,i,n,r=t.options,s=t.selectedIndex,o="select-one"===t.type,a=o?null:[],l=o?s+1:r.length;for(n=s<0?l:o?s:0;n<l;n++)if(((i=r[n]).selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!R(i.parentNode,"optgroup"))){if(e=b(i).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var i,n,r=t.options,s=b.makeArray(e),o=r.length;o--;)((n=r[o]).selected=b.inArray(b.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),b.each(["radio","checkbox"],(function(){b.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=b.inArray(b(t).val(),e)>-1}},m.checkOn||(b.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}));var Me=n.location,ke={guid:Date.now()},Le=/\?/;b.parseXML=function(t){var e,i;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){}return i=e&&e.getElementsByTagName("parsererror")[0],e&&!i||b.error("Invalid XML: "+(i?b.map(i.childNodes,(function(t){return t.textContent})).join("\n"):t)),e};var Ae=/^(?:focusinfocus|focusoutblur)$/,Pe=function(t){t.stopPropagation()};b.extend(b.event,{trigger:function(t,e,i,r){var s,o,a,l,h,c,u,d,f=[i||v],p=g.call(t,"type")?t.type:t,m=g.call(t,"namespace")?t.namespace.split("."):[];if(o=d=a=i=i||v,3!==i.nodeType&&8!==i.nodeType&&!Ae.test(p+b.event.triggered)&&(p.indexOf(".")>-1&&(m=p.split("."),p=m.shift(),m.sort()),h=p.indexOf(":")<0&&"on"+p,(t=t[b.expando]?t:new b.Event(p,"object"==typeof t&&t)).isTrigger=r?2:3,t.namespace=m.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:b.makeArray(e,[t]),u=b.event.special[p]||{},r||!u.trigger||!1!==u.trigger.apply(i,e))){if(!r&&!u.noBubble&&!y(i)){for(l=u.delegateType||p,Ae.test(l+p)||(o=o.parentNode);o;o=o.parentNode)f.push(o),a=o;a===(i.ownerDocument||v)&&f.push(a.defaultView||a.parentWindow||n)}for(s=0;(o=f[s++])&&!t.isPropagationStopped();)d=o,t.type=s>1?l:u.bindType||p,(c=(at.get(o,"events")||Object.create(null))[t.type]&&at.get(o,"handle"))&&c.apply(o,e),(c=h&&o[h])&&c.apply&&st(o)&&(t.result=c.apply(o,e),!1===t.result&&t.preventDefault());return t.type=p,r||t.isDefaultPrevented()||u._default&&!1!==u._default.apply(f.pop(),e)||!st(i)||h&&_(i[p])&&!y(i)&&((a=i[h])&&(i[h]=null),b.event.triggered=p,t.isPropagationStopped()&&d.addEventListener(p,Pe),i[p](),t.isPropagationStopped()&&d.removeEventListener(p,Pe),b.event.triggered=void 0,a&&(i[h]=a)),t.result}},simulate:function(t,e,i){var n=b.extend(new b.Event,i,{type:t,isSimulated:!0});b.event.trigger(n,null,e)}}),b.fn.extend({trigger:function(t,e){return this.each((function(){b.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var i=this[0];if(i)return b.event.trigger(t,e,i,!0)}});var Fe=/\[\]$/,De=/\r?\n/g,Oe=/^(?:submit|button|image|reset|file)$/i,Ne=/^(?:input|select|textarea|keygen)/i;function je(t,e,i,n){var r;if(Array.isArray(e))b.each(e,(function(e,r){i||Fe.test(t)?n(t,r):je(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,i,n)}));else if(i||"object"!==C(e))n(t,e);else for(r in e)je(t+"["+r+"]",e[r],i,n)}b.param=function(t,e){var i,n=[],r=function(t,e){var i=_(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!b.isPlainObject(t))b.each(t,(function(){r(this.name,this.value)}));else for(i in t)je(i,t[i],e,r);return n.join("&")},b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=b.prop(this,"elements");return t?b.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!b(this).is(":disabled")&&Ne.test(this.nodeName)&&!Oe.test(t)&&(this.checked||!bt.test(t))})).map((function(t,e){var i=b(this).val();return null==i?null:Array.isArray(i)?b.map(i,(function(t){return{name:e.name,value:t.replace(De,"\r\n")}})):{name:e.name,value:i.replace(De,"\r\n")}})).get()}});var Ge=/%20/g,We=/#.*$/,ze=/([?&])_=[^&]*/,Xe=/^(.*?):[ \t]*([^\r\n]*)$/gm,Be=/^(?:GET|HEAD)$/,qe=/^\/\//,Ye={},He={},Ke="*/".concat("*"),Ze=v.createElement("a");function Ve(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,r=0,s=e.toLowerCase().match(K)||[];if(_(i))for(;n=s[r++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function Ue(t,e,i,n){var r={},s=t===He;function o(a){var l;return r[a]=!0,b.each(t[a]||[],(function(t,a){var h=a(e,i,n);return"string"!=typeof h||s||r[h]?s?!(l=h):void 0:(e.dataTypes.unshift(h),o(h),!1)})),l}return o(e.dataTypes[0])||!r["*"]&&o("*")}function $e(t,e){var i,n,r=b.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((r[i]?t:n||(n={}))[i]=e[i]);return n&&b.extend(!0,t,n),t}Ze.href=Me.href,b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Me.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Me.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ke,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?$e($e(t,b.ajaxSettings),e):$e(b.ajaxSettings,t)},ajaxPrefilter:Ve(Ye),ajaxTransport:Ve(He),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,s,o,a,l,h,c,u,d,g=b.ajaxSetup({},e),f=g.context||g,p=g.context&&(f.nodeType||f.jquery)?b(f):b.event,m=b.Deferred(),_=b.Callbacks("once memory"),y=g.statusCode||{},x={},w={},C="canceled",S={readyState:0,getResponseHeader:function(t){var e;if(h){if(!o)for(o={};e=Xe.exec(s);)o[e[1].toLowerCase()+" "]=(o[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=o[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return h?s:null},setRequestHeader:function(t,e){return null==h&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==h&&(g.mimeType=t),this},statusCode:function(t){var e;if(t)if(h)S.always(t[S.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||C;return i&&i.abort(e),E(0,e),this}};if(m.promise(S),g.url=((t||g.url||Me.href)+"").replace(qe,Me.protocol+"//"),g.type=e.method||e.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(K)||[""],null==g.crossDomain){l=v.createElement("a");try{l.href=g.url,l.href=l.href,g.crossDomain=Ze.protocol+"//"+Ze.host!=l.protocol+"//"+l.host}catch(t){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=b.param(g.data,g.traditional)),Ue(Ye,g,e,S),h)return S;for(u in(c=b.event&&g.global)&&0==b.active++&&b.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Be.test(g.type),r=g.url.replace(We,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Ge,"+")):(d=g.url.slice(r.length),g.data&&(g.processData||"string"==typeof g.data)&&(r+=(Le.test(r)?"&":"?")+g.data,delete g.data),!1===g.cache&&(r=r.replace(ze,"$1"),d=(Le.test(r)?"&":"?")+"_="+ke.guid+++d),g.url=r+d),g.ifModified&&(b.lastModified[r]&&S.setRequestHeader("If-Modified-Since",b.lastModified[r]),b.etag[r]&&S.setRequestHeader("If-None-Match",b.etag[r])),(g.data&&g.hasContent&&!1!==g.contentType||e.contentType)&&S.setRequestHeader("Content-Type",g.contentType),S.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Ke+"; q=0.01":""):g.accepts["*"]),g.headers)S.setRequestHeader(u,g.headers[u]);if(g.beforeSend&&(!1===g.beforeSend.call(f,S,g)||h))return S.abort();if(C="abort",_.add(g.complete),S.done(g.success),S.fail(g.error),i=Ue(He,g,e,S)){if(S.readyState=1,c&&p.trigger("ajaxSend",[S,g]),h)return S;g.async&&g.timeout>0&&(a=n.setTimeout((function(){S.abort("timeout")}),g.timeout));try{h=!1,i.send(x,E)}catch(t){if(h)throw t;E(-1,t)}}else E(-1,"No Transport");function E(t,e,o,l){var u,d,v,x,w,C=e;h||(h=!0,a&&n.clearTimeout(a),i=void 0,s=l||"",S.readyState=t>0?4:0,u=t>=200&&t<300||304===t,o&&(x=function(t,e,i){for(var n,r,s,o,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(r in a)if(a[r]&&a[r].test(n)){l.unshift(r);break}if(l[0]in i)s=l[0];else{for(r in i){if(!l[0]||t.converters[r+" "+l[0]]){s=r;break}o||(o=r)}s=s||o}if(s)return s!==l[0]&&l.unshift(s),i[s]}(g,S,o)),!u&&b.inArray("script",g.dataTypes)>-1&&b.inArray("json",g.dataTypes)<0&&(g.converters["text script"]=function(){}),x=function(t,e,i,n){var r,s,o,a,l,h={},c=t.dataTypes.slice();if(c[1])for(o in t.converters)h[o.toLowerCase()]=t.converters[o];for(s=c.shift();s;)if(t.responseFields[s]&&(i[t.responseFields[s]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=c.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(o=h[l+" "+s]||h["* "+s]))for(r in h)if((a=r.split(" "))[1]===s&&(o=h[l+" "+a[0]]||h["* "+a[0]])){!0===o?o=h[r]:!0!==h[r]&&(s=a[0],c.unshift(a[1]));break}if(!0!==o)if(o&&t.throws)e=o(e);else try{e=o(e)}catch(t){return{state:"parsererror",error:o?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(g,x,S,u),u?(g.ifModified&&((w=S.getResponseHeader("Last-Modified"))&&(b.lastModified[r]=w),(w=S.getResponseHeader("etag"))&&(b.etag[r]=w)),204===t||"HEAD"===g.type?C="nocontent":304===t?C="notmodified":(C=x.state,d=x.data,u=!(v=x.error))):(v=C,!t&&C||(C="error",t<0&&(t=0))),S.status=t,S.statusText=(e||C)+"",u?m.resolveWith(f,[d,C,S]):m.rejectWith(f,[S,C,v]),S.statusCode(y),y=void 0,c&&p.trigger(u?"ajaxSuccess":"ajaxError",[S,g,u?d:v]),_.fireWith(f,[S,C]),c&&(p.trigger("ajaxComplete",[S,g]),--b.active||b.event.trigger("ajaxStop")))}return S},getJSON:function(t,e,i){return b.get(t,e,i,"json")},getScript:function(t,e){return b.get(t,void 0,e,"script")}}),b.each(["get","post"],(function(t,e){b[e]=function(t,i,n,r){return _(i)&&(r=r||n,n=i,i=void 0),b.ajax(b.extend({url:t,type:e,dataType:r,data:i,success:n},b.isPlainObject(t)&&t))}})),b.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),b._evalUrl=function(t,e,i){return b.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){b.globalEval(t,e,i)}})},b.fn.extend({wrapAll:function(t){var e;return this[0]&&(_(t)&&(t=t.call(this[0])),e=b(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return _(t)?this.each((function(e){b(this).wrapInner(t.call(this,e))})):this.each((function(){var e=b(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)}))},wrap:function(t){var e=_(t);return this.each((function(i){b(this).wrapAll(e?t.call(this,i):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){b(this).replaceWith(this.childNodes)})),this}}),b.expr.pseudos.hidden=function(t){return!b.expr.pseudos.visible(t)},b.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},b.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Je={0:200,1223:204},Qe=b.ajaxSettings.xhr();m.cors=!!Qe&&"withCredentials"in Qe,m.ajax=Qe=!!Qe,b.ajaxTransport((function(t){var e,i;if(m.cors||Qe&&!t.crossDomain)return{send:function(r,s){var o,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)a[o]=t.xhrFields[o];for(o in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(o,r[o]);e=function(t){return function(){e&&(e=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(Je[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),i=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout((function(){e&&i()}))},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),b.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),b.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return b.globalEval(t),t}}}),b.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),b.ajaxTransport("script",(function(t){var e,i;if(t.crossDomain||t.scriptAttrs)return{send:function(n,r){e=b("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&r("error"===t.type?404:200,t.type)}),v.head.appendChild(e[0])},abort:function(){i&&i()}}}));var ti,ei=[],ii=/(=)\?(?=&|$)|\?\?/;b.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=ei.pop()||b.expando+"_"+ke.guid++;return this[t]=!0,t}}),b.ajaxPrefilter("json jsonp",(function(t,e,i){var r,s,o,a=!1!==t.jsonp&&(ii.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&ii.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=_(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(ii,"$1"+r):!1!==t.jsonp&&(t.url+=(Le.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return o||b.error(r+" was not called"),o[0]},t.dataTypes[0]="json",s=n[r],n[r]=function(){o=arguments},i.always((function(){void 0===s?b(n).removeProp(r):n[r]=s,t[r]&&(t.jsonpCallback=e.jsonpCallback,ei.push(r)),o&&_(s)&&s(o[0]),o=s=void 0})),"script"})),m.createHTMLDocument=((ti=v.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ti.childNodes.length),b.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(m.createHTMLDocument?((n=(e=v.implementation.createHTMLDocument("")).createElement("base")).href=v.location.href,e.head.appendChild(n)):e=v),s=!i&&[],(r=W.exec(t))?[e.createElement(r[1])]:(r=At([t],e,s),s&&s.length&&b(s).remove(),b.merge([],r.childNodes)));var n,r,s},b.fn.load=function(t,e,i){var n,r,s,o=this,a=t.indexOf(" ");return a>-1&&(n=be(t.slice(a)),t=t.slice(0,a)),_(e)?(i=e,e=void 0):e&&"object"==typeof e&&(r="POST"),o.length>0&&b.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done((function(t){s=arguments,o.html(n?b("<div>").append(b.parseHTML(t)).find(n):t)})).always(i&&function(t,e){o.each((function(){i.apply(this,s||[t.responseText,e,t])}))}),this},b.expr.pseudos.animated=function(t){return b.grep(b.timers,(function(e){return t===e.elem})).length},b.offset={setOffset:function(t,e,i){var n,r,s,o,a,l,h=b.css(t,"position"),c=b(t),u={};"static"===h&&(t.style.position="relative"),a=c.offset(),s=b.css(t,"top"),l=b.css(t,"left"),("absolute"===h||"fixed"===h)&&(s+l).indexOf("auto")>-1?(o=(n=c.position()).top,r=n.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),_(e)&&(e=e.call(t,i,b.extend({},a))),null!=e.top&&(u.top=e.top-a.top+o),null!=e.left&&(u.left=e.left-a.left+r),"using"in e?e.using.call(t,u):c.css(u)}},b.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){b.offset.setOffset(this,t,e)}));var e,i,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:e.top+i.pageYOffset,left:e.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],r={top:0,left:0};if("fixed"===b.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===b.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((r=b(t).offset()).top+=b.css(t,"borderTopWidth",!0),r.left+=b.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-b.css(n,"marginTop",!0),left:e.left-r.left-b.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===b.css(t,"position");)t=t.offsetParent;return t||pt}))}}),b.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var i="pageYOffset"===e;b.fn[t]=function(n){return tt(this,(function(t,n,r){var s;if(y(t)?s=t:9===t.nodeType&&(s=t.defaultView),void 0===r)return s?s[e]:t[n];s?s.scrollTo(i?s.pageXOffset:r,i?r:s.pageYOffset):t[n]=r}),t,n,arguments.length)}})),b.each(["top","left"],(function(t,e){b.cssHooks[e]=te(m.pixelPosition,(function(t,i){if(i)return i=Qt(t,e),Zt.test(i)?b(t).position()[e]+"px":i}))})),b.each({Height:"height",Width:"width"},(function(t,e){b.each({padding:"inner"+t,content:e,"":"outer"+t},(function(i,n){b.fn[n]=function(r,s){var o=arguments.length&&(i||"boolean"!=typeof r),a=i||(!0===r||!0===s?"margin":"border");return tt(this,(function(e,i,r){var s;return y(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===r?b.css(e,i,a):b.style(e,i,r,a)}),e,o?r:void 0,o)}}))})),b.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){b.fn[e]=function(t){return this.on(e,t)}})),b.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)},hover:function(t,e){return this.on("mouseenter",t).on("mouseleave",e||t)}}),b.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){b.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}));var ni=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;b.proxy=function(t,e){var i,n,r;if("string"==typeof e&&(i=t[e],e=t,t=i),_(t))return n=a.call(arguments,2),r=function(){return t.apply(e||this,n.concat(a.call(arguments)))},r.guid=t.guid=t.guid||b.guid++,r},b.holdReady=function(t){t?b.readyWait++:b.ready(!0)},b.isArray=Array.isArray,b.parseJSON=JSON.parse,b.nodeName=R,b.isFunction=_,b.isWindow=y,b.camelCase=rt,b.type=C,b.now=Date.now,b.isNumeric=function(t){var e=b.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},b.trim=function(t){return null==t?"":(t+"").replace(ni,"$1")},void 0===(i=function(){return b}.apply(e,[]))||(t.exports=i);var ri=n.jQuery,si=n.$;return b.noConflict=function(t){return n.$===b&&(n.$=si),t&&n.jQuery===b&&(n.jQuery=ri),b},void 0===r&&(n.jQuery=n.$=b),b}))},582:function(t){t.exports=function(){"use strict";function t(t,n,r,s,o){!function t(i,n,r,s,o){for(;s>r;){if(s-r>600){var a=s-r+1,l=n-r+1,h=Math.log(a),c=.5*Math.exp(2*h/3),u=.5*Math.sqrt(h*c*(a-c)/a)*(l-a/2<0?-1:1);t(i,n,Math.max(r,Math.floor(n-l*c/a+u)),Math.min(s,Math.floor(n+(a-l)*c/a+u)),o)}var d=i[n],g=r,f=s;for(e(i,r,n),o(i[s],d)>0&&e(i,r,s);g<f;){for(e(i,g,f),g++,f--;o(i[g],d)<0;)g++;for(;o(i[f],d)>0;)f--}0===o(i[r],d)?e(i,r,f):e(i,++f,s),f<=n&&(r=f+1),n<=f&&(s=f-1)}}(t,n,r||0,s||t.length-1,o||i)}function e(t,e,i){var n=t[e];t[e]=t[i],t[i]=n}function i(t,e){return t<e?-1:t>e?1:0}var n=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function r(t,e,i){if(!i)return e.indexOf(t);for(var n=0;n<e.length;n++)if(i(t,e[n]))return n;return-1}function s(t,e){o(t,0,t.children.length,e,t)}function o(t,e,i,n,r){r||(r=f(null)),r.minX=1/0,r.minY=1/0,r.maxX=-1/0,r.maxY=-1/0;for(var s=e;s<i;s++){var o=t.children[s];a(r,t.leaf?n(o):o)}return r}function a(t,e){return t.minX=Math.min(t.minX,e.minX),t.minY=Math.min(t.minY,e.minY),t.maxX=Math.max(t.maxX,e.maxX),t.maxY=Math.max(t.maxY,e.maxY),t}function l(t,e){return t.minX-e.minX}function h(t,e){return t.minY-e.minY}function c(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function d(t,e){return t.minX<=e.minX&&t.minY<=e.minY&&e.maxX<=t.maxX&&e.maxY<=t.maxY}function g(t,e){return e.minX<=t.maxX&&e.minY<=t.maxY&&e.maxX>=t.minX&&e.maxY>=t.minY}function f(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function p(e,i,n,r,s){for(var o=[i,n];o.length;)if(!((n=o.pop())-(i=o.pop())<=r)){var a=i+Math.ceil((n-i)/r/2)*r;t(e,a,i,n,s),o.push(i,a,a,n)}}return n.prototype.all=function(){return this._all(this.data,[])},n.prototype.search=function(t){var e=this.data,i=[];if(!g(t,e))return i;for(var n=this.toBBox,r=[];e;){for(var s=0;s<e.children.length;s++){var o=e.children[s],a=e.leaf?n(o):o;g(t,a)&&(e.leaf?i.push(o):d(t,a)?this._all(o,i):r.push(o))}e=r.pop()}return i},n.prototype.collides=function(t){var e=this.data;if(!g(t,e))return!1;for(var i=[];e;){for(var n=0;n<e.children.length;n++){var r=e.children[n],s=e.leaf?this.toBBox(r):r;if(g(t,s)){if(e.leaf||d(t,s))return!0;i.push(r)}}e=i.pop()}return!1},n.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var e=0;e<t.length;e++)this.insert(t[e]);return this}var i=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===i.height)this._splitRoot(this.data,i);else{if(this.data.height<i.height){var n=this.data;this.data=i,i=n}this._insert(i,this.data.height-i.height-1,!0)}else this.data=i;return this},n.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},n.prototype.clear=function(){return this.data=f([]),this},n.prototype.remove=function(t,e){if(!t)return this;for(var i,n,s,o=this.data,a=this.toBBox(t),l=[],h=[];o||l.length;){if(o||(o=l.pop(),n=l[l.length-1],i=h.pop(),s=!0),o.leaf){var c=r(t,o.children,e);if(-1!==c)return o.children.splice(c,1),l.push(o),this._condense(l),this}s||o.leaf||!d(o,a)?n?(i++,o=n.children[i],s=!1):o=null:(l.push(o),h.push(i),i=0,n=o,o=o.children[0])}return this},n.prototype.toBBox=function(t){return t},n.prototype.compareMinX=function(t,e){return t.minX-e.minX},n.prototype.compareMinY=function(t,e){return t.minY-e.minY},n.prototype.toJSON=function(){return this.data},n.prototype.fromJSON=function(t){return this.data=t,this},n.prototype._all=function(t,e){for(var i=[];t;)t.leaf?e.push.apply(e,t.children):i.push.apply(i,t.children),t=i.pop();return e},n.prototype._build=function(t,e,i,n){var r,o=i-e+1,a=this._maxEntries;if(o<=a)return s(r=f(t.slice(e,i+1)),this.toBBox),r;n||(n=Math.ceil(Math.log(o)/Math.log(a)),a=Math.ceil(o/Math.pow(a,n-1))),(r=f([])).leaf=!1,r.height=n;var l=Math.ceil(o/a),h=l*Math.ceil(Math.sqrt(a));p(t,e,i,h,this.compareMinX);for(var c=e;c<=i;c+=h){var u=Math.min(c+h-1,i);p(t,c,u,l,this.compareMinY);for(var d=c;d<=u;d+=l){var g=Math.min(d+l-1,u);r.children.push(this._build(t,d,g,n-1))}}return s(r,this.toBBox),r},n.prototype._chooseSubtree=function(t,e,i,n){for(;n.push(e),!e.leaf&&n.length-1!==i;){for(var r=1/0,s=1/0,o=void 0,a=0;a<e.children.length;a++){var l=e.children[a],h=c(l),u=(d=t,g=l,(Math.max(g.maxX,d.maxX)-Math.min(g.minX,d.minX))*(Math.max(g.maxY,d.maxY)-Math.min(g.minY,d.minY))-h);u<s?(s=u,r=h<r?h:r,o=l):u===s&&h<r&&(r=h,o=l)}e=o||e.children[0]}var d,g;return e},n.prototype._insert=function(t,e,i){var n=i?t:this.toBBox(t),r=[],s=this._chooseSubtree(n,this.data,e,r);for(s.children.push(t),a(s,n);e>=0&&r[e].children.length>this._maxEntries;)this._split(r,e),e--;this._adjustParentBBoxes(n,r,e)},n.prototype._split=function(t,e){var i=t[e],n=i.children.length,r=this._minEntries;this._chooseSplitAxis(i,r,n);var o=this._chooseSplitIndex(i,r,n),a=f(i.children.splice(o,i.children.length-o));a.height=i.height,a.leaf=i.leaf,s(i,this.toBBox),s(a,this.toBBox),e?t[e-1].children.push(a):this._splitRoot(i,a)},n.prototype._splitRoot=function(t,e){this.data=f([t,e]),this.data.height=t.height+1,this.data.leaf=!1,s(this.data,this.toBBox)},n.prototype._chooseSplitIndex=function(t,e,i){for(var n,r,s,a,l,h,u,d=1/0,g=1/0,f=e;f<=i-e;f++){var p=o(t,0,f,this.toBBox),m=o(t,f,i,this.toBBox),_=(r=p,s=m,void 0,void 0,void 0,void 0,a=Math.max(r.minX,s.minX),l=Math.max(r.minY,s.minY),h=Math.min(r.maxX,s.maxX),u=Math.min(r.maxY,s.maxY),Math.max(0,h-a)*Math.max(0,u-l)),y=c(p)+c(m);_<d?(d=_,n=f,g=y<g?y:g):_===d&&y<g&&(g=y,n=f)}return n||i-e},n.prototype._chooseSplitAxis=function(t,e,i){var n=t.leaf?this.compareMinX:l,r=t.leaf?this.compareMinY:h;this._allDistMargin(t,e,i,n)<this._allDistMargin(t,e,i,r)&&t.children.sort(n)},n.prototype._allDistMargin=function(t,e,i,n){t.children.sort(n);for(var r=this.toBBox,s=o(t,0,e,r),l=o(t,i-e,i,r),h=u(s)+u(l),c=e;c<i-e;c++){var d=t.children[c];a(s,t.leaf?r(d):d),h+=u(s)}for(var g=i-e-1;g>=e;g--){var f=t.children[g];a(l,t.leaf?r(f):f),h+=u(l)}return h},n.prototype._adjustParentBBoxes=function(t,e,i){for(var n=i;n>=0;n--)a(e[n],t)},n.prototype._condense=function(t){for(var e=t.length-1,i=void 0;e>=0;e--)0===t[e].children.length?e>0?(i=t[e-1].children).splice(i.indexOf(t[e]),1):this.clear():s(t[e],this.toBBox)},n}()}},e={};function i(n){var r=e[n];if(void 0!==r)return r.exports;var s=e[n]={exports:{}};return t[n].call(s.exports,s,s.exports,i),s.exports}(()=>{"use strict";const t=class{constructor(t){this.propagationStopped,this.defaultPrevented,this.type=t,this.target=null}preventDefault(){this.defaultPrevented=!0}stopPropagation(){this.propagationStopped=!0}},e="propertychange",n=class{constructor(){this.disposed=!1}dispose(){this.disposed||(this.disposed=!0,this.disposeInternal())}disposeInternal(){}};function r(t,e){return t>e?1:t<e?-1:0}function s(t,e,i){if(t[0]<=e)return 0;const n=t.length;if(e<=t[n-1])return n-1;if("function"==typeof i){for(let r=1;r<n;++r){const n=t[r];if(n===e)return r;if(n<e)return i(e,t[r-1],n)>0?r-1:r}return n-1}if(i>0){for(let i=1;i<n;++i)if(t[i]<e)return i-1;return n-1}if(i<0){for(let i=1;i<n;++i)if(t[i]<=e)return i;return n-1}for(let i=1;i<n;++i){if(t[i]==e)return i;if(t[i]<e)return t[i-1]-e<e-t[i]?i-1:i}return n-1}function o(t,e,i){for(;e<i;){const n=t[e];t[e]=t[i],t[i]=n,++e,--i}}function a(t,e){const i=Array.isArray(e)?e:[e],n=i.length;for(let e=0;e<n;e++)t[t.length]=i[e]}function l(t,e){const i=t.length;if(i!==e.length)return!1;for(let n=0;n<i;n++)if(t[n]!==e[n])return!1;return!0}function h(){return!0}function c(){return!1}function u(){}function d(t){let e,i,n,r=!1;return function(){const s=Array.prototype.slice.call(arguments);return r&&this===n&&l(s,i)||(r=!0,n=this,i=s,e=t.apply(this,arguments)),e}}function g(t){for(const e in t)delete t[e]}function f(t){let e;for(e in t)return!1;return!e}const p=class extends n{constructor(t){super(),this.eventTarget_=t,this.pendingRemovals_=null,this.dispatching_=null,this.listeners_=null}addEventListener(t,e){if(!t||!e)return;const i=this.listeners_||(this.listeners_={}),n=i[t]||(i[t]=[]);n.includes(e)||n.push(e)}dispatchEvent(e){const i="string"==typeof e,n=i?e:e.type,r=this.listeners_&&this.listeners_[n];if(!r)return;const s=i?new t(e):e;s.target||(s.target=this.eventTarget_||this);const o=this.dispatching_||(this.dispatching_={}),a=this.pendingRemovals_||(this.pendingRemovals_={});let l;n in o||(o[n]=0,a[n]=0),++o[n];for(let t=0,e=r.length;t<e;++t)if(l="handleEvent"in r[t]?r[t].handleEvent(s):r[t].call(this,s),!1===l||s.propagationStopped){l=!1;break}if(0==--o[n]){let t=a[n];for(delete a[n];t--;)this.removeEventListener(n,u);delete o[n]}return l}disposeInternal(){this.listeners_&&g(this.listeners_)}getListeners(t){return this.listeners_&&this.listeners_[t]||void 0}hasListener(t){return!!this.listeners_&&(t?t in this.listeners_:Object.keys(this.listeners_).length>0)}removeEventListener(t,e){if(!this.listeners_)return;const i=this.listeners_[t];if(!i)return;const n=i.indexOf(e);-1!==n&&(this.pendingRemovals_&&t in this.pendingRemovals_?(i[n]=u,++this.pendingRemovals_[t]):(i.splice(n,1),0===i.length&&delete this.listeners_[t]))}},m="change",_="contextmenu",y="click",v="keydown",x="keypress",w="touchmove",C="wheel";function S(t,e,i,n,r){if(n&&n!==t&&(i=i.bind(n)),r){const n=i;i=function(){t.removeEventListener(e,i),n.apply(this,arguments)}}const s={target:t,type:e,listener:i};return t.addEventListener(e,i),s}function E(t,e,i,n){return S(t,e,i,n,!0)}function b(t){t&&t.target&&(t.target.removeEventListener(t.type,t.listener),g(t))}class T extends p{constructor(){super(),this.on=this.onInternal,this.once=this.onceInternal,this.un=this.unInternal,this.revision_=0}changed(){++this.revision_,this.dispatchEvent(m)}getRevision(){return this.revision_}onInternal(t,e){if(Array.isArray(t)){const i=t.length,n=new Array(i);for(let r=0;r<i;++r)n[r]=S(this,t[r],e);return n}return S(this,t,e)}onceInternal(t,e){let i;if(Array.isArray(t)){const n=t.length;i=new Array(n);for(let r=0;r<n;++r)i[r]=E(this,t[r],e)}else i=E(this,t,e);return e.ol_key=i,i}unInternal(t,e){const i=e.ol_key;if(i)!function(t){if(Array.isArray(t))for(let e=0,i=t.length;e<i;++e)b(t[e]);else b(t)}(i);else if(Array.isArray(t))for(let i=0,n=t.length;i<n;++i)this.removeEventListener(t[i],e);else this.removeEventListener(t,e)}}T.prototype.on,T.prototype.once,T.prototype.un;const R=T;function I(){throw new Error("Unimplemented abstract method.")}let M=0;function k(t){return t.ol_uid||(t.ol_uid=String(++M))}class L extends t{constructor(t,e,i){super(t),this.key=e,this.oldValue=i}}const A=class extends R{constructor(t){super(),this.on,this.once,this.un,k(this),this.values_=null,void 0!==t&&this.setProperties(t)}get(t){let e;return this.values_&&this.values_.hasOwnProperty(t)&&(e=this.values_[t]),e}getKeys(){return this.values_&&Object.keys(this.values_)||[]}getProperties(){return this.values_&&Object.assign({},this.values_)||{}}getPropertiesInternal(){return this.values_}hasProperties(){return!!this.values_}notify(t,i){let n;n=`change:${t}`,this.hasListener(n)&&this.dispatchEvent(new L(n,t,i)),n=e,this.hasListener(n)&&this.dispatchEvent(new L(n,t,i))}addChangeListener(t,e){this.addEventListener(`change:${t}`,e)}removeChangeListener(t,e){this.removeEventListener(`change:${t}`,e)}set(t,e,i){const n=this.values_||(this.values_={});if(i)n[t]=e;else{const i=n[t];n[t]=e,i!==e&&this.notify(t,i)}}setProperties(t,e){for(const i in t)this.set(i,t[i],e)}applyProperties(t){t.values_&&Object.assign(this.values_||(this.values_={}),t.values_)}unset(t,e){if(this.values_&&t in this.values_){const i=this.values_[t];delete this.values_[t],f(this.values_)&&(this.values_=null),e||this.notify(t,i)}}},P="add",F="remove",D="length";class O extends t{constructor(t,e,i){super(t),this.element=e,this.index=i}}const N=class extends A{constructor(t,e){if(super(),this.on,this.once,this.un,e=e||{},this.unique_=!!e.unique,this.array_=t||[],this.unique_)for(let t=0,e=this.array_.length;t<e;++t)this.assertUnique_(this.array_[t],t);this.updateLength_()}clear(){for(;this.getLength()>0;)this.pop()}extend(t){for(let e=0,i=t.length;e<i;++e)this.push(t[e]);return this}forEach(t){const e=this.array_;for(let i=0,n=e.length;i<n;++i)t(e[i],i,e)}getArray(){return this.array_}item(t){return this.array_[t]}getLength(){return this.get(D)}insertAt(t,e){if(t<0||t>this.getLength())throw new Error("Index out of bounds: "+t);this.unique_&&this.assertUnique_(e),this.array_.splice(t,0,e),this.updateLength_(),this.dispatchEvent(new O(P,e,t))}pop(){return this.removeAt(this.getLength()-1)}push(t){this.unique_&&this.assertUnique_(t);const e=this.getLength();return this.insertAt(e,t),this.getLength()}remove(t){const e=this.array_;for(let i=0,n=e.length;i<n;++i)if(e[i]===t)return this.removeAt(i)}removeAt(t){if(t<0||t>=this.getLength())return;const e=this.array_[t];return this.array_.splice(t,1),this.updateLength_(),this.dispatchEvent(new O(F,e,t)),e}setAt(t,e){if(t>=this.getLength())return void this.insertAt(t,e);if(t<0)throw new Error("Index out of bounds: "+t);this.unique_&&this.assertUnique_(e,t);const i=this.array_[t];this.array_[t]=e,this.dispatchEvent(new O(F,i,t)),this.dispatchEvent(new O(P,e,t))}updateLength_(){this.set(D,this.array_.length)}assertUnique_(t,e){for(let i=0,n=this.array_.length;i<n;++i)if(this.array_[i]===t&&i!==e)throw new Error("Duplicate item added to a unique collection")}},j="undefined"!=typeof navigator&&void 0!==navigator.userAgent?navigator.userAgent.toLowerCase():"",G=j.includes("firefox"),W=(j.includes("safari")&&!j.includes("chrom")&&(j.includes("version/15.4")||/cpu (os|iphone os) 15_4 like mac os x/.test(j)),j.includes("webkit")&&!j.includes("edge")),z=j.includes("macintosh"),X="undefined"!=typeof devicePixelRatio?devicePixelRatio:1,B="undefined"!=typeof WorkerGlobalScope&&"undefined"!=typeof OffscreenCanvas&&self instanceof WorkerGlobalScope,q="undefined"!=typeof Image&&Image.prototype.decode,Y=function(){let t=!1;try{const e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("_",null,e),window.removeEventListener("_",null,e)}catch(t){}return t}();function H(t,e){if(!t)throw new Error(e)}function K(t,e){const i=e[0],n=e[1];return e[0]=t[0]*i+t[2]*n+t[4],e[1]=t[1]*i+t[3]*n+t[5],e}function Z(t,e,i,n,r,s,o,a){const l=Math.sin(s),h=Math.cos(s);return t[0]=n*h,t[1]=r*l,t[2]=-n*l,t[3]=r*h,t[4]=o*n*h-a*n*l+e,t[5]=o*r*l+a*r*h+i,t}function V(t,e){const i=(n=e)[0]*n[3]-n[1]*n[2];var n;H(0!==i,"Transformation matrix cannot be inverted");const r=e[0],s=e[1],o=e[2],a=e[3],l=e[4],h=e[5];return t[0]=a/i,t[1]=-s/i,t[2]=-o/i,t[3]=r/i,t[4]=(o*h-a*l)/i,t[5]=-(r*h-s*l)/i,t}let U;function $(t){const e="matrix("+t.join(", ")+")";if(B)return e;const i=U||(U=document.createElement("div"));return i.style.transform=e,i.style.transform}new Array(6);const J={UNKNOWN:0,INTERSECTING:1,ABOVE:2,RIGHT:4,BELOW:8,LEFT:16};function Q(t){const e=[1/0,1/0,-1/0,-1/0];for(let i=0,n=t.length;i<n;++i)dt(e,t[i]);return e}function tt(t,e,i){return i?(i[0]=t[0]-e,i[1]=t[1]-e,i[2]=t[2]+e,i[3]=t[3]+e,i):[t[0]-e,t[1]-e,t[2]+e,t[3]+e]}function et(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t.slice()}function it(t,e,i){let n,r;return n=e<t[0]?t[0]-e:t[2]<e?e-t[2]:0,r=i<t[1]?t[1]-i:t[3]<i?i-t[3]:0,n*n+r*r}function nt(t,e){return st(t,e[0],e[1])}function rt(t,e){return t[0]<=e[0]&&e[2]<=t[2]&&t[1]<=e[1]&&e[3]<=t[3]}function st(t,e,i){return t[0]<=e&&e<=t[2]&&t[1]<=i&&i<=t[3]}function ot(t,e){const i=t[0],n=t[1],r=t[2],s=t[3],o=e[0],a=e[1];let l=J.UNKNOWN;return o<i?l|=J.LEFT:o>r&&(l|=J.RIGHT),a<n?l|=J.BELOW:a>s&&(l|=J.ABOVE),l===J.UNKNOWN&&(l=J.INTERSECTING),l}function at(t,e,i,n,r){return r?(r[0]=t,r[1]=e,r[2]=i,r[3]=n,r):[t,e,i,n]}function lt(t){return at(1/0,1/0,-1/0,-1/0,t)}function ht(t,e){const i=t[0],n=t[1];return at(i,n,i,n,e)}function ct(t,e,i,n,r){return gt(lt(r),t,e,i,n)}function ut(t,e){return t[0]==e[0]&&t[2]==e[2]&&t[1]==e[1]&&t[3]==e[3]}function dt(t,e){e[0]<t[0]&&(t[0]=e[0]),e[0]>t[2]&&(t[2]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>t[3]&&(t[3]=e[1])}function gt(t,e,i,n,r){for(;i<n;i+=r)ft(t,e[i],e[i+1]);return t}function ft(t,e,i){t[0]=Math.min(t[0],e),t[1]=Math.min(t[1],i),t[2]=Math.max(t[2],e),t[3]=Math.max(t[3],i)}function pt(t,e){let i;return i=e(_t(t)),i||(i=e(yt(t)),i||(i=e(Tt(t)),i||(i=e(bt(t)),i||!1)))}function mt(t){let e=0;return Mt(t)||(e=Rt(t)*St(t)),e}function _t(t){return[t[0],t[1]]}function yt(t){return[t[2],t[1]]}function vt(t){return[(t[0]+t[2])/2,(t[1]+t[3])/2]}function xt(t,e){let i;if("bottom-left"===e)i=_t(t);else if("bottom-right"===e)i=yt(t);else if("top-left"===e)i=bt(t);else{if("top-right"!==e)throw new Error("Invalid corner");i=Tt(t)}return i}function wt(t,e,i,n,r){const[s,o,a,l,h,c,u,d]=Ct(t,e,i,n);return at(Math.min(s,a,h,u),Math.min(o,l,c,d),Math.max(s,a,h,u),Math.max(o,l,c,d),r)}function Ct(t,e,i,n){const r=e*n[0]/2,s=e*n[1]/2,o=Math.cos(i),a=Math.sin(i),l=r*o,h=r*a,c=s*o,u=s*a,d=t[0],g=t[1];return[d-l+u,g-h-c,d-l-u,g-h+c,d+l-u,g+h+c,d+l+u,g+h-c,d-l+u,g-h-c]}function St(t){return t[3]-t[1]}function Et(t,e,i){const n=i||[1/0,1/0,-1/0,-1/0];return It(t,e)?(t[0]>e[0]?n[0]=t[0]:n[0]=e[0],t[1]>e[1]?n[1]=t[1]:n[1]=e[1],t[2]<e[2]?n[2]=t[2]:n[2]=e[2],t[3]<e[3]?n[3]=t[3]:n[3]=e[3]):lt(n),n}function bt(t){return[t[0],t[3]]}function Tt(t){return[t[2],t[3]]}function Rt(t){return t[2]-t[0]}function It(t,e){return t[0]<=e[2]&&t[2]>=e[0]&&t[1]<=e[3]&&t[3]>=e[1]}function Mt(t){return t[2]<t[0]||t[3]<t[1]}function kt(t,e){const i=e.getExtent(),n=vt(t);if(e.canWrapX()&&(n[0]<i[0]||n[0]>=i[2])){const e=Rt(i),r=Math.floor((n[0]-i[0])/e)*e;t[0]-=r,t[2]-=r}return t}const Lt={name:"rgb",min:[0,0,0],max:[255,255,255],channel:["red","green","blue"],alias:["RGB"]};var At={name:"xyz",min:[0,0,0],channel:["X","Y","Z"],alias:["XYZ","ciexyz","cie1931"],whitepoint:{2:{A:[109.85,100,35.585],C:[98.074,100,118.232],D50:[96.422,100,82.521],D55:[95.682,100,92.149],D65:[95.045592705167,100,108.9057750759878],D75:[94.972,100,122.638],F2:[99.187,100,67.395],F7:[95.044,100,108.755],F11:[100.966,100,64.37],E:[100,100,100]},10:{A:[111.144,100,35.2],C:[97.285,100,116.145],D50:[96.72,100,81.427],D55:[95.799,100,90.926],D65:[94.811,100,107.304],D75:[94.416,100,120.641],F2:[103.28,100,69.026],F7:[95.792,100,107.687],F11:[103.866,100,65.627],E:[100,100,100]}}};At.max=At.whitepoint[2].D65,At.rgb=function(t,e){e=e||At.whitepoint[2].E;var i,n,r,s=t[0]/e[0],o=t[1]/e[1],a=t[2]/e[2];return n=-.96924363628087*s+1.87596750150772*o+.041555057407175*a,r=.055630079696993*s+-.20397695888897*o+1.056971514242878*a,i=(i=3.240969941904521*s+-1.537383177570093*o+-.498610760293*a)>.0031308?1.055*Math.pow(i,1/2.4)-.055:i*=12.92,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:n*=12.92,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:r*=12.92,[255*(i=Math.min(Math.max(0,i),1)),255*(n=Math.min(Math.max(0,n),1)),255*(r=Math.min(Math.max(0,r),1))]},Lt.xyz=function(t,e){var i=t[0]/255,n=t[1]/255,r=t[2]/255,s=.21263900587151*(i=i>.04045?Math.pow((i+.055)/1.055,2.4):i/12.92)+.71516867876775*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.072192315360733*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92),o=.019330818715591*i+.11919477979462*n+.95053215224966*r;return[(.41239079926595*i+.35758433938387*n+.18048078840183*r)*(e=e||At.whitepoint[2].E)[0],s*e[1],o*e[2]]};const Pt=At,Ft={name:"luv",min:[0,-134,-140],max:[100,224,122],channel:["lightness","u","v"],alias:["LUV","cieluv","cie1976"],xyz:function(t,e,i){var n,r,s,o,a,l,h,c,u;return s=t[0],o=t[1],a=t[2],0===s?[0,0,0]:(e=e||"D65",i=i||2,n=o/(13*s)+4*(h=Pt.whitepoint[i][e][0])/(h+15*(c=Pt.whitepoint[i][e][1])+3*(u=Pt.whitepoint[i][e][2]))||0,r=a/(13*s)+9*c/(h+15*c+3*u)||0,[9*(l=s>8?c*Math.pow((s+16)/116,3):c*s*.0011070564598794539)*n/(4*r)||0,l,l*(12-3*n-20*r)/(4*r)||0])}};Pt.luv=function(t,e,i){var n,r,s,o,a,l,h,c,u,d,g;e=e||"D65",i=i||2,d=4*(h=Pt.whitepoint[i][e][0])/(h+15*(c=Pt.whitepoint[i][e][1])+3*(u=Pt.whitepoint[i][e][2])),g=9*c/(h+15*c+3*u),n=4*(o=t[0])/(o+15*(a=t[1])+3*(l=t[2]))||0,r=9*a/(o+15*a+3*l)||0;var f=a/c;return[s=f<=.008856451679035631?903.2962962962961*f:116*Math.pow(f,1/3)-16,13*s*(n-d),13*s*(r-g)]};var Dt={name:"lchuv",channel:["lightness","chroma","hue"],alias:["LCHuv","cielchuv"],min:[0,0,0],max:[100,100,360],luv:function(t){var e,i=t[0],n=t[1];return e=t[2]/360*2*Math.PI,[i,n*Math.cos(e),n*Math.sin(e)]},xyz:function(t){return Ft.xyz(Dt.luv(t))}};const Ot=Dt;Ft.lchuv=function(t){var e=t[0],i=t[1],n=t[2],r=Math.sqrt(i*i+n*n),s=360*Math.atan2(n,i)/2/Math.PI;return s<0&&(s+=360),[e,r,s]},Pt.lchuv=function(t){return Ft.lchuv(Pt.luv(t))};var Nt=i(874);const jt=function(t){var e,i,n=[],r=1;if("number"==typeof t)return{space:"rgb",values:[t>>>16,(65280&t)>>>8,255&t],alpha:1};if("number"==typeof t)return{space:"rgb",values:[t>>>16,(65280&t)>>>8,255&t],alpha:1};if(t=String(t).toLowerCase(),Nt[t])n=Nt[t].slice(),i="rgb";else if("transparent"===t)r=0,i="rgb",n=[0,0,0];else if("#"===t[0]){var s=t.slice(1),o=s.length;r=1,o<=4?(n=[parseInt(s[0]+s[0],16),parseInt(s[1]+s[1],16),parseInt(s[2]+s[2],16)],4===o&&(r=parseInt(s[3]+s[3],16)/255)):(n=[parseInt(s[0]+s[1],16),parseInt(s[2]+s[3],16),parseInt(s[4]+s[5],16)],8===o&&(r=parseInt(s[6]+s[7],16)/255)),n[0]||(n[0]=0),n[1]||(n[1]=0),n[2]||(n[2]=0),i="rgb"}else if(e=/^((?:rgba?|hs[lvb]a?|hwba?|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms|oklch|oklab|color))\s*\(([^\)]*)\)/.exec(t)){var a=e[1],l="cmyk"===(i=a.replace(/a$/,""))?4:"gray"===i?1:3;n=e[2].trim().split(/\s*[,\/]\s*|\s+/),"color"===i&&(i=n.shift()),r=(n=n.map((function(t,e){if("%"===t[t.length-1])return t=parseFloat(t)/100,3===e?t:"rgb"===i?255*t:"h"===i[0]?100*t:"l"!==i[0]||e?"lab"===i?125*t:"lch"===i?e<2?150*t:360*t:"o"!==i[0]||e?"oklab"===i?.4*t:"oklch"===i?e<2?.4*t:360*t:t:t:100*t;if("h"===i[e]||2===e&&"h"===i[i.length-1]){if(void 0!==Gt[t])return Gt[t];if(t.endsWith("deg"))return parseFloat(t);if(t.endsWith("turn"))return 360*parseFloat(t);if(t.endsWith("grad"))return 360*parseFloat(t)/400;if(t.endsWith("rad"))return 180*parseFloat(t)/Math.PI}return"none"===t?0:parseFloat(t)}))).length>l?n.pop():1}else/[0-9](?:\s|\/|,)/.test(t)&&(n=t.match(/([0-9]+)/g).map((function(t){return parseFloat(t)})),i=t.match(/([a-z])/gi)?.join("")?.toLowerCase()||"rgb");return{space:i,values:n,alpha:r}};var Gt={red:0,orange:60,yellow:120,green:180,blue:240,purple:300};const Wt={name:"hsl",min:[0,0,0],max:[360,100,100],channel:["hue","saturation","lightness"],alias:["HSL"],rgb:function(t){var e,i,n,r,s,o=t[0]/360,a=t[1]/100,l=t[2]/100,h=0;if(0===a)return[s=255*l,s,s];for(e=2*l-(i=l<.5?l*(1+a):l+a-l*a),r=[0,0,0];h<3;)(n=o+1/3*-(h-1))<0?n++:n>1&&n--,s=6*n<1?e+6*(i-e)*n:2*n<1?i:3*n<2?e+(i-e)*(2/3-n)*6:e,r[h++]=255*s;return r}};function zt(t,e,i){return Math.min(Math.max(t,e),i)}function Xt(t,e,i,n,r,s){const o=r-i,a=s-n;if(0!==o||0!==a){const l=((t-i)*o+(e-n)*a)/(o*o+a*a);l>1?(i=r,n=s):l>0&&(i+=o*l,n+=a*l)}return Bt(t,e,i,n)}function Bt(t,e,i,n){const r=i-t,s=n-e;return r*r+s*s}function qt(t){return t*Math.PI/180}function Yt(t,e){const i=t%e;return i*e<0?i+e:i}function Ht(t,e,i){return t+i*(e-t)}function Kt(t,e){const i=Math.pow(10,e);return Math.round(t*i)/i}function Zt(t,e){return Math.floor(Kt(t,e))}function Vt(t,e){return Math.ceil(Kt(t,e))}function Ut(t){return"string"==typeof t?t:se(t)}Lt.hsl=function(t){var e,i,n=t[0]/255,r=t[1]/255,s=t[2]/255,o=Math.min(n,r,s),a=Math.max(n,r,s),l=a-o;return a===o?e=0:n===a?e=(r-s)/l:r===a?e=2+(s-n)/l:s===a&&(e=4+(n-r)/l),(e=Math.min(60*e,360))<0&&(e+=360),i=(o+a)/2,[e,100*(a===o?0:i<=.5?l/(a+o):l/(2-a-o)),100*i]};const $t=1024,Jt={};let Qt=0;function te(t){if(4===t.length)return t;const e=t.slice();return e[3]=1,e}function ee(t){const e=Pt.lchuv(Lt.xyz(t));return e[3]=t[3],e}function ie(t){if(Jt.hasOwnProperty(t))return Jt[t];if(Qt>=$t){let t=0;for(const e in Jt)0==(3&t++)&&(delete Jt[e],--Qt)}const e=function(t){var e;Array.isArray(t)&&t.raw&&(t=String.raw(...arguments)),t instanceof Number&&(t=+t);var i=jt(t);if(!i.space)return[];const n="h"===i.space[0]?Wt.min:Lt.min,r="h"===i.space[0]?Wt.max:Lt.max;return(e=Array(3))[0]=Math.min(Math.max(i.values[0],n[0]),r[0]),e[1]=Math.min(Math.max(i.values[1],n[1]),r[1]),e[2]=Math.min(Math.max(i.values[2],n[2]),r[2]),"h"===i.space[0]&&(e=Wt.rgb(e)),e.push(Math.min(Math.max(i.alpha,0),1)),e}(t);if(4!==e.length)throw new Error('Failed to parse "'+t+'" as color');for(const i of e)if(isNaN(i))throw new Error('Failed to parse "'+t+'" as color');return re(e),Jt[t]=e,++Qt,e}function ne(t){return Array.isArray(t)?t:ie(t)}function re(t){return t[0]=zt(t[0]+.5|0,0,255),t[1]=zt(t[1]+.5|0,0,255),t[2]=zt(t[2]+.5|0,0,255),t[3]=zt(t[3],0,1),t}function se(t){let e=t[0];e!=(0|e)&&(e=e+.5|0);let i=t[1];i!=(0|i)&&(i=i+.5|0);let n=t[2];return n!=(0|n)&&(n=n+.5|0),"rgba("+e+","+i+","+n+","+(void 0===t[3]?1:Math.round(100*t[3])/100)+")"}function oe(t,e,i){return e+":"+t+":"+(i?Ut(i):"null")}const ae=new class{constructor(){this.cache_={},this.cacheSize_=0,this.maxCacheSize_=32}clear(){this.cache_={},this.cacheSize_=0}canExpireCache(){return this.cacheSize_>this.maxCacheSize_}expire(){if(this.canExpireCache()){let t=0;for(const e in this.cache_){const i=this.cache_[e];0!=(3&t++)||i.hasListener()||(delete this.cache_[e],--this.cacheSize_)}}}get(t,e,i){const n=oe(t,e,i);return n in this.cache_?this.cache_[n]:null}set(t,e,i,n){const r=oe(t,e,i);this.cache_[r]=n,++this.cacheSize_}setSize(t){this.maxCacheSize_=t,this.expire()}},le="opacity",he="visible",ce="extent",ue="zIndex",de="maxResolution",ge="minResolution",fe="maxZoom",pe="minZoom",me="source",_e=class extends A{constructor(t){super(),this.on,this.once,this.un,this.background_=t.background;const e=Object.assign({},t);"object"==typeof t.properties&&(delete e.properties,Object.assign(e,t.properties)),e[le]=void 0!==t.opacity?t.opacity:1,H("number"==typeof e[le],"Layer opacity must be a number"),e[he]=void 0===t.visible||t.visible,e[ue]=t.zIndex,e[de]=void 0!==t.maxResolution?t.maxResolution:1/0,e[ge]=void 0!==t.minResolution?t.minResolution:0,e[pe]=void 0!==t.minZoom?t.minZoom:-1/0,e[fe]=void 0!==t.maxZoom?t.maxZoom:1/0,this.className_=void 0!==e.className?e.className:"ol-layer",delete e.className,this.setProperties(e),this.state_=null}getBackground(){return this.background_}getClassName(){return this.className_}getLayerState(t){const e=this.state_||{layer:this,managed:void 0===t||t},i=this.getZIndex();return e.opacity=zt(Math.round(100*this.getOpacity())/100,0,1),e.visible=this.getVisible(),e.extent=this.getExtent(),e.zIndex=void 0!==i||e.managed?i:1/0,e.maxResolution=this.getMaxResolution(),e.minResolution=Math.max(this.getMinResolution(),0),e.minZoom=this.getMinZoom(),e.maxZoom=this.getMaxZoom(),this.state_=e,e}getLayersArray(t){return I()}getLayerStatesArray(t){return I()}getExtent(){return this.get(ce)}getMaxResolution(){return this.get(de)}getMinResolution(){return this.get(ge)}getMinZoom(){return this.get(pe)}getMaxZoom(){return this.get(fe)}getOpacity(){return this.get(le)}getSourceState(){return I()}getVisible(){return this.get(he)}getZIndex(){return this.get(ue)}setBackground(t){this.background_=t,this.changed()}setExtent(t){this.set(ce,t)}setMaxResolution(t){this.set(de,t)}setMinResolution(t){this.set(ge,t)}setMaxZoom(t){this.set(fe,t)}setMinZoom(t){this.set(pe,t)}setOpacity(t){H("number"==typeof t,"Layer opacity must be a number"),this.set(le,t)}setVisible(t){this.set(he,t)}setZIndex(t){this.set(ue,t)}disposeInternal(){this.state_&&(this.state_.layer=null,this.state_=null),super.disposeInternal()}},ye="prerender",ve="postrender",xe="precompose",we="rendercomplete",Ce={CENTER:"center",RESOLUTION:"resolution",ROTATION:"rotation"},Se=42,Ee=256,be={radians:6370997/(2*Math.PI),degrees:2*Math.PI*6370997/360,ft:.3048,m:1,"us-ft":1200/3937},Te=class{constructor(t){this.code_=t.code,this.units_=t.units,this.extent_=void 0!==t.extent?t.extent:null,this.worldExtent_=void 0!==t.worldExtent?t.worldExtent:null,this.axisOrientation_=void 0!==t.axisOrientation?t.axisOrientation:"enu",this.global_=void 0!==t.global&&t.global,this.canWrapX_=!(!this.global_||!this.extent_),this.getPointResolutionFunc_=t.getPointResolution,this.defaultTileGrid_=null,this.metersPerUnit_=t.metersPerUnit}canWrapX(){return this.canWrapX_}getCode(){return this.code_}getExtent(){return this.extent_}getUnits(){return this.units_}getMetersPerUnit(){return this.metersPerUnit_||be[this.units_]}getWorldExtent(){return this.worldExtent_}getAxisOrientation(){return this.axisOrientation_}isGlobal(){return this.global_}setGlobal(t){this.global_=t,this.canWrapX_=!(!t||!this.extent_)}getDefaultTileGrid(){return this.defaultTileGrid_}setDefaultTileGrid(t){this.defaultTileGrid_=t}setExtent(t){this.extent_=t,this.canWrapX_=!(!this.global_||!t)}setWorldExtent(t){this.worldExtent_=t}setGetPointResolution(t){this.getPointResolutionFunc_=t}getPointResolutionFunc(){return this.getPointResolutionFunc_}},Re=6378137,Ie=Math.PI*Re,Me=[-Ie,-Ie,Ie,Ie],ke=[-180,-85,180,85],Le=Re*Math.log(Math.tan(Math.PI/2));class Ae extends Te{constructor(t){super({code:t,units:"m",extent:Me,global:!0,worldExtent:ke,getPointResolution:function(t,e){return t/Math.cosh(e[1]/Re)}})}}const Pe=[new Ae("EPSG:3857"),new Ae("EPSG:102100"),new Ae("EPSG:102113"),new Ae("EPSG:900913"),new Ae("http://www.opengis.net/def/crs/EPSG/0/3857"),new Ae("http://www.opengis.net/gml/srs/epsg.xml#3857")];const Fe=[-180,-90,180,90],De=6378137*Math.PI/180;class Oe extends Te{constructor(t,e){super({code:t,units:"degrees",extent:Fe,axisOrientation:e,global:!0,metersPerUnit:De,worldExtent:Fe})}}const Ne=[new Oe("CRS:84"),new Oe("EPSG:4326","neu"),new Oe("urn:ogc:def:crs:OGC:1.3:CRS84"),new Oe("urn:ogc:def:crs:OGC:2:84"),new Oe("http://www.opengis.net/def/crs/OGC/1.3/CRS84"),new Oe("http://www.opengis.net/gml/srs/epsg.xml#4326","neu"),new Oe("http://www.opengis.net/def/crs/EPSG/0/4326","neu")];let je={},Ge={};function We(t,e,i){const n=t.getCode(),r=e.getCode();n in Ge||(Ge[n]={}),Ge[n][r]=i}function ze(t,e){let i=!0;for(let n=t.length-1;n>=0;--n)if(t[n]!=e[n]){i=!1;break}return i}function Xe(t,e){const i=Math.cos(e),n=Math.sin(e),r=t[0]*i-t[1]*n,s=t[1]*i+t[0]*n;return t[0]=r,t[1]=s,t}function Be(t,e){if(e.canWrapX()){const i=Rt(e.getExtent()),n=function(t,e,i){const n=e.getExtent();let r=0;return e.canWrapX()&&(t[0]<n[0]||t[0]>n[2])&&(i=i||Rt(n),r=Math.floor((t[0]-n[0])/i)),r}(t,e,i);n&&(t[0]-=n*i)}return t}const qe=6371008.8;function Ye(t,e,i){i=i||qe;const n=qt(t[1]),r=qt(e[1]),s=(r-n)/2,o=qt(e[0]-t[0])/2,a=Math.sin(s)*Math.sin(s)+Math.sin(o)*Math.sin(o)*Math.cos(n)*Math.cos(r);return 2*i*Math.atan2(Math.sqrt(a),Math.sqrt(1-a))}const He={info:1,warn:2,error:3,none:4};let Ke=He.info;function Ze(...t){Ke>He.warn||console.warn(...t)}let Ve=!0;function Ue(t,e){if(void 0!==e)for(let i=0,n=t.length;i<n;++i)e[i]=t[i];else e=t.slice();return e}function $e(t,e){if(void 0!==e&&t!==e){for(let i=0,n=t.length;i<n;++i)e[i]=t[i];t=e}return t}function Je(t){!function(t,e){je[t]=e}(t.getCode(),t),We(t,t,Ue)}function Qe(t){return"string"==typeof t?je[e=t]||je[e.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/,"EPSG:$3")]||null:t||null;var e}function ti(t,e,i,n){let r;const s=(t=Qe(t)).getPointResolutionFunc();if(s){if(r=s(e,i),n&&n!==t.getUnits()){const e=t.getMetersPerUnit();e&&(r=r*e/be[n])}}else{const s=t.getUnits();if("degrees"==s&&!n||"degrees"==n)r=e;else{const o=ri(t,Qe("EPSG:4326"));if(o===$e&&"degrees"!==s)r=e*t.getMetersPerUnit();else{let t=[i[0]-e/2,i[1],i[0]+e/2,i[1],i[0],i[1]-e/2,i[0],i[1]+e/2];t=o(t,t,2),r=(Ye(t.slice(0,2),t.slice(2,4))+Ye(t.slice(4,6),t.slice(6,8)))/2}const a=n?be[n]:t.getMetersPerUnit();void 0!==a&&(r/=a)}}return r}function ei(t){!function(t){t.forEach(Je)}(t),t.forEach((function(e){t.forEach((function(t){e!==t&&We(e,t,Ue)}))}))}function ii(t,e){return t?"string"==typeof t?Qe(t):t:Qe(e)}function ni(t,e){if(t===e)return!0;const i=t.getUnits()===e.getUnits();return(t.getCode()===e.getCode()||ri(t,e)===Ue)&&i}function ri(t,e){let i=function(t,e){let i;return t in Ge&&e in Ge[t]&&(i=Ge[t][e]),i}(t.getCode(),e.getCode());return i||(i=$e),i}function si(t,e){return ri(Qe(t),Qe(e))}function oi(t,e,i){return si(e,i)(t,void 0,t.length)}function ai(t,e,i,n){return function(t,e,i,n){if(Mt(t))return lt(i);let r=[];if(n>1){const e=t[2]-t[0],i=t[3]-t[1];for(let s=0;s<n;++s)r.push(t[0]+e*s/n,t[1],t[2],t[1]+i*s/n,t[2]-e*s/n,t[3],t[0],t[3]-i*s/n)}else r=[t[0],t[1],t[2],t[1],t[2],t[3],t[0],t[3]];e(r,r,2);const s=[],o=[];for(let t=0,e=r.length;t<e;t+=2)s.push(r[t]),o.push(r[t+1]);return function(t,e,i){return at(Math.min.apply(null,t),Math.min.apply(null,e),Math.max.apply(null,t),Math.max.apply(null,e),i)}(s,o,i)}(t,si(e,i),void 0,n)}let li=null;function hi(){return li}function ci(t,e){return li?oi(t,e,li):t}function ui(t,e){return li?oi(t,li,e):(Ve&&!ze(t,[0,0])&&t[0]>=-180&&t[0]<=180&&t[1]>=-90&&t[1]<=90&&(Ve=!1,Ze("Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.")),t)}function di(t,e){return li?ai(t,e,li):t}function gi(t,e){return li?ai(t,li,e):t}function fi(t,e){if(!li)return t;const i=Qe(e).getMetersPerUnit(),n=li.getMetersPerUnit();return i&&n?t*i/n:t}var pi,mi,_i;function yi(t,e,i){return function(n,r,s,o,a){if(!n)return;if(!r&&!e)return n;const l=e?0:s[0]*r,h=e?0:s[1]*r,c=a?a[0]:0,u=a?a[1]:0;let d=t[0]+l/2+c,g=t[2]-l/2+c,f=t[1]+h/2+u,p=t[3]-h/2+u;d>g&&(d=(g+d)/2,g=d),f>p&&(f=(p+f)/2,p=f);let m=zt(n[0],d,g),_=zt(n[1],f,p);if(o&&i&&r){const t=30*r;m+=-t*Math.log(1+Math.max(0,d-n[0])/t)+t*Math.log(1+Math.max(0,n[0]-g)/t),_+=-t*Math.log(1+Math.max(0,f-n[1])/t)+t*Math.log(1+Math.max(0,n[1]-p)/t)}return[m,_]}}function vi(t){return t}function xi(t,e,i,n){const r=Rt(e)/i[0],s=St(e)/i[1];return n?Math.min(t,Math.max(r,s)):Math.min(t,Math.min(r,s))}function wi(t,e,i){let n=Math.min(t,e);return n*=Math.log(1+50*Math.max(0,t/e-1))/50+1,i&&(n=Math.max(n,i),n/=Math.log(1+50*Math.max(0,i/t-1))/50+1),zt(n,i/2,2*e)}function Ci(t,e,i,n,r){return i=void 0===i||i,function(s,o,a,l){if(void 0!==s){const o=n?xi(t,n,a,r):t;return i&&l?wi(s,o,e):zt(s,e,o)}}}function Si(t){if(void 0!==t)return 0}function Ei(t){if(void 0!==t)return t}function bi(t){return Math.pow(t,3)}function Ti(t){return 1-bi(1-t)}function Ri(t){return 3*t*t-2*t*t*t}function Ii(t){return t}function Mi(t,e,i,n,r,s){s=s||[];let o=0;for(let a=e;a<i;a+=n){const e=t[a],i=t[a+1];s[o++]=r[0]*e+r[2]*i+r[4],s[o++]=r[1]*e+r[3]*i+r[5]}return s&&s.length!=o&&(s.length=o),s}function ki(t,e,i,n,r,s,o){o=o||[];const a=Math.cos(r),l=Math.sin(r),h=s[0],c=s[1];let u=0;for(let r=e;r<i;r+=n){const e=t[r]-h,i=t[r+1]-c;o[u++]=h+e*a-i*l,o[u++]=c+e*l+i*a;for(let e=r+2;e<r+n;++e)o[u++]=t[e]}return o&&o.length!=u&&(o.length=u),o}ei(Pe),ei(Ne),pi=Pe,mi=function(t,e,i){const n=t.length;i=i>1?i:2,void 0===e&&(e=i>2?t.slice():new Array(n));for(let r=0;r<n;r+=i){e[r]=Ie*t[r]/180;let i=Re*Math.log(Math.tan(Math.PI*(+t[r+1]+90)/360));i>Le?i=Le:i<-Le&&(i=-Le),e[r+1]=i}return e},_i=function(t,e,i){const n=t.length;i=i>1?i:2,void 0===e&&(e=i>2?t.slice():new Array(n));for(let r=0;r<n;r+=i)e[r]=180*t[r]/Ie,e[r+1]=360*Math.atan(Math.exp(t[r+1]/Re))/Math.PI-90;return e},Ne.forEach((function(t){pi.forEach((function(e){We(t,e,mi),We(e,t,_i)}))}));const Li=[1,0,0,1,0,0],Ai=class extends A{constructor(){super(),this.extent_=[1/0,1/0,-1/0,-1/0],this.extentRevision_=-1,this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=0,this.simplifyTransformedInternal=d(((t,e,i)=>{if(!i)return this.getSimplifiedGeometry(e);const n=this.clone();return n.applyTransform(i),n.getSimplifiedGeometry(e)}))}simplifyTransformed(t,e){return this.simplifyTransformedInternal(this.getRevision(),t,e)}clone(){return I()}closestPointXY(t,e,i,n){return I()}containsXY(t,e){const i=this.getClosestPoint([t,e]);return i[0]===t&&i[1]===e}getClosestPoint(t,e){return e=e||[NaN,NaN],this.closestPointXY(t[0],t[1],e,1/0),e}intersectsCoordinate(t){return this.containsXY(t[0],t[1])}computeExtent(t){return I()}getExtent(t){if(this.extentRevision_!=this.getRevision()){const t=this.computeExtent(this.extent_);(isNaN(t[0])||isNaN(t[1]))&&lt(t),this.extentRevision_=this.getRevision()}return function(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t}(this.extent_,t)}rotate(t,e){I()}scale(t,e,i){I()}simplify(t){return this.getSimplifiedGeometry(t*t)}getSimplifiedGeometry(t){return I()}getType(){return I()}applyTransform(t){I()}intersectsExtent(t){return I()}translate(t,e){I()}transform(t,e){const i=Qe(t),n="tile-pixels"==i.getUnits()?function(t,n,r){const s=i.getExtent(),o=i.getWorldExtent(),a=St(o)/St(s);return Z(Li,o[0],o[3],a,-a,0,0,0),Mi(t,0,t.length,r,Li,n),si(i,e)(t,n,r)}:si(i,e);return this.applyTransform(n),this}};function Pi(t){let e;return"XY"==t?e=2:"XYZ"==t||"XYM"==t?e=3:"XYZM"==t&&(e=4),e}const Fi=class extends Ai{constructor(){super(),this.layout="XY",this.stride=2,this.flatCoordinates}computeExtent(t){return ct(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)}getCoordinates(){return I()}getFirstCoordinate(){return this.flatCoordinates.slice(0,this.stride)}getFlatCoordinates(){return this.flatCoordinates}getLastCoordinate(){return this.flatCoordinates.slice(this.flatCoordinates.length-this.stride)}getLayout(){return this.layout}getSimplifiedGeometry(t){if(this.simplifiedGeometryRevision!==this.getRevision()&&(this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=this.getRevision()),t<0||0!==this.simplifiedGeometryMaxMinSquaredTolerance&&t<=this.simplifiedGeometryMaxMinSquaredTolerance)return this;const e=this.getSimplifiedGeometryInternal(t);return e.getFlatCoordinates().length<this.flatCoordinates.length?e:(this.simplifiedGeometryMaxMinSquaredTolerance=t,this)}getSimplifiedGeometryInternal(t){return this}getStride(){return this.stride}setFlatCoordinates(t,e){this.stride=Pi(t),this.layout=t,this.flatCoordinates=e}setCoordinates(t,e){I()}setLayout(t,e,i){let n;if(t)n=Pi(t);else{for(let t=0;t<i;++t){if(0===e.length)return this.layout="XY",void(this.stride=2);e=e[0]}n=e.length,t=function(t){let e;return 2==t?e="XY":3==t?e="XYZ":4==t&&(e="XYZM"),e}(n)}this.layout=t,this.stride=n}applyTransform(t){this.flatCoordinates&&(t(this.flatCoordinates,this.flatCoordinates,this.stride),this.changed())}rotate(t,e){const i=this.getFlatCoordinates();if(i){const n=this.getStride();ki(i,0,i.length,n,t,e,i),this.changed()}}scale(t,e,i){void 0===e&&(e=t),i||(i=vt(this.getExtent()));const n=this.getFlatCoordinates();if(n){const r=this.getStride();!function(t,e,i,n,r,s,o,a){a=a||[];const l=o[0],h=o[1];let c=0;for(let e=0;e<i;e+=n){const i=t[e]-l,o=t[e+1]-h;a[c++]=l+r*i,a[c++]=h+s*o;for(let i=e+2;i<e+n;++i)a[c++]=t[i]}a&&a.length!=c&&(a.length=c)}(n,0,n.length,r,t,e,i,n),this.changed()}}translate(t,e){const i=this.getFlatCoordinates();if(i){const n=this.getStride();!function(t,e,i,n,r,s,o){o=o||[];let a=0;for(let e=0;e<i;e+=n){o[a++]=t[e]+r,o[a++]=t[e+1]+s;for(let i=e+2;i<e+n;++i)o[a++]=t[i]}o&&o.length!=a&&(o.length=a)}(i,0,i.length,n,t,e,i),this.changed()}}};function Di(t,e,i,n,r,s,o){const a=t[e],l=t[e+1],h=t[i]-a,c=t[i+1]-l;let u;if(0===h&&0===c)u=e;else{const d=((r-a)*h+(s-l)*c)/(h*h+c*c);if(d>1)u=i;else{if(d>0){for(let r=0;r<n;++r)o[r]=Ht(t[e+r],t[i+r],d);return void(o.length=n)}u=e}}for(let e=0;e<n;++e)o[e]=t[u+e];o.length=n}function Oi(t,e,i,n,r){let s=t[e],o=t[e+1];for(e+=n;e<i;e+=n){const i=t[e],n=t[e+1],a=Bt(s,o,i,n);a>r&&(r=a),s=i,o=n}return r}function Ni(t,e,i,n,r,s,o,a,l,h,c){if(e==i)return h;let u,d;if(0===r){if(d=Bt(o,a,t[e],t[e+1]),d<h){for(u=0;u<n;++u)l[u]=t[e+u];return l.length=n,d}return h}c=c||[NaN,NaN];let g=e+n;for(;g<i;)if(Di(t,g-n,g,n,o,a,c),d=Bt(o,a,c[0],c[1]),d<h){for(h=d,u=0;u<n;++u)l[u]=c[u];l.length=n,g+=n}else g+=n*Math.max((Math.sqrt(d)-Math.sqrt(h))/r|0,1);if(s&&(Di(t,i-n,e,n,o,a,c),d=Bt(o,a,c[0],c[1]),d<h)){for(h=d,u=0;u<n;++u)l[u]=c[u];l.length=n}return h}function ji(t,e,i,n){for(let r=0,s=i.length;r<s;++r){const s=i[r];for(let i=0;i<n;++i)t[e++]=s[i]}return e}function Gi(t,e,i,n,r,s,o){const a=(i-e)/n;if(a<3){for(;e<i;e+=n)s[o++]=t[e],s[o++]=t[e+1];return o}const l=new Array(a);l[0]=1,l[a-1]=1;const h=[e,i-n];let c=0;for(;h.length>0;){const i=h.pop(),s=h.pop();let o=0;const a=t[s],u=t[s+1],d=t[i],g=t[i+1];for(let e=s+n;e<i;e+=n){const i=Xt(t[e],t[e+1],a,u,d,g);i>o&&(c=e,o=i)}o>r&&(l[(c-e)/n]=1,s+n<c&&h.push(s,c),c+n<i&&h.push(c,i))}for(let i=0;i<a;++i)l[i]&&(s[o++]=t[e+i*n],s[o++]=t[e+i*n+1]);return o}function Wi(t,e){return e*Math.round(t/e)}function zi(t,e,i,n,r,s,o){if(e==i)return o;let a,l,h=Wi(t[e],r),c=Wi(t[e+1],r);e+=n,s[o++]=h,s[o++]=c;do{if(a=Wi(t[e],r),l=Wi(t[e+1],r),(e+=n)==i)return s[o++]=a,s[o++]=l,o}while(a==h&&l==c);for(;e<i;){const i=Wi(t[e],r),u=Wi(t[e+1],r);if(e+=n,i==a&&u==l)continue;const d=a-h,g=l-c,f=i-h,p=u-c;d*p==g*f&&(d<0&&f<d||d==f||d>0&&f>d)&&(g<0&&p<g||g==p||g>0&&p>g)?(a=i,l=u):(s[o++]=a,s[o++]=l,h=a,c=l,a=i,l=u)}return s[o++]=a,s[o++]=l,o}function Xi(t,e,i,n,r,s,o,a){for(let l=0,h=i.length;l<h;++l){const h=i[l];o=zi(t,e,h,n,r,s,o),a.push(o),e=h}return o}function Bi(t,e,i,n,r){r=void 0!==r?r:[];let s=0;for(let o=e;o<i;o+=n)r[s++]=t.slice(o,o+n);return r.length=s,r}function qi(t,e,i,n,r){r=void 0!==r?r:[];let s=0;for(let o=0,a=i.length;o<a;++o){const a=i[o];r[s++]=Bi(t,e,a,n,r[s]),e=a}return r.length=s,r}function Yi(t,e,i,n,r){r=void 0!==r?r:[];let s=0;for(let o=0,a=i.length;o<a;++o){const a=i[o];r[s++]=1===a.length&&a[0]===e?[]:qi(t,e,a,n,r[s]),e=a[a.length-1]}return r.length=s,r}function Hi(t,e,i,n){let r=0,s=t[i-n],o=t[i-n+1];for(;e<i;e+=n){const i=t[e],n=t[e+1];r+=o*i-s*n,s=i,o=n}return r/2}class Ki extends Fi{constructor(t,e){super(),this.maxDelta_=-1,this.maxDeltaRevision_=-1,void 0===e||Array.isArray(t[0])?this.setCoordinates(t,e):this.setFlatCoordinates(e,t)}clone(){return new Ki(this.flatCoordinates.slice(),this.layout)}closestPointXY(t,e,i,n){return n<it(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(Oi(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),Ni(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!0,t,e,i,n))}getArea(){return Hi(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getCoordinates(){return Bi(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getSimplifiedGeometryInternal(t){const e=[];return e.length=Gi(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,e,0),new Ki(e,"XY")}getType(){return"LinearRing"}intersectsExtent(t){return!1}setCoordinates(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=ji(this.flatCoordinates,0,t,this.stride),this.changed()}}const Zi=Ki;class Vi extends Fi{constructor(t,e){super(),this.setCoordinates(t,e)}clone(){const t=new Vi(this.flatCoordinates.slice(),this.layout);return t.applyProperties(this),t}closestPointXY(t,e,i,n){const r=this.flatCoordinates,s=Bt(t,e,r[0],r[1]);if(s<n){const t=this.stride;for(let e=0;e<t;++e)i[e]=r[e];return i.length=t,s}return n}getCoordinates(){return this.flatCoordinates.slice()}computeExtent(t){return ht(this.flatCoordinates,t)}getType(){return"Point"}intersectsExtent(t){return st(t,this.flatCoordinates[0],this.flatCoordinates[1])}setCoordinates(t,e){this.setLayout(e,t,0),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=function(t,e,i,n){for(let n=0,r=i.length;n<r;++n)t[e++]=i[n];return e}(this.flatCoordinates,0,t,this.stride),this.changed()}}const Ui=Vi;function $i(t,e,i,n,r){return!pt(r,(function(r){return!Ji(t,e,i,n,r[0],r[1])}))}function Ji(t,e,i,n,r,s){let o=0,a=t[i-n],l=t[i-n+1];for(;e<i;e+=n){const i=t[e],n=t[e+1];l<=s?n>s&&(i-a)*(s-l)-(r-a)*(n-l)>0&&o++:n<=s&&(i-a)*(s-l)-(r-a)*(n-l)<0&&o--,a=i,l=n}return 0!==o}function Qi(t,e,i,n,r,s){if(0===i.length)return!1;if(!Ji(t,e,i[0],n,r,s))return!1;for(let e=1,o=i.length;e<o;++e)if(Ji(t,i[e-1],i[e],n,r,s))return!1;return!0}function tn(t,e,i,n,s,o,a){let l,h,c,u,d,g,f;const p=s[o+1],m=[];for(let r=0,s=i.length;r<s;++r){const s=i[r];for(u=t[s-n],g=t[s-n+1],l=e;l<s;l+=n)d=t[l],f=t[l+1],(p<=g&&f<=p||g<=p&&p<=f)&&(c=(p-g)/(f-g)*(d-u)+u,m.push(c)),u=d,g=f}let _=NaN,y=-1/0;for(m.sort(r),u=m[0],l=1,h=m.length;l<h;++l){d=m[l];const r=Math.abs(d-u);r>y&&(c=(u+d)/2,Qi(t,e,i,n,c,p)&&(_=c,y=r)),u=d}return isNaN(_)&&(_=s[o]),a?(a.push(_,p,y),a):[_,p,y]}function en(t,e,i,n,r){const s=gt([1/0,1/0,-1/0,-1/0],t,e,i,n);return!!It(r,s)&&(!!rt(r,s)||s[0]>=r[0]&&s[2]<=r[2]||s[1]>=r[1]&&s[3]<=r[3]||function(t,e,i,n,s){let o;for(e+=n;e<i;e+=n)if(a=t.slice(e-n,e),l=t.slice(e,e+n),o=function(t,e,i){let n=!1;const r=ot(t,e),s=ot(t,i);if(r===J.INTERSECTING||s===J.INTERSECTING)n=!0;else{const o=t[0],a=t[1],l=t[2],h=t[3],c=e[0],u=e[1],d=i[0],g=i[1],f=(g-u)/(d-c);let p,m;s&J.ABOVE&&!(r&J.ABOVE)&&(p=d-(g-h)/f,n=p>=o&&p<=l),n||!(s&J.RIGHT)||r&J.RIGHT||(m=g-(d-l)*f,n=m>=a&&m<=h),n||!(s&J.BELOW)||r&J.BELOW||(p=d-(g-a)/f,n=p>=o&&p<=l),n||!(s&J.LEFT)||r&J.LEFT||(m=g-(d-o)*f,n=m>=a&&m<=h)}return n}(r,a,l),o)return o;var a,l;return!1}(t,e,i,n))}function nn(t,e,i,n,r){return!!(en(t,e,i,n,r)||Ji(t,e,i,n,r[0],r[1])||Ji(t,e,i,n,r[0],r[3])||Ji(t,e,i,n,r[2],r[1])||Ji(t,e,i,n,r[2],r[3]))}function rn(t,e,i,n){for(;e<i-n;){for(let r=0;r<n;++r){const s=t[e+r];t[e+r]=t[i-n+r],t[i-n+r]=s}e+=n,i-=n}}function sn(t,e,i,n){let r=0,s=t[i-n],o=t[i-n+1];for(;e<i;e+=n){const i=t[e],n=t[e+1];r+=(i-s)*(n+o),s=i,o=n}return 0===r?void 0:r>0}function on(t,e,i,n,r){r=void 0!==r&&r;for(let s=0,o=i.length;s<o;++s){const o=i[s],a=sn(t,e,o,n);(0===s?r&&a||!r&&!a:r&&!a||!r&&a)&&rn(t,e,o,n),e=o}return e}class an extends Fi{constructor(t,e,i){super(),this.ends_=[],this.flatInteriorPointRevision_=-1,this.flatInteriorPoint_=null,this.maxDelta_=-1,this.maxDeltaRevision_=-1,this.orientedRevision_=-1,this.orientedFlatCoordinates_=null,void 0!==e&&i?(this.setFlatCoordinates(e,t),this.ends_=i):this.setCoordinates(t,e)}appendLinearRing(t){this.flatCoordinates?a(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()}clone(){const t=new an(this.flatCoordinates.slice(),this.layout,this.ends_.slice());return t.applyProperties(this),t}closestPointXY(t,e,i,n){return n<it(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(function(t,e,i,n,r){for(let s=0,o=i.length;s<o;++s){const o=i[s];r=Oi(t,e,o,n,r),e=o}return r}(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),function(t,e,i,n,r,s,o,a,l,h,c){c=c||[NaN,NaN];for(let u=0,d=i.length;u<d;++u){const d=i[u];h=Ni(t,e,d,n,r,s,o,a,l,h,c),e=d}return h}(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!0,t,e,i,n))}containsXY(t,e){return Qi(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,e)}getArea(){return function(t,e,i,n){let r=0;for(let s=0,o=i.length;s<o;++s){const o=i[s];r+=Hi(t,e,o,n),e=o}return r}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride)}getCoordinates(t){let e;return void 0!==t?(e=this.getOrientedFlatCoordinates().slice(),on(e,0,this.ends_,this.stride,t)):e=this.flatCoordinates,qi(e,0,this.ends_,this.stride)}getEnds(){return this.ends_}getFlatInteriorPoint(){if(this.flatInteriorPointRevision_!=this.getRevision()){const t=vt(this.getExtent());this.flatInteriorPoint_=tn(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,0),this.flatInteriorPointRevision_=this.getRevision()}return this.flatInteriorPoint_}getInteriorPoint(){return new Ui(this.getFlatInteriorPoint(),"XYM")}getLinearRingCount(){return this.ends_.length}getLinearRing(t){return t<0||this.ends_.length<=t?null:new Zi(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)}getLinearRings(){const t=this.layout,e=this.flatCoordinates,i=this.ends_,n=[];let r=0;for(let s=0,o=i.length;s<o;++s){const o=i[s],a=new Zi(e.slice(r,o),t);n.push(a),r=o}return n}getOrientedFlatCoordinates(){if(this.orientedRevision_!=this.getRevision()){const t=this.flatCoordinates;!function(t,e,i,n,r){r=void 0!==r&&r;for(let s=0,o=i.length;s<o;++s){const o=i[s],a=sn(t,e,o,n);if(0===s){if(r&&a||!r&&!a)return!1}else if(r&&!a||!r&&a)return!1;e=o}return!0}(t,0,this.ends_,this.stride)?(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=on(this.orientedFlatCoordinates_,0,this.ends_,this.stride)):this.orientedFlatCoordinates_=t,this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_}getSimplifiedGeometryInternal(t){const e=[],i=[];return e.length=Xi(this.flatCoordinates,0,this.ends_,this.stride,Math.sqrt(t),e,0,i),new an(e,"XY",i)}getType(){return"Polygon"}intersectsExtent(t){return function(t,e,i,n,r){if(!nn(t,e,i[0],n,r))return!1;if(1===i.length)return!0;for(let e=1,s=i.length;e<s;++e)if($i(t,i[e-1],i[e],n,r)&&!en(t,i[e-1],i[e],n,r))return!1;return!0}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t)}setCoordinates(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);const i=function(t,e,i,n,r){r=r||[];let s=0;for(let o=0,a=i.length;o<a;++o){const a=ji(t,e,i[o],n);r[s++]=a,e=a}return r.length=s,r}(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===i.length?0:i[i.length-1],this.changed()}}const ln=an;function hn(t){if(Mt(t))throw new Error("Cannot create polygon from empty extent");const e=t[0],i=t[1],n=t[2],r=t[3],s=[e,i,e,r,n,r,n,i,e,i];return new an(s,"XY",[s.length])}function cn(t,e){setTimeout((function(){t(e)}),0)}function un(t){return!(t.sourceCenter&&t.targetCenter&&!ze(t.sourceCenter,t.targetCenter))&&t.sourceResolution===t.targetResolution&&t.sourceRotation===t.targetRotation}function dn(t,e,i,n,r){const s=Math.cos(-r);let o=Math.sin(-r),a=t[0]*s-t[1]*o,l=t[1]*s+t[0]*o;return a+=(e[0]/2-i[0])*n,l+=(i[1]-e[1]/2)*n,o=-o,[a*s-l*o,l*s+a*o]}const gn=class extends A{constructor(t){super(),this.on,this.once,this.un,t=Object.assign({},t),this.hints_=[0,0],this.animations_=[],this.updateAnimationKey_,this.projection_=ii(t.projection,"EPSG:3857"),this.viewportSize_=[100,100],this.targetCenter_=null,this.targetResolution_,this.targetRotation_,this.nextCenter_=null,this.nextResolution_,this.nextRotation_,this.cancelAnchor_=void 0,t.projection&&function(t){Ve=!(void 0===t||t)}(),t.center&&(t.center=ui(t.center,this.projection_)),t.extent&&(t.extent=gi(t.extent,this.projection_)),this.applyOptions_(t)}applyOptions_(t){const e=Object.assign({},t);for(const t in Ce)delete e[t];this.setProperties(e,!0);const i=function(t){let e,i,n;let r=void 0!==t.minZoom?t.minZoom:0,o=void 0!==t.maxZoom?t.maxZoom:28;const a=void 0!==t.zoomFactor?t.zoomFactor:2,l=void 0!==t.multiWorld&&t.multiWorld,h=void 0===t.smoothResolutionConstraint||t.smoothResolutionConstraint,c=void 0!==t.showFullExtent&&t.showFullExtent,u=ii(t.projection,"EPSG:3857"),d=u.getExtent();let g=t.constrainOnlyCenter,f=t.extent;if(l||f||!u.isGlobal()||(g=!1,f=d),void 0!==t.resolutions){const a=t.resolutions;i=a[r],n=void 0!==a[o]?a[o]:a[a.length-1],e=t.constrainResolution?function(t,e,i,n){return e=void 0===e||e,function(r,o,a,l){if(void 0!==r){const h=t[0],c=t[t.length-1],u=i?xi(h,i,a,n):h;if(l)return e?wi(r,u,c):zt(r,c,u);const d=Math.min(u,r),g=Math.floor(s(t,d,o));return t[g]>u&&g<t.length-1?t[g+1]:t[g]}}}(a,h,!g&&f,c):Ci(i,n,h,!g&&f,c)}else{const s=(d?Math.max(Rt(d),St(d)):360*be.degrees/u.getMetersPerUnit())/Ee/Math.pow(2,0),l=s/Math.pow(2,28);i=t.maxResolution,void 0!==i?r=0:i=s/Math.pow(a,r),n=t.minResolution,void 0===n&&(n=void 0!==t.maxZoom?void 0!==t.maxResolution?i/Math.pow(a,o):s/Math.pow(a,o):l),o=r+Math.floor(Math.log(i/n)/Math.log(a)),n=i/Math.pow(a,o-r),e=t.constrainResolution?function(t,e,i,n,r,s){return n=void 0===n||n,i=void 0!==i?i:0,function(o,a,l,h){if(void 0!==o){const c=r?xi(e,r,l,s):e;if(h)return n?wi(o,c,i):zt(o,i,c);const u=1e-9,d=Math.ceil(Math.log(e/c)/Math.log(t)-u),g=-a*(.5-u)+.5,f=Math.min(c,o),p=Math.floor(Math.log(e/f)/Math.log(t)+g),m=Math.max(d,p);return zt(e/Math.pow(t,m),i,c)}}}(a,i,n,h,!g&&f,c):Ci(i,n,h,!g&&f,c)}return{constraint:e,maxResolution:i,minResolution:n,minZoom:r,zoomFactor:a}}(t);this.maxResolution_=i.maxResolution,this.minResolution_=i.minResolution,this.zoomFactor_=i.zoomFactor,this.resolutions_=t.resolutions,this.padding_=t.padding,this.minZoom_=i.minZoom;const n=function(t){if(void 0!==t.extent){const e=void 0===t.smoothExtentConstraint||t.smoothExtentConstraint;return yi(t.extent,t.constrainOnlyCenter,e)}const e=ii(t.projection,"EPSG:3857");if(!0!==t.multiWorld&&e.isGlobal()){const t=e.getExtent().slice();return t[0]=-1/0,t[2]=1/0,yi(t,!1,!1)}return vi}(t),r=i.constraint,o=function(t){if(void 0===t.enableRotation||t.enableRotation){const e=t.constrainRotation;return void 0===e||!0===e?function(t){const e=qt(5);return function(t,i){return i||void 0===t?t:Math.abs(t)<=e?0:t}}():!1===e?Ei:"number"==typeof e?function(t){const e=2*Math.PI/t;return function(t,i){return i?t:void 0!==t?t=Math.floor(t/e+.5)*e:void 0}}(e):Ei}return Si}(t);this.constraints_={center:n,resolution:r,rotation:o},this.setRotation(void 0!==t.rotation?t.rotation:0),this.setCenterInternal(void 0!==t.center?t.center:null),void 0!==t.resolution?this.setResolution(t.resolution):void 0!==t.zoom&&this.setZoom(t.zoom)}get padding(){return this.padding_}set padding(t){let e=this.padding_;this.padding_=t;const i=this.getCenterInternal();if(i){const n=t||[0,0,0,0];e=e||[0,0,0,0];const r=this.getResolution(),s=r/2*(n[3]-e[3]+e[1]-n[1]),o=r/2*(n[0]-e[0]+e[2]-n[2]);this.setCenterInternal([i[0]+s,i[1]-o])}}getUpdatedOptions_(t){const e=this.getProperties();return void 0!==e.resolution?e.resolution=this.getResolution():e.zoom=this.getZoom(),e.center=this.getCenterInternal(),e.rotation=this.getRotation(),Object.assign({},e,t)}animate(t){this.isDef()&&!this.getAnimating()&&this.resolveConstraints(0);const e=new Array(arguments.length);for(let t=0;t<e.length;++t){let i=arguments[t];i.center&&(i=Object.assign({},i),i.center=ui(i.center,this.getProjection())),i.anchor&&(i=Object.assign({},i),i.anchor=ui(i.anchor,this.getProjection())),e[t]=i}this.animateInternal.apply(this,e)}animateInternal(t){let e,i=arguments.length;i>1&&"function"==typeof arguments[i-1]&&(e=arguments[i-1],--i);let n=0;for(;n<i&&!this.isDef();++n){const t=arguments[n];t.center&&this.setCenterInternal(t.center),void 0!==t.zoom?this.setZoom(t.zoom):t.resolution&&this.setResolution(t.resolution),void 0!==t.rotation&&this.setRotation(t.rotation)}if(n===i)return void(e&&cn(e,!0));let r=Date.now(),s=this.targetCenter_.slice(),o=this.targetResolution_,a=this.targetRotation_;const l=[];for(;n<i;++n){const t=arguments[n],i={start:r,complete:!1,anchor:t.anchor,duration:void 0!==t.duration?t.duration:1e3,easing:t.easing||Ri,callback:e};if(t.center&&(i.sourceCenter=s,i.targetCenter=t.center.slice(),s=i.targetCenter),void 0!==t.zoom?(i.sourceResolution=o,i.targetResolution=this.getResolutionForZoom(t.zoom),o=i.targetResolution):t.resolution&&(i.sourceResolution=o,i.targetResolution=t.resolution,o=i.targetResolution),void 0!==t.rotation){i.sourceRotation=a;const e=Yt(t.rotation-a+Math.PI,2*Math.PI)-Math.PI;i.targetRotation=a+e,a=i.targetRotation}un(i)?i.complete=!0:r+=i.duration,l.push(i)}this.animations_.push(l),this.setHint(0,1),this.updateAnimations_()}getAnimating(){return this.hints_[0]>0}getInteracting(){return this.hints_[1]>0}cancelAnimations(){let t;this.setHint(0,-this.hints_[0]);for(let e=0,i=this.animations_.length;e<i;++e){const i=this.animations_[e];if(i[0].callback&&cn(i[0].callback,!1),!t)for(let e=0,n=i.length;e<n;++e){const n=i[e];if(!n.complete){t=n.anchor;break}}}this.animations_.length=0,this.cancelAnchor_=t,this.nextCenter_=null,this.nextResolution_=NaN,this.nextRotation_=NaN}updateAnimations_(){if(void 0!==this.updateAnimationKey_&&(cancelAnimationFrame(this.updateAnimationKey_),this.updateAnimationKey_=void 0),!this.getAnimating())return;const t=Date.now();let e=!1;for(let i=this.animations_.length-1;i>=0;--i){const n=this.animations_[i];let r=!0;for(let i=0,s=n.length;i<s;++i){const s=n[i];if(s.complete)continue;const o=t-s.start;let a=s.duration>0?o/s.duration:1;a>=1?(s.complete=!0,a=1):r=!1;const l=s.easing(a);if(s.sourceCenter){const t=s.sourceCenter[0],e=s.sourceCenter[1],i=s.targetCenter[0],n=s.targetCenter[1];this.nextCenter_=s.targetCenter;const r=t+l*(i-t),o=e+l*(n-e);this.targetCenter_=[r,o]}if(s.sourceResolution&&s.targetResolution){const t=1===l?s.targetResolution:s.sourceResolution+l*(s.targetResolution-s.sourceResolution);if(s.anchor){const e=this.getViewportSize_(this.getRotation()),i=this.constraints_.resolution(t,0,e,!0);this.targetCenter_=this.calculateCenterZoom(i,s.anchor)}this.nextResolution_=s.targetResolution,this.targetResolution_=t,this.applyTargetState_(!0)}if(void 0!==s.sourceRotation&&void 0!==s.targetRotation){const t=1===l?Yt(s.targetRotation+Math.PI,2*Math.PI)-Math.PI:s.sourceRotation+l*(s.targetRotation-s.sourceRotation);if(s.anchor){const e=this.constraints_.rotation(t,!0);this.targetCenter_=this.calculateCenterRotate(e,s.anchor)}this.nextRotation_=s.targetRotation,this.targetRotation_=t}if(this.applyTargetState_(!0),e=!0,!s.complete)break}if(r){this.animations_[i]=null,this.setHint(0,-1),this.nextCenter_=null,this.nextResolution_=NaN,this.nextRotation_=NaN;const t=n[0].callback;t&&cn(t,!0)}}this.animations_=this.animations_.filter(Boolean),e&&void 0===this.updateAnimationKey_&&(this.updateAnimationKey_=requestAnimationFrame(this.updateAnimations_.bind(this)))}calculateCenterRotate(t,e){let i;const n=this.getCenterInternal();var r,s;return void 0!==n&&(i=[n[0]-e[0],n[1]-e[1]],Xe(i,t-this.getRotation()),s=e,(r=i)[0]+=+s[0],r[1]+=+s[1]),i}calculateCenterZoom(t,e){let i;const n=this.getCenterInternal(),r=this.getResolution();return void 0!==n&&void 0!==r&&(i=[e[0]-t*(e[0]-n[0])/r,e[1]-t*(e[1]-n[1])/r]),i}getViewportSize_(t){const e=this.viewportSize_;if(t){const i=e[0],n=e[1];return[Math.abs(i*Math.cos(t))+Math.abs(n*Math.sin(t)),Math.abs(i*Math.sin(t))+Math.abs(n*Math.cos(t))]}return e}setViewportSize(t){this.viewportSize_=Array.isArray(t)?t.slice():[100,100],this.getAnimating()||this.resolveConstraints(0)}getCenter(){const t=this.getCenterInternal();return t?ci(t,this.getProjection()):t}getCenterInternal(){return this.get(Ce.CENTER)}getConstraints(){return this.constraints_}getConstrainResolution(){return this.get("constrainResolution")}getHints(t){return void 0!==t?(t[0]=this.hints_[0],t[1]=this.hints_[1],t):this.hints_.slice()}calculateExtent(t){return di(this.calculateExtentInternal(t),this.getProjection())}calculateExtentInternal(t){t=t||this.getViewportSizeMinusPadding_();const e=this.getCenterInternal();H(e,"The view center is not defined");const i=this.getResolution();H(void 0!==i,"The view resolution is not defined");const n=this.getRotation();return H(void 0!==n,"The view rotation is not defined"),wt(e,i,n,t)}getMaxResolution(){return this.maxResolution_}getMinResolution(){return this.minResolution_}getMaxZoom(){return this.getZoomForResolution(this.minResolution_)}setMaxZoom(t){this.applyOptions_(this.getUpdatedOptions_({maxZoom:t}))}getMinZoom(){return this.getZoomForResolution(this.maxResolution_)}setMinZoom(t){this.applyOptions_(this.getUpdatedOptions_({minZoom:t}))}setConstrainResolution(t){this.applyOptions_(this.getUpdatedOptions_({constrainResolution:t}))}getProjection(){return this.projection_}getResolution(){return this.get(Ce.RESOLUTION)}getResolutions(){return this.resolutions_}getResolutionForExtent(t,e){return this.getResolutionForExtentInternal(gi(t,this.getProjection()),e)}getResolutionForExtentInternal(t,e){e=e||this.getViewportSizeMinusPadding_();const i=Rt(t)/e[0],n=St(t)/e[1];return Math.max(i,n)}getResolutionForValueFunction(t){t=t||2;const e=this.getConstrainedResolution(this.maxResolution_),i=this.minResolution_,n=Math.log(e/i)/Math.log(t);return function(i){return e/Math.pow(t,i*n)}}getRotation(){return this.get(Ce.ROTATION)}getValueForResolutionFunction(t){const e=Math.log(t||2),i=this.getConstrainedResolution(this.maxResolution_),n=this.minResolution_,r=Math.log(i/n)/e;return function(t){return Math.log(i/t)/e/r}}getViewportSizeMinusPadding_(t){let e=this.getViewportSize_(t);const i=this.padding_;return i&&(e=[e[0]-i[1]-i[3],e[1]-i[0]-i[2]]),e}getState(){const t=this.getProjection(),e=this.getResolution(),i=this.getRotation();let n=this.getCenterInternal();const r=this.padding_;if(r){const t=this.getViewportSizeMinusPadding_();n=dn(n,this.getViewportSize_(),[t[0]/2+r[3],t[1]/2+r[0]],e,i)}return{center:n.slice(0),projection:void 0!==t?t:null,resolution:e,nextCenter:this.nextCenter_,nextResolution:this.nextResolution_,nextRotation:this.nextRotation_,rotation:i,zoom:this.getZoom()}}getViewStateAndExtent(){return{viewState:this.getState(),extent:this.calculateExtent()}}getZoom(){let t;const e=this.getResolution();return void 0!==e&&(t=this.getZoomForResolution(e)),t}getZoomForResolution(t){let e,i,n=this.minZoom_||0;if(this.resolutions_){const r=s(this.resolutions_,t,1);n=r,e=this.resolutions_[r],i=r==this.resolutions_.length-1?2:e/this.resolutions_[r+1]}else e=this.maxResolution_,i=this.zoomFactor_;return n+Math.log(e/t)/Math.log(i)}getResolutionForZoom(t){if(this.resolutions_){if(this.resolutions_.length<=1)return 0;const e=zt(Math.floor(t),0,this.resolutions_.length-2),i=this.resolutions_[e]/this.resolutions_[e+1];return this.resolutions_[e]/Math.pow(i,zt(t-e,0,1))}return this.maxResolution_/Math.pow(this.zoomFactor_,t-this.minZoom_)}fit(t,e){let i;if(H(Array.isArray(t)||"function"==typeof t.getSimplifiedGeometry,"Invalid extent or geometry provided as `geometry`"),Array.isArray(t))H(!Mt(t),"Cannot fit empty extent provided as `geometry`"),i=hn(gi(t,this.getProjection()));else if("Circle"===t.getType()){const e=gi(t.getExtent(),this.getProjection());i=hn(e),i.rotate(this.getRotation(),vt(e))}else{const e=hi();i=e?t.clone().transform(e,this.getProjection()):t}this.fitInternal(i,e)}rotatedExtentForGeometry(t){const e=this.getRotation(),i=Math.cos(e),n=Math.sin(-e),r=t.getFlatCoordinates(),s=t.getStride();let o=1/0,a=1/0,l=-1/0,h=-1/0;for(let t=0,e=r.length;t<e;t+=s){const e=r[t]*i-r[t+1]*n,s=r[t]*n+r[t+1]*i;o=Math.min(o,e),a=Math.min(a,s),l=Math.max(l,e),h=Math.max(h,s)}return[o,a,l,h]}fitInternal(t,e){let i=(e=e||{}).size;i||(i=this.getViewportSizeMinusPadding_());const n=void 0!==e.padding?e.padding:[0,0,0,0],r=void 0!==e.nearest&&e.nearest;let s;s=void 0!==e.minResolution?e.minResolution:void 0!==e.maxZoom?this.getResolutionForZoom(e.maxZoom):0;const o=this.rotatedExtentForGeometry(t);let a=this.getResolutionForExtentInternal(o,[i[0]-n[1]-n[3],i[1]-n[0]-n[2]]);a=isNaN(a)?s:Math.max(a,s),a=this.getConstrainedResolution(a,r?0:1);const l=this.getRotation(),h=Math.sin(l),c=Math.cos(l),d=vt(o);d[0]+=(n[1]-n[3])/2*a,d[1]+=(n[0]-n[2])/2*a;const g=d[0]*c-d[1]*h,f=d[1]*c+d[0]*h,p=this.getConstrainedCenter([g,f],a),m=e.callback?e.callback:u;void 0!==e.duration?this.animateInternal({resolution:a,center:p,duration:e.duration,easing:e.easing},m):(this.targetResolution_=a,this.targetCenter_=p,this.applyTargetState_(!1,!0),cn(m,!0))}centerOn(t,e,i){this.centerOnInternal(ui(t,this.getProjection()),e,i)}centerOnInternal(t,e,i){this.setCenterInternal(dn(t,e,i,this.getResolution(),this.getRotation()))}calculateCenterShift(t,e,i,n){let r;const s=this.padding_;if(s&&t){const o=this.getViewportSizeMinusPadding_(-i),a=dn(t,n,[o[0]/2+s[3],o[1]/2+s[0]],e,i);r=[t[0]-a[0],t[1]-a[1]]}return r}isDef(){return!!this.getCenterInternal()&&void 0!==this.getResolution()}adjustCenter(t){const e=ci(this.targetCenter_,this.getProjection());this.setCenter([e[0]+t[0],e[1]+t[1]])}adjustCenterInternal(t){const e=this.targetCenter_;this.setCenterInternal([e[0]+t[0],e[1]+t[1]])}adjustResolution(t,e){e=e&&ui(e,this.getProjection()),this.adjustResolutionInternal(t,e)}adjustResolutionInternal(t,e){const i=this.getAnimating()||this.getInteracting(),n=this.getViewportSize_(this.getRotation()),r=this.constraints_.resolution(this.targetResolution_*t,0,n,i);e&&(this.targetCenter_=this.calculateCenterZoom(r,e)),this.targetResolution_*=t,this.applyTargetState_()}adjustZoom(t,e){this.adjustResolution(Math.pow(this.zoomFactor_,-t),e)}adjustRotation(t,e){e&&(e=ui(e,this.getProjection())),this.adjustRotationInternal(t,e)}adjustRotationInternal(t,e){const i=this.getAnimating()||this.getInteracting(),n=this.constraints_.rotation(this.targetRotation_+t,i);e&&(this.targetCenter_=this.calculateCenterRotate(n,e)),this.targetRotation_+=t,this.applyTargetState_()}setCenter(t){this.setCenterInternal(t?ui(t,this.getProjection()):t)}setCenterInternal(t){this.targetCenter_=t,this.applyTargetState_()}setHint(t,e){return this.hints_[t]+=e,this.changed(),this.hints_[t]}setResolution(t){this.targetResolution_=t,this.applyTargetState_()}setRotation(t){this.targetRotation_=t,this.applyTargetState_()}setZoom(t){this.setResolution(this.getResolutionForZoom(t))}applyTargetState_(t,e){const i=this.getAnimating()||this.getInteracting()||e,n=this.constraints_.rotation(this.targetRotation_,i),r=this.getViewportSize_(n),s=this.constraints_.resolution(this.targetResolution_,0,r,i),o=this.constraints_.center(this.targetCenter_,s,r,i,this.calculateCenterShift(this.targetCenter_,s,n,r));this.get(Ce.ROTATION)!==n&&this.set(Ce.ROTATION,n),this.get(Ce.RESOLUTION)!==s&&(this.set(Ce.RESOLUTION,s),this.set("zoom",this.getZoom(),!0)),o&&this.get(Ce.CENTER)&&ze(this.get(Ce.CENTER),o)||this.set(Ce.CENTER,o),this.getAnimating()&&!t&&this.cancelAnimations(),this.cancelAnchor_=void 0}resolveConstraints(t,e,i){t=void 0!==t?t:200;const n=e||0,r=this.constraints_.rotation(this.targetRotation_),s=this.getViewportSize_(r),o=this.constraints_.resolution(this.targetResolution_,n,s),a=this.constraints_.center(this.targetCenter_,o,s,!1,this.calculateCenterShift(this.targetCenter_,o,r,s));if(0===t&&!this.cancelAnchor_)return this.targetResolution_=o,this.targetRotation_=r,this.targetCenter_=a,void this.applyTargetState_();i=i||(0===t?this.cancelAnchor_:void 0),this.cancelAnchor_=void 0,this.getResolution()===o&&this.getRotation()===r&&this.getCenterInternal()&&ze(this.getCenterInternal(),a)||(this.getAnimating()&&this.cancelAnimations(),this.animateInternal({rotation:r,center:a,resolution:o,duration:t,easing:Ti,anchor:i}))}beginInteraction(){this.resolveConstraints(0),this.setHint(1,1)}endInteraction(t,e,i){i=i&&ui(i,this.getProjection()),this.endInteractionInternal(t,e,i)}endInteractionInternal(t,e,i){this.getInteracting()&&(this.setHint(1,-1),this.resolveConstraints(t,e,i))}getConstrainedCenter(t,e){const i=this.getViewportSize_(this.getRotation());return this.constraints_.center(t,e||this.getResolution(),i)}getConstrainedZoom(t,e){const i=this.getResolutionForZoom(t);return this.getZoomForResolution(this.getConstrainedResolution(i,e))}getConstrainedResolution(t,e){e=e||0;const i=this.getViewportSize_(this.getRotation());return this.constraints_.resolution(t,e,i)}};function fn(t,e){if(!t.visible)return!1;const i=e.resolution;if(i<t.minResolution||i>=t.maxResolution)return!1;const n=e.zoom;return n>t.minZoom&&n<=t.maxZoom}const pn=class extends _e{constructor(t){const e=Object.assign({},t);delete e.source,super(e),this.on,this.once,this.un,this.mapPrecomposeKey_=null,this.mapRenderKey_=null,this.sourceChangeKey_=null,this.renderer_=null,this.sourceReady_=!1,this.rendered=!1,t.render&&(this.render=t.render),t.map&&this.setMap(t.map),this.addChangeListener(me,this.handleSourcePropertyChange_);const i=t.source?t.source:null;this.setSource(i)}getLayersArray(t){return(t=t||[]).push(this),t}getLayerStatesArray(t){return(t=t||[]).push(this.getLayerState()),t}getSource(){return this.get(me)||null}getRenderSource(){return this.getSource()}getSourceState(){const t=this.getSource();return t?t.getState():"undefined"}handleSourceChange_(){this.changed(),this.sourceReady_||"ready"!==this.getSource().getState()||(this.sourceReady_=!0,this.dispatchEvent("sourceready"))}handleSourcePropertyChange_(){this.sourceChangeKey_&&(b(this.sourceChangeKey_),this.sourceChangeKey_=null),this.sourceReady_=!1;const t=this.getSource();t&&(this.sourceChangeKey_=S(t,m,this.handleSourceChange_,this),"ready"===t.getState()&&(this.sourceReady_=!0,setTimeout((()=>{this.dispatchEvent("sourceready")}),0))),this.changed()}getFeatures(t){return this.renderer_?this.renderer_.getFeatures(t):Promise.resolve([])}getData(t){return this.renderer_&&this.rendered?this.renderer_.getData(t):null}isVisible(t){let e;const i=this.getMapInternal();let n;!t&&i&&(t=i.getView()),e=t instanceof gn?{viewState:t.getState(),extent:t.calculateExtent()}:t,!e.layerStatesArray&&i&&(e.layerStatesArray=i.getLayerGroup().getLayerStatesArray()),n=e.layerStatesArray?e.layerStatesArray.find((t=>t.layer===this)):this.getLayerState();const r=this.getExtent();return fn(n,e.viewState)&&(!r||It(r,e.extent))}getAttributions(t){if(!this.isVisible(t))return[];let e;const i=this.getSource();if(i&&(e=i.getAttributions()),!e)return[];let n=e(t instanceof gn?t.getViewStateAndExtent():t);return Array.isArray(n)||(n=[n]),n}render(t,e){const i=this.getRenderer();return i.prepareFrame(t)?(this.rendered=!0,i.renderFrame(t,e)):null}unrender(){this.rendered=!1}setMapInternal(t){t||this.unrender(),this.set("map",t)}getMapInternal(){return this.get("map")}setMap(t){this.mapPrecomposeKey_&&(b(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),t||this.changed(),this.mapRenderKey_&&(b(this.mapRenderKey_),this.mapRenderKey_=null),t&&(this.mapPrecomposeKey_=S(t,xe,(function(t){const e=t.frameState.layerStatesArray,i=this.getLayerState(!1);H(!e.some((function(t){return t.layer===i.layer})),"A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both."),e.push(i)}),this),this.mapRenderKey_=S(this,m,t.render,t),this.changed())}setSource(t){this.set(me,t)}getRenderer(){return this.renderer_||(this.renderer_=this.createRenderer()),this.renderer_}hasRenderer(){return!!this.renderer_}createRenderer(){return null}disposeInternal(){this.renderer_&&(this.renderer_.dispose(),delete this.renderer_),this.setSource(null),super.disposeInternal()}};function mn(t,e){ae.expire()}const _n=class extends n{constructor(t){super(),this.map_=t}dispatchRenderEvent(t,e){I()}calculateMatrices2D(t){const e=t.viewState,i=t.coordinateToPixelTransform,n=t.pixelToCoordinateTransform;Z(i,t.size[0]/2,t.size[1]/2,1/e.resolution,-1/e.resolution,-e.rotation,-e.center[0],-e.center[1]),V(n,i)}forEachFeatureAtCoordinate(t,e,i,n,r,s,o,a){let l;const h=e.viewState;function c(t,e,i,n){return r.call(s,e,t?i:null,n)}const u=h.projection,d=Be(t.slice(),u),g=[[0,0]];if(u.canWrapX()&&n){const t=Rt(u.getExtent());g.push([-t,0],[t,0])}const f=e.layerStatesArray,p=f.length,m=[],_=[];for(let n=0;n<g.length;n++)for(let r=p-1;r>=0;--r){const s=f[r],u=s.layer;if(u.hasRenderer()&&fn(s,h)&&o.call(a,u)){const r=u.getRenderer(),o=u.getSource();if(r&&o){const a=o.getWrapX()?d:t,h=c.bind(null,s.managed);_[0]=a[0]+g[n][0],_[1]=a[1]+g[n][1],l=r.forEachFeatureAtCoordinate(_,e,i,h,m)}if(l)return l}}if(0===m.length)return;const y=1/m.length;return m.forEach(((t,e)=>t.distanceSq+=e*y)),m.sort(((t,e)=>t.distanceSq-e.distanceSq)),m.some((t=>l=t.callback(t.feature,t.layer,t.geometry))),l}hasFeatureAtCoordinate(t,e,i,n,r,s){return void 0!==this.forEachFeatureAtCoordinate(t,e,i,n,h,this,r,s)}getMap(){return this.map_}renderFrame(t){I()}flushDeclutterItems(t){}scheduleExpireIconCache(t){ae.canExpireCache()&&t.postRenderFunctions.push(mn)}},yn=class extends t{constructor(t,e,i,n){super(t),this.inversePixelTransform=e,this.frameState=i,this.context=n}},vn="ol-hidden",xn="ol-unselectable",wn="ol-control",Cn="ol-collapsed",Sn=new RegExp(["^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)","(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?","(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))","(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))","?\\s*([-,\\\"\\'\\sa-z]+?)\\s*$"].join(""),"i"),En=["style","variant","weight","size","lineHeight","family"],bn=function(t){const e=t.match(Sn);if(!e)return null;const i={lineHeight:"normal",size:"1.2em",style:"normal",weight:"normal",variant:"normal"};for(let t=0,n=En.length;t<n;++t){const n=e[t+1];void 0!==n&&(i[En[t]]=n)}return i.families=i.family.split(/,\s?/),i};function Tn(t,e,i,n){let r;return r=i&&i.length?i.shift():B?new OffscreenCanvas(t||300,e||300):document.createElement("canvas"),t&&(r.width=t),e&&(r.height=e),r.getContext("2d",n)}function Rn(t){const e=t.canvas;e.width=1,e.height=1,t.clearRect(0,0,1,1)}function In(t,e){const i=e.parentNode;i&&i.replaceChild(t,e)}function Mn(t){return t&&t.parentNode?t.parentNode.removeChild(t):null}const kn="10px sans-serif",Ln="#000",An="round",Pn=[],Fn="round",Dn="#000",On="center",Nn="middle",jn=[0,0,0,0],Gn=new A;let Wn,zn=null;const Xn={},Bn=function(){const t="32px ",e=["monospace","serif"],i=e.length,n="wmytzilWMYTZIL@#/&?$%10ï";let r,s;function o(r,o,a){let l=!0;for(let h=0;h<i;++h){const i=e[h];if(s=Hn(r+" "+o+" "+t+i,n),a!=i){const e=Hn(r+" "+o+" "+t+a+","+i,n);l=l&&e!=s}}return!!l}function a(){let t=!0;const e=Gn.getKeys();for(let i=0,n=e.length;i<n;++i){const n=e[i];Gn.get(n)<100&&(o.apply(this,n.split("\n"))?(g(Xn),zn=null,Wn=void 0,Gn.set(n,100)):(Gn.set(n,Gn.get(n)+1,!0),t=!1))}t&&(clearInterval(r),r=void 0)}return function(t){const e=bn(t);if(!e)return;const i=e.families;for(let t=0,n=i.length;t<n;++t){const n=i[t],s=e.style+"\n"+e.weight+"\n"+n;void 0===Gn.get(s)&&(Gn.set(s,100,!0),o(e.style,e.weight,n)||(Gn.set(s,0,!0),void 0===r&&(r=setInterval(a,32))))}}}(),qn=function(){let t;return function(e){let i=Xn[e];if(null==i){if(B){const t=bn(e),n=Yn(e,"Å½g");i=(isNaN(Number(t.lineHeight))?1.2:Number(t.lineHeight))*(n.actualBoundingBoxAscent+n.actualBoundingBoxDescent)}else t||(t=document.createElement("div"),t.innerHTML="M",t.style.minHeight="0",t.style.maxHeight="none",t.style.height="auto",t.style.padding="0",t.style.border="none",t.style.position="absolute",t.style.display="block",t.style.left="-99999px"),t.style.font=e,document.body.appendChild(t),i=t.offsetHeight,document.body.removeChild(t);Xn[e]=i}return i}}();function Yn(t,e){return zn||(zn=Tn(1,1)),t!=Wn&&(zn.font=t,Wn=zn.font),zn.measureText(e)}function Hn(t,e){return Yn(t,e).width}function Kn(t,e,i){if(e in i)return i[e];const n=e.split("\n").reduce(((e,i)=>Math.max(e,Hn(t,i))),0);return i[e]=n,n}const Zn=class extends _n{constructor(t){super(t),this.fontChangeListenerKey_=S(Gn,e,t.redrawText.bind(t)),this.element_=document.createElement("div");const i=this.element_.style;i.position="absolute",i.width="100%",i.height="100%",i.zIndex="0",this.element_.className=xn+" ol-layers";const n=t.getViewport();n.insertBefore(this.element_,n.firstChild||null),this.children_=[],this.renderedVisible_=!0,this.declutterLayers_=[]}dispatchRenderEvent(t,e){const i=this.getMap();if(i.hasListener(t)){const n=new yn(t,void 0,e);i.dispatchEvent(n)}}disposeInternal(){b(this.fontChangeListenerKey_),this.element_.parentNode.removeChild(this.element_),super.disposeInternal()}renderFrame(t){if(!t)return void(this.renderedVisible_&&(this.element_.style.display="none",this.renderedVisible_=!1));this.calculateMatrices2D(t),this.dispatchRenderEvent(xe,t);const e=t.layerStatesArray.sort((function(t,e){return t.zIndex-e.zIndex})),i=t.viewState;this.children_.length=0;const n=this.declutterLayers_;n.length=0;let r=null;for(let s=0,o=e.length;s<o;++s){const o=e[s];t.layerIndex=s;const a=o.layer,l=a.getSourceState();if(!fn(o,i)||"ready"!=l&&"undefined"!=l){a.unrender();continue}const h=a.render(t,r);h&&(h!==r&&(this.children_.push(h),r=h),"getDeclutter"in a&&n.push(a))}this.flushDeclutterItems(t),function(t,e){const i=t.childNodes;for(let n=0;;++n){const r=i[n],s=e[n];if(!r&&!s)break;r!==s&&(r?s?t.insertBefore(s,r):(t.removeChild(r),--n):t.appendChild(s))}}(this.element_,this.children_),this.dispatchRenderEvent("postcompose",t),this.renderedVisible_||(this.element_.style.display="",this.renderedVisible_=!0),this.scheduleExpireIconCache(t)}flushDeclutterItems(t){const e=this.declutterLayers_;for(let i=e.length-1;i>=0;--i)e[i].renderDeclutter(t);e.length=0}};class Vn extends t{constructor(t,e){super(t),this.layer=e}}const Un="layers";class $n extends _e{constructor(t){t=t||{};const e=Object.assign({},t);delete e.layers;let i=t.layers;super(e),this.on,this.once,this.un,this.layersListenerKeys_=[],this.listenerKeys_={},this.addChangeListener(Un,this.handleLayersChanged_),i?Array.isArray(i)?i=new N(i.slice(),{unique:!0}):H("function"==typeof i.getArray,"Expected `layers` to be an array or a `Collection`"):i=new N(void 0,{unique:!0}),this.setLayers(i)}handleLayerChange_(){this.changed()}handleLayersChanged_(){this.layersListenerKeys_.forEach(b),this.layersListenerKeys_.length=0;const t=this.getLayers();this.layersListenerKeys_.push(S(t,P,this.handleLayersAdd_,this),S(t,F,this.handleLayersRemove_,this));for(const t in this.listenerKeys_)this.listenerKeys_[t].forEach(b);g(this.listenerKeys_);const e=t.getArray();for(let t=0,i=e.length;t<i;t++){const i=e[t];this.registerLayerListeners_(i),this.dispatchEvent(new Vn("addlayer",i))}this.changed()}registerLayerListeners_(t){const i=[S(t,e,this.handleLayerChange_,this),S(t,m,this.handleLayerChange_,this)];t instanceof $n&&i.push(S(t,"addlayer",this.handleLayerGroupAdd_,this),S(t,"removelayer",this.handleLayerGroupRemove_,this)),this.listenerKeys_[k(t)]=i}handleLayerGroupAdd_(t){this.dispatchEvent(new Vn("addlayer",t.layer))}handleLayerGroupRemove_(t){this.dispatchEvent(new Vn("removelayer",t.layer))}handleLayersAdd_(t){const e=t.element;this.registerLayerListeners_(e),this.dispatchEvent(new Vn("addlayer",e)),this.changed()}handleLayersRemove_(t){const e=t.element,i=k(e);this.listenerKeys_[i].forEach(b),delete this.listenerKeys_[i],this.dispatchEvent(new Vn("removelayer",e)),this.changed()}getLayers(){return this.get(Un)}setLayers(t){const e=this.getLayers();if(e){const t=e.getArray();for(let e=0,i=t.length;e<i;++e)this.dispatchEvent(new Vn("removelayer",t[e]))}this.set(Un,t)}getLayersArray(t){return t=void 0!==t?t:[],this.getLayers().forEach((function(e){e.getLayersArray(t)})),t}getLayerStatesArray(t){const e=void 0!==t?t:[],i=e.length;this.getLayers().forEach((function(t){t.getLayerStatesArray(e)}));const n=this.getLayerState();let r=n.zIndex;t||void 0!==n.zIndex||(r=0);for(let t=i,s=e.length;t<s;t++){const i=e[t];i.opacity*=n.opacity,i.visible=i.visible&&n.visible,i.maxResolution=Math.min(i.maxResolution,n.maxResolution),i.minResolution=Math.max(i.minResolution,n.minResolution),i.minZoom=Math.max(i.minZoom,n.minZoom),i.maxZoom=Math.min(i.maxZoom,n.maxZoom),void 0!==n.extent&&(void 0!==i.extent?i.extent=Et(i.extent,n.extent):i.extent=n.extent),void 0===i.zIndex&&(i.zIndex=r)}return e}getSourceState(){return"ready"}}const Jn=$n,Qn=class extends t{constructor(t,e,i){super(t),this.map=e,this.frameState=void 0!==i?i:null}},tr=class extends Qn{constructor(t,e,i,n,r,s){super(t,e,r),this.originalEvent=i,this.pixel_=null,this.coordinate_=null,this.dragging=void 0!==n&&n,this.activePointers=s}get pixel(){return this.pixel_||(this.pixel_=this.map.getEventPixel(this.originalEvent)),this.pixel_}set pixel(t){this.pixel_=t}get coordinate(){return this.coordinate_||(this.coordinate_=this.map.getCoordinateFromPixel(this.pixel)),this.coordinate_}set coordinate(t){this.coordinate_=t}preventDefault(){super.preventDefault(),"preventDefault"in this.originalEvent&&this.originalEvent.preventDefault()}stopPropagation(){super.stopPropagation(),"stopPropagation"in this.originalEvent&&this.originalEvent.stopPropagation()}},er={SINGLECLICK:"singleclick",CLICK:y,DBLCLICK:"dblclick",POINTERDRAG:"pointerdrag",POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"},ir="pointerdown",nr=class extends p{constructor(t,e){super(t),this.map_=t,this.clickTimeoutId_,this.emulateClicks_=!1,this.dragging_=!1,this.dragListenerKeys_=[],this.moveTolerance_=void 0===e?1:e,this.down_=null;const i=this.map_.getViewport();this.activePointers_=[],this.trackedTouches_={},this.element_=i,this.pointerdownListenerKey_=S(i,ir,this.handlePointerDown_,this),this.originalPointerMoveEvent_,this.relayedListenerKey_=S(i,"pointermove",this.relayMoveEvent_,this),this.boundHandleTouchMove_=this.handleTouchMove_.bind(this),this.element_.addEventListener(w,this.boundHandleTouchMove_,!!Y&&{passive:!1})}emulateClick_(t){let e=new tr(er.CLICK,this.map_,t);this.dispatchEvent(e),void 0!==this.clickTimeoutId_?(clearTimeout(this.clickTimeoutId_),this.clickTimeoutId_=void 0,e=new tr(er.DBLCLICK,this.map_,t),this.dispatchEvent(e)):this.clickTimeoutId_=setTimeout((()=>{this.clickTimeoutId_=void 0;const e=new tr(er.SINGLECLICK,this.map_,t);this.dispatchEvent(e)}),250)}updateActivePointers_(t){const e=t,i=e.pointerId;if(e.type==er.POINTERUP||e.type==er.POINTERCANCEL){delete this.trackedTouches_[i];for(const t in this.trackedTouches_)if(this.trackedTouches_[t].target!==e.target){delete this.trackedTouches_[t];break}}else e.type!=er.POINTERDOWN&&e.type!=er.POINTERMOVE||(this.trackedTouches_[i]=e);this.activePointers_=Object.values(this.trackedTouches_)}handlePointerUp_(t){this.updateActivePointers_(t);const e=new tr(er.POINTERUP,this.map_,t,void 0,void 0,this.activePointers_);this.dispatchEvent(e),this.emulateClicks_&&!e.defaultPrevented&&!this.dragging_&&this.isMouseActionButton_(t)&&this.emulateClick_(this.down_),0===this.activePointers_.length&&(this.dragListenerKeys_.forEach(b),this.dragListenerKeys_.length=0,this.dragging_=!1,this.down_=null)}isMouseActionButton_(t){return 0===t.button}handlePointerDown_(t){this.emulateClicks_=0===this.activePointers_.length,this.updateActivePointers_(t);const e=new tr(er.POINTERDOWN,this.map_,t,void 0,void 0,this.activePointers_);if(this.dispatchEvent(e),this.down_=new PointerEvent(t.type,t),Object.defineProperty(this.down_,"target",{writable:!1,value:t.target}),0===this.dragListenerKeys_.length){const t=this.map_.getOwnerDocument();this.dragListenerKeys_.push(S(t,er.POINTERMOVE,this.handlePointerMove_,this),S(t,er.POINTERUP,this.handlePointerUp_,this),S(this.element_,er.POINTERCANCEL,this.handlePointerUp_,this)),this.element_.getRootNode&&this.element_.getRootNode()!==t&&this.dragListenerKeys_.push(S(this.element_.getRootNode(),er.POINTERUP,this.handlePointerUp_,this))}}handlePointerMove_(t){if(this.isMoving_(t)){this.updateActivePointers_(t),this.dragging_=!0;const e=new tr(er.POINTERDRAG,this.map_,t,this.dragging_,void 0,this.activePointers_);this.dispatchEvent(e)}}relayMoveEvent_(t){this.originalPointerMoveEvent_=t;const e=!(!this.down_||!this.isMoving_(t));this.dispatchEvent(new tr(er.POINTERMOVE,this.map_,t,e))}handleTouchMove_(t){const e=this.originalPointerMoveEvent_;e&&!e.defaultPrevented||"boolean"==typeof t.cancelable&&!0!==t.cancelable||t.preventDefault()}isMoving_(t){return this.dragging_||Math.abs(t.clientX-this.down_.clientX)>this.moveTolerance_||Math.abs(t.clientY-this.down_.clientY)>this.moveTolerance_}disposeInternal(){this.relayedListenerKey_&&(b(this.relayedListenerKey_),this.relayedListenerKey_=null),this.element_.removeEventListener(w,this.boundHandleTouchMove_),this.pointerdownListenerKey_&&(b(this.pointerdownListenerKey_),this.pointerdownListenerKey_=null),this.dragListenerKeys_.forEach(b),this.dragListenerKeys_.length=0,this.element_=null,super.disposeInternal()}},rr="postrender",sr="loadstart",or="loadend",ar="layergroup",lr="size",hr="target",cr="view",ur=1/0,dr=class{constructor(t,e){this.priorityFunction_=t,this.keyFunction_=e,this.elements_=[],this.priorities_=[],this.queuedElements_={}}clear(){this.elements_.length=0,this.priorities_.length=0,g(this.queuedElements_)}dequeue(){const t=this.elements_,e=this.priorities_,i=t[0];1==t.length?(t.length=0,e.length=0):(t[0]=t.pop(),e[0]=e.pop(),this.siftUp_(0));const n=this.keyFunction_(i);return delete this.queuedElements_[n],i}enqueue(t){H(!(this.keyFunction_(t)in this.queuedElements_),"Tried to enqueue an `element` that was already added to the queue");const e=this.priorityFunction_(t);return e!=ur&&(this.elements_.push(t),this.priorities_.push(e),this.queuedElements_[this.keyFunction_(t)]=!0,this.siftDown_(0,this.elements_.length-1),!0)}getCount(){return this.elements_.length}getLeftChildIndex_(t){return 2*t+1}getRightChildIndex_(t){return 2*t+2}getParentIndex_(t){return t-1>>1}heapify_(){let t;for(t=(this.elements_.length>>1)-1;t>=0;t--)this.siftUp_(t)}isEmpty(){return 0===this.elements_.length}isKeyQueued(t){return t in this.queuedElements_}isQueued(t){return this.isKeyQueued(this.keyFunction_(t))}siftUp_(t){const e=this.elements_,i=this.priorities_,n=e.length,r=e[t],s=i[t],o=t;for(;t<n>>1;){const r=this.getLeftChildIndex_(t),s=this.getRightChildIndex_(t),o=s<n&&i[s]<i[r]?s:r;e[t]=e[o],i[t]=i[o],t=o}e[t]=r,i[t]=s,this.siftDown_(o,t)}siftDown_(t,e){const i=this.elements_,n=this.priorities_,r=i[e],s=n[e];for(;e>t;){const t=this.getParentIndex_(e);if(!(n[t]>s))break;i[e]=i[t],n[e]=n[t],e=t}i[e]=r,n[e]=s}reprioritize(){const t=this.priorityFunction_,e=this.elements_,i=this.priorities_;let n=0;const r=e.length;let s,o,a;for(o=0;o<r;++o)s=e[o],a=t(s),a==ur?delete this.queuedElements_[this.keyFunction_(s)]:(i[n]=a,e[n++]=s);e.length=n,i.length=n,this.heapify_()}},gr=class extends dr{constructor(t,e){super((function(e){return t.apply(null,e)}),(function(t){return t[0].getKey()})),this.boundHandleTileChange_=this.handleTileChange.bind(this),this.tileChangeCallback_=e,this.tilesLoading_=0,this.tilesLoadingKeys_={}}enqueue(t){const e=super.enqueue(t);return e&&t[0].addEventListener(m,this.boundHandleTileChange_),e}getTilesLoading(){return this.tilesLoading_}handleTileChange(t){const e=t.target,i=e.getState();if(2===i||3===i||4===i){3!==i&&e.removeEventListener(m,this.boundHandleTileChange_);const t=e.getKey();t in this.tilesLoadingKeys_&&(delete this.tilesLoadingKeys_[t],--this.tilesLoading_),this.tileChangeCallback_()}}loadMoreTiles(t,e){let i,n,r,s=0;for(;this.tilesLoading_<t&&s<e&&this.getCount()>0;)n=this.dequeue()[0],r=n.getKey(),i=n.getState(),0!==i||r in this.tilesLoadingKeys_||(this.tilesLoadingKeys_[r]=!0,++this.tilesLoading_,++s,n.load())}},fr=class extends A{constructor(t){super();const e=t.element;!e||t.target||e.style.pointerEvents||(e.style.pointerEvents="auto"),this.element=e||null,this.target_=null,this.map_=null,this.listenerKeys=[],t.render&&(this.render=t.render),t.target&&this.setTarget(t.target)}disposeInternal(){Mn(this.element),super.disposeInternal()}getMap(){return this.map_}setMap(t){this.map_&&Mn(this.element);for(let t=0,e=this.listenerKeys.length;t<e;++t)b(this.listenerKeys[t]);this.listenerKeys.length=0,this.map_=t,t&&((this.target_?this.target_:t.getOverlayContainerStopEvent()).appendChild(this.element),this.render!==u&&this.listenerKeys.push(S(t,rr,this.render,this)),t.render())}render(t){}setTarget(t){this.target_="string"==typeof t?document.getElementById(t):t}},pr=class extends fr{constructor(t){t=t||{},super({element:document.createElement("div"),render:t.render,target:t.target}),this.ulElement_=document.createElement("ul"),this.collapsed_=void 0===t.collapsed||t.collapsed,this.userCollapsed_=this.collapsed_,this.overrideCollapsible_=void 0!==t.collapsible,this.collapsible_=void 0===t.collapsible||t.collapsible,this.collapsible_||(this.collapsed_=!1);const e=void 0!==t.className?t.className:"ol-attribution",i=void 0!==t.tipLabel?t.tipLabel:"Attributions",n=void 0!==t.expandClassName?t.expandClassName:e+"-expand",r=void 0!==t.collapseLabel?t.collapseLabel:"âº",s=void 0!==t.collapseClassName?t.collapseClassName:e+"-collapse";"string"==typeof r?(this.collapseLabel_=document.createElement("span"),this.collapseLabel_.textContent=r,this.collapseLabel_.className=s):this.collapseLabel_=r;const o=void 0!==t.label?t.label:"i";"string"==typeof o?(this.label_=document.createElement("span"),this.label_.textContent=o,this.label_.className=n):this.label_=o;const a=this.collapsible_&&!this.collapsed_?this.collapseLabel_:this.label_;this.toggleButton_=document.createElement("button"),this.toggleButton_.setAttribute("type","button"),this.toggleButton_.setAttribute("aria-expanded",String(!this.collapsed_)),this.toggleButton_.title=i,this.toggleButton_.appendChild(a),this.toggleButton_.addEventListener(y,this.handleClick_.bind(this),!1);const l=e+" "+xn+" "+wn+(this.collapsed_&&this.collapsible_?" "+Cn:"")+(this.collapsible_?"":" ol-uncollapsible"),h=this.element;h.className=l,h.appendChild(this.toggleButton_),h.appendChild(this.ulElement_),this.renderedAttributions_=[],this.renderedVisible_=!0}collectSourceAttributions_(t){const e=Array.from(new Set(this.getMap().getAllLayers().flatMap((e=>e.getAttributions(t))))),i=!this.getMap().getAllLayers().some((t=>t.getSource()&&!1===t.getSource().getAttributionsCollapsible()));return this.overrideCollapsible_||this.setCollapsible(i),e}updateElement_(t){if(!t)return void(this.renderedVisible_&&(this.element.style.display="none",this.renderedVisible_=!1));const e=this.collectSourceAttributions_(t),i=e.length>0;if(this.renderedVisible_!=i&&(this.element.style.display=i?"":"none",this.renderedVisible_=i),!l(e,this.renderedAttributions_)){!function(t){for(;t.lastChild;)t.removeChild(t.lastChild)}(this.ulElement_);for(let t=0,i=e.length;t<i;++t){const i=document.createElement("li");i.innerHTML=e[t],this.ulElement_.appendChild(i)}this.renderedAttributions_=e}}handleClick_(t){t.preventDefault(),this.handleToggle_(),this.userCollapsed_=this.collapsed_}handleToggle_(){this.element.classList.toggle(Cn),this.collapsed_?In(this.collapseLabel_,this.label_):In(this.label_,this.collapseLabel_),this.collapsed_=!this.collapsed_,this.toggleButton_.setAttribute("aria-expanded",String(!this.collapsed_))}getCollapsible(){return this.collapsible_}setCollapsible(t){this.collapsible_!==t&&(this.collapsible_=t,this.element.classList.toggle("ol-uncollapsible"),this.userCollapsed_&&this.handleToggle_())}setCollapsed(t){this.userCollapsed_=t,this.collapsible_&&this.collapsed_!==t&&this.handleToggle_()}getCollapsed(){return this.collapsed_}render(t){this.updateElement_(t.frameState)}},mr=class extends fr{constructor(t){t=t||{},super({element:document.createElement("div"),render:t.render,target:t.target});const e=void 0!==t.className?t.className:"ol-rotate",i=void 0!==t.label?t.label:"â§",n=void 0!==t.compassClassName?t.compassClassName:"ol-compass";this.label_=null,"string"==typeof i?(this.label_=document.createElement("span"),this.label_.className=n,this.label_.textContent=i):(this.label_=i,this.label_.classList.add(n));const r=t.tipLabel?t.tipLabel:"Reset rotation",s=document.createElement("button");s.className=e+"-reset",s.setAttribute("type","button"),s.title=r,s.appendChild(this.label_),s.addEventListener(y,this.handleClick_.bind(this),!1);const o=e+" "+xn+" "+wn,a=this.element;a.className=o,a.appendChild(s),this.callResetNorth_=t.resetNorth?t.resetNorth:void 0,this.duration_=void 0!==t.duration?t.duration:250,this.autoHide_=void 0===t.autoHide||t.autoHide,this.rotation_=void 0,this.autoHide_&&this.element.classList.add(vn)}handleClick_(t){t.preventDefault(),void 0!==this.callResetNorth_?this.callResetNorth_():this.resetNorth_()}resetNorth_(){const t=this.getMap().getView();if(!t)return;const e=t.getRotation();void 0!==e&&(this.duration_>0&&e%(2*Math.PI)!=0?t.animate({rotation:0,duration:this.duration_,easing:Ti}):t.setRotation(0))}render(t){const e=t.frameState;if(!e)return;const i=e.viewState.rotation;if(i!=this.rotation_){const t="rotate("+i+"rad)";if(this.autoHide_){const t=this.element.classList.contains(vn);t||0!==i?t&&0!==i&&this.element.classList.remove(vn):this.element.classList.add(vn)}this.label_.style.transform=t}this.rotation_=i}},_r=class extends fr{constructor(t){t=t||{},super({element:document.createElement("div"),target:t.target});const e=void 0!==t.className?t.className:"ol-zoom",i=void 0!==t.delta?t.delta:1,n=void 0!==t.zoomInClassName?t.zoomInClassName:e+"-in",r=void 0!==t.zoomOutClassName?t.zoomOutClassName:e+"-out",s=void 0!==t.zoomInLabel?t.zoomInLabel:"+",o=void 0!==t.zoomOutLabel?t.zoomOutLabel:"â",a=void 0!==t.zoomInTipLabel?t.zoomInTipLabel:"Zoom in",l=void 0!==t.zoomOutTipLabel?t.zoomOutTipLabel:"Zoom out",h=document.createElement("button");h.className=n,h.setAttribute("type","button"),h.title=a,h.appendChild("string"==typeof s?document.createTextNode(s):s),h.addEventListener(y,this.handleClick_.bind(this,i),!1);const c=document.createElement("button");c.className=r,c.setAttribute("type","button"),c.title=l,c.appendChild("string"==typeof o?document.createTextNode(o):o),c.addEventListener(y,this.handleClick_.bind(this,-i),!1);const u=e+" "+xn+" "+wn,d=this.element;d.className=u,d.appendChild(h),d.appendChild(c),this.duration_=void 0!==t.duration?t.duration:250}handleClick_(t,e){e.preventDefault(),this.zoomByDelta_(t)}zoomByDelta_(t){const e=this.getMap().getView();if(!e)return;const i=e.getZoom();if(void 0!==i){const n=e.getConstrainedZoom(i+t);this.duration_>0?(e.getAnimating()&&e.cancelAnimations(),e.animate({zoom:n,duration:this.duration_,easing:Ti})):e.setZoom(n)}}},yr="active";function vr(t,e,i,n){const r=t.getZoom();if(void 0===r)return;const s=t.getConstrainedZoom(r+e),o=t.getResolutionForZoom(s);t.getAnimating()&&t.cancelAnimations(),t.animate({resolution:o,anchor:i,duration:void 0!==n?n:250,easing:Ti})}const xr=class extends A{constructor(t){super(),this.on,this.once,this.un,t&&t.handleEvent&&(this.handleEvent=t.handleEvent),this.map_=null,this.setActive(!0)}getActive(){return this.get(yr)}getMap(){return this.map_}handleEvent(t){return!0}setActive(t){this.set(yr,t)}setMap(t){this.map_=t}},wr=class extends xr{constructor(t){super(),t=t||{},this.delta_=t.delta?t.delta:1,this.duration_=void 0!==t.duration?t.duration:250}handleEvent(t){let e=!1;if(t.type==er.DBLCLICK){const i=t.originalEvent,n=t.map,r=t.coordinate,s=i.shiftKey?-this.delta_:this.delta_;vr(n.getView(),s,r,this.duration_),i.preventDefault(),e=!0}return!e}};function Cr(t){const e=t.length;let i=0,n=0;for(let r=0;r<e;r++)i+=t[r].clientX,n+=t[r].clientY;return{clientX:i/e,clientY:n/e}}const Sr=class extends xr{constructor(t){super(t=t||{}),t.handleDownEvent&&(this.handleDownEvent=t.handleDownEvent),t.handleDragEvent&&(this.handleDragEvent=t.handleDragEvent),t.handleMoveEvent&&(this.handleMoveEvent=t.handleMoveEvent),t.handleUpEvent&&(this.handleUpEvent=t.handleUpEvent),t.stopDown&&(this.stopDown=t.stopDown),this.handlingDownUpSequence=!1,this.targetPointers=[]}getPointerCount(){return this.targetPointers.length}handleDownEvent(t){return!1}handleDragEvent(t){}handleEvent(t){if(!t.originalEvent)return!0;let e=!1;if(this.updateTrackedPointers_(t),this.handlingDownUpSequence){if(t.type==er.POINTERDRAG)this.handleDragEvent(t),t.originalEvent.preventDefault();else if(t.type==er.POINTERUP){const e=this.handleUpEvent(t);this.handlingDownUpSequence=e&&this.targetPointers.length>0}}else if(t.type==er.POINTERDOWN){const i=this.handleDownEvent(t);this.handlingDownUpSequence=i,e=this.stopDown(i)}else t.type==er.POINTERMOVE&&this.handleMoveEvent(t);return!e}handleMoveEvent(t){}handleUpEvent(t){return!1}stopDown(t){return t}updateTrackedPointers_(t){t.activePointers&&(this.targetPointers=t.activePointers)}};function Er(t){const e=arguments;return function(t){let i=!0;for(let n=0,r=e.length;n<r&&(i=i&&e[n](t),i);++n);return i}}const br=function(t){const e=t.originalEvent;return e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},Tr=function(t){return!t.map.getTargetElement().hasAttribute("tabindex")||function(t){const e=t.map.getTargetElement(),i=t.map.getOwnerDocument().activeElement;return e.contains(i)}(t)},Rr=h,Ir=function(t){const e=t.originalEvent;return 0==e.button&&!(W&&z&&e.ctrlKey)},Mr=function(t){const e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&!e.shiftKey},kr=function(t){const e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},Lr=function(t){const e=t.originalEvent,i=e.target.tagName;return"INPUT"!==i&&"SELECT"!==i&&"TEXTAREA"!==i&&!e.target.isContentEditable},Ar=function(t){const e=t.originalEvent;return H(void 0!==e,"mapBrowserEvent must originate from a pointer event"),"mouse"==e.pointerType},Pr=function(t){const e=t.originalEvent;return H(void 0!==e,"mapBrowserEvent must originate from a pointer event"),e.isPrimary&&0===e.button},Fr=class extends Sr{constructor(t){super({stopDown:c}),t=t||{},this.kinetic_=t.kinetic,this.lastCentroid=null,this.lastPointersCount_,this.panning_=!1;const e=t.condition?t.condition:Er(Mr,Pr);this.condition_=t.onFocusOnly?Er(Tr,e):e,this.noKinetic_=!1}handleDragEvent(t){const e=t.map;this.panning_||(this.panning_=!0,e.getView().beginInteraction());const i=this.targetPointers,n=e.getEventPixel(Cr(i));if(i.length==this.lastPointersCount_){if(this.kinetic_&&this.kinetic_.update(n[0],n[1]),this.lastCentroid){const e=[this.lastCentroid[0]-n[0],n[1]-this.lastCentroid[1]],i=t.map.getView();r=e,s=i.getResolution(),r[0]*=s,r[1]*=s,Xe(e,i.getRotation()),i.adjustCenterInternal(e)}}else this.kinetic_&&this.kinetic_.begin();var r,s;this.lastCentroid=n,this.lastPointersCount_=i.length,t.originalEvent.preventDefault()}handleUpEvent(t){const e=t.map,i=e.getView();if(0===this.targetPointers.length){if(!this.noKinetic_&&this.kinetic_&&this.kinetic_.end()){const t=this.kinetic_.getDistance(),n=this.kinetic_.getAngle(),r=i.getCenterInternal(),s=e.getPixelFromCoordinateInternal(r),o=e.getCoordinateFromPixelInternal([s[0]-t*Math.cos(n),s[1]-t*Math.sin(n)]);i.animateInternal({center:i.getConstrainedCenter(o),duration:500,easing:Ti})}return this.panning_&&(this.panning_=!1,i.endInteraction()),!1}return this.kinetic_&&this.kinetic_.begin(),this.lastCentroid=null,!0}handleDownEvent(t){if(this.targetPointers.length>0&&this.condition_(t)){const e=t.map.getView();return this.lastCentroid=null,e.getAnimating()&&e.cancelAnimations(),this.kinetic_&&this.kinetic_.begin(),this.noKinetic_=this.targetPointers.length>1,!0}return!1}},Dr=class extends Sr{constructor(t){t=t||{},super({stopDown:c}),this.condition_=t.condition?t.condition:br,this.lastAngle_=void 0,this.duration_=void 0!==t.duration?t.duration:250}handleDragEvent(t){if(!Ar(t))return;const e=t.map,i=e.getView();if(i.getConstraints().rotation===Si)return;const n=e.getSize(),r=t.pixel,s=Math.atan2(n[1]/2-r[1],r[0]-n[0]/2);if(void 0!==this.lastAngle_){const t=s-this.lastAngle_;i.adjustRotationInternal(-t)}this.lastAngle_=s}handleUpEvent(t){return!Ar(t)||(t.map.getView().endInteraction(this.duration_),!1)}handleDownEvent(t){return!!Ar(t)&&(!(!Ir(t)||!this.condition_(t))&&(t.map.getView().beginInteraction(),this.lastAngle_=void 0,!0))}},Or=class extends n{constructor(t){super(),this.geometry_=null,this.element_=document.createElement("div"),this.element_.style.position="absolute",this.element_.style.pointerEvents="auto",this.element_.className="ol-box "+t,this.map_=null,this.startPixel_=null,this.endPixel_=null}disposeInternal(){this.setMap(null)}render_(){const t=this.startPixel_,e=this.endPixel_,i="px",n=this.element_.style;n.left=Math.min(t[0],e[0])+i,n.top=Math.min(t[1],e[1])+i,n.width=Math.abs(e[0]-t[0])+i,n.height=Math.abs(e[1]-t[1])+i}setMap(t){if(this.map_){this.map_.getOverlayContainer().removeChild(this.element_);const t=this.element_.style;t.left="inherit",t.top="inherit",t.width="inherit",t.height="inherit"}this.map_=t,this.map_&&this.map_.getOverlayContainer().appendChild(this.element_)}setPixels(t,e){this.startPixel_=t,this.endPixel_=e,this.createOrUpdateGeometry(),this.render_()}createOrUpdateGeometry(){const t=this.startPixel_,e=this.endPixel_,i=[t,[t[0],e[1]],e,[e[0],t[1]]].map(this.map_.getCoordinateFromPixelInternal,this.map_);i[4]=i[0].slice(),this.geometry_?this.geometry_.setCoordinates([i]):this.geometry_=new ln([i])}getGeometry(){return this.geometry_}};class Nr extends t{constructor(t,e,i){super(t),this.coordinate=e,this.mapBrowserEvent=i}}const jr=class extends Sr{constructor(t){super(),this.on,this.once,this.un,t=t||{},this.box_=new Or(t.className||"ol-dragbox"),this.minArea_=void 0!==t.minArea?t.minArea:64,t.onBoxEnd&&(this.onBoxEnd=t.onBoxEnd),this.startPixel_=null,this.condition_=t.condition?t.condition:Ir,this.boxEndCondition_=t.boxEndCondition?t.boxEndCondition:this.defaultBoxEndCondition}defaultBoxEndCondition(t,e,i){const n=i[0]-e[0],r=i[1]-e[1];return n*n+r*r>=this.minArea_}getGeometry(){return this.box_.getGeometry()}handleDragEvent(t){this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new Nr("boxdrag",t.coordinate,t))}handleUpEvent(t){this.box_.setMap(null);const e=this.boxEndCondition_(t,this.startPixel_,t.pixel);return e&&this.onBoxEnd(t),this.dispatchEvent(new Nr(e?"boxend":"boxcancel",t.coordinate,t)),!1}handleDownEvent(t){return!!this.condition_(t)&&(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new Nr("boxstart",t.coordinate,t)),!0)}onBoxEnd(t){}},Gr=class extends jr{constructor(t){super({condition:(t=t||{}).condition?t.condition:kr,className:t.className||"ol-dragzoom",minArea:t.minArea}),this.duration_=void 0!==t.duration?t.duration:200,this.out_=void 0!==t.out&&t.out}onBoxEnd(t){const e=this.getMap().getView();let i=this.getGeometry();if(this.out_){const t=e.rotatedExtentForGeometry(i),n=e.getResolutionForExtentInternal(t),r=e.getResolution()/n;i=i.clone(),i.scale(r*r)}e.fitInternal(i,{duration:this.duration_,easing:Ti})}},Wr="ArrowLeft",zr="ArrowRight",Xr="ArrowDown",Br=class extends xr{constructor(t){super(),t=t||{},this.defaultCondition_=function(t){return Mr(t)&&Lr(t)},this.condition_=void 0!==t.condition?t.condition:this.defaultCondition_,this.duration_=void 0!==t.duration?t.duration:100,this.pixelDelta_=void 0!==t.pixelDelta?t.pixelDelta:128}handleEvent(t){let e=!1;if(t.type==v){const i=t.originalEvent,n=i.key;if(this.condition_(t)&&(n==Xr||n==Wr||n==zr||"ArrowUp"==n)){const r=t.map.getView(),s=r.getResolution()*this.pixelDelta_;let o=0,a=0;n==Xr?a=-s:n==Wr?o=-s:n==zr?o=s:a=s;const l=[o,a];Xe(l,r.getRotation()),function(t,e,i){const n=t.getCenterInternal();if(n){const r=[n[0]+e[0],n[1]+e[1]];t.animateInternal({duration:void 0!==i?i:250,easing:Ii,center:t.getConstrainedCenter(r)})}}(r,l,this.duration_),i.preventDefault(),e=!0}}return!e}},qr=class extends xr{constructor(t){super(),t=t||{},this.condition_=t.condition?t.condition:function(t){return!function(t){const e=t.originalEvent;return z?e.metaKey:e.ctrlKey}(t)&&Lr(t)},this.delta_=t.delta?t.delta:1,this.duration_=void 0!==t.duration?t.duration:100}handleEvent(t){let e=!1;if(t.type==v||t.type==x){const i=t.originalEvent,n=i.key;if(this.condition_(t)&&("+"===n||"-"===n)){const r=t.map,s="+"===n?this.delta_:-this.delta_;vr(r.getView(),s,void 0,this.duration_),i.preventDefault(),e=!0}}return!e}},Yr=class{constructor(t,e,i){this.decay_=t,this.minVelocity_=e,this.delay_=i,this.points_=[],this.angle_=0,this.initialVelocity_=0}begin(){this.points_.length=0,this.angle_=0,this.initialVelocity_=0}update(t,e){this.points_.push(t,e,Date.now())}end(){if(this.points_.length<6)return!1;const t=Date.now()-this.delay_,e=this.points_.length-3;if(this.points_[e+2]<t)return!1;let i=e-3;for(;i>0&&this.points_[i+2]>t;)i-=3;const n=this.points_[e+2]-this.points_[i+2];if(n<1e3/60)return!1;const r=this.points_[e]-this.points_[i],s=this.points_[e+1]-this.points_[i+1];return this.angle_=Math.atan2(s,r),this.initialVelocity_=Math.sqrt(r*r+s*s)/n,this.initialVelocity_>this.minVelocity_}getDistance(){return(this.minVelocity_-this.initialVelocity_)/this.decay_}getAngle(){return this.angle_}},Hr=class extends xr{constructor(t){super(t=t||{}),this.totalDelta_=0,this.lastDelta_=0,this.maxDelta_=void 0!==t.maxDelta?t.maxDelta:1,this.duration_=void 0!==t.duration?t.duration:250,this.timeout_=void 0!==t.timeout?t.timeout:80,this.useAnchor_=void 0===t.useAnchor||t.useAnchor,this.constrainResolution_=void 0!==t.constrainResolution&&t.constrainResolution;const e=t.condition?t.condition:Rr;this.condition_=t.onFocusOnly?Er(Tr,e):e,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_,this.mode_=void 0,this.trackpadEventGap_=400,this.trackpadTimeoutId_,this.deltaPerZoom_=300}endInteraction_(){this.trackpadTimeoutId_=void 0;const t=this.getMap();t&&t.getView().endInteraction(void 0,this.lastDelta_?this.lastDelta_>0?1:-1:0,this.lastAnchor_)}handleEvent(t){if(!this.condition_(t))return!0;if(t.type!==C)return!0;const e=t.map,i=t.originalEvent;let n;if(i.preventDefault(),this.useAnchor_&&(this.lastAnchor_=t.coordinate),t.type==C&&(n=i.deltaY,G&&i.deltaMode===WheelEvent.DOM_DELTA_PIXEL&&(n/=X),i.deltaMode===WheelEvent.DOM_DELTA_LINE&&(n*=40)),0===n)return!1;this.lastDelta_=n;const r=Date.now();void 0===this.startTime_&&(this.startTime_=r),(!this.mode_||r-this.startTime_>this.trackpadEventGap_)&&(this.mode_=Math.abs(n)<4?"trackpad":"wheel");const s=e.getView();if("trackpad"===this.mode_&&!s.getConstrainResolution()&&!this.constrainResolution_)return this.trackpadTimeoutId_?clearTimeout(this.trackpadTimeoutId_):(s.getAnimating()&&s.cancelAnimations(),s.beginInteraction()),this.trackpadTimeoutId_=setTimeout(this.endInteraction_.bind(this),this.timeout_),s.adjustZoom(-n/this.deltaPerZoom_,this.lastAnchor_),this.startTime_=r,!1;this.totalDelta_+=n;const o=Math.max(this.timeout_-(r-this.startTime_),0);return clearTimeout(this.timeoutId_),this.timeoutId_=setTimeout(this.handleWheelZoom_.bind(this,e),o),!1}handleWheelZoom_(t){const e=t.getView();e.getAnimating()&&e.cancelAnimations();let i=-zt(this.totalDelta_,-this.maxDelta_*this.deltaPerZoom_,this.maxDelta_*this.deltaPerZoom_)/this.deltaPerZoom_;(e.getConstrainResolution()||this.constrainResolution_)&&(i=i?i>0?1:-1:0),vr(e,i,this.lastAnchor_,this.duration_),this.mode_=void 0,this.totalDelta_=0,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_=void 0}setMouseAnchor(t){this.useAnchor_=t,t||(this.lastAnchor_=null)}},Kr=class extends Sr{constructor(t){const e=t=t||{};e.stopDown||(e.stopDown=c),super(e),this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.threshold_=void 0!==t.threshold?t.threshold:.3,this.duration_=void 0!==t.duration?t.duration:250}handleDragEvent(t){let e=0;const i=this.targetPointers[0],n=this.targetPointers[1],r=Math.atan2(n.clientY-i.clientY,n.clientX-i.clientX);if(void 0!==this.lastAngle_){const t=r-this.lastAngle_;this.rotationDelta_+=t,!this.rotating_&&Math.abs(this.rotationDelta_)>this.threshold_&&(this.rotating_=!0),e=t}this.lastAngle_=r;const s=t.map,o=s.getView();o.getConstraints().rotation!==Si&&(this.anchor_=s.getCoordinateFromPixelInternal(s.getEventPixel(Cr(this.targetPointers))),this.rotating_&&(s.render(),o.adjustRotationInternal(e,this.anchor_)))}handleUpEvent(t){return!(this.targetPointers.length<2)||(t.map.getView().endInteraction(this.duration_),!1)}handleDownEvent(t){if(this.targetPointers.length>=2){const e=t.map;return this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1}},Zr=class extends Sr{constructor(t){const e=t=t||{};e.stopDown||(e.stopDown=c),super(e),this.anchor_=null,this.duration_=void 0!==t.duration?t.duration:400,this.lastDistance_=void 0,this.lastScaleDelta_=1}handleDragEvent(t){let e=1;const i=this.targetPointers[0],n=this.targetPointers[1],r=i.clientX-n.clientX,s=i.clientY-n.clientY,o=Math.sqrt(r*r+s*s);void 0!==this.lastDistance_&&(e=this.lastDistance_/o),this.lastDistance_=o;const a=t.map,l=a.getView();1!=e&&(this.lastScaleDelta_=e),this.anchor_=a.getCoordinateFromPixelInternal(a.getEventPixel(Cr(this.targetPointers))),a.render(),l.adjustResolutionInternal(e,this.anchor_)}handleUpEvent(t){if(this.targetPointers.length<2){const e=t.map.getView(),i=this.lastScaleDelta_>1?1:-1;return e.endInteraction(this.duration_,i),!1}return!0}handleDownEvent(t){if(this.targetPointers.length>=2){const e=t.map;return this.anchor_=null,this.lastDistance_=void 0,this.lastScaleDelta_=1,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1}};function Vr(t){return t[0]>0&&t[1]>0}function Ur(t,e){return Array.isArray(t)?t:(void 0===e?e=[t,t]:(e[0]=t,e[1]=t),e)}function $r(t){t instanceof pn?t.setMapInternal(null):t instanceof Jn&&t.getLayers().forEach($r)}function Jr(t,e){if(t instanceof pn)t.setMapInternal(e);else if(t instanceof Jn){const i=t.getLayers().getArray();for(let t=0,n=i.length;t<n;++t)Jr(i[t],e)}}class Qr extends A{constructor(t){if(super(),this.on,this.once,this.un,this.id_=void 0,this.geometryName_="geometry",this.style_=null,this.styleFunction_=void 0,this.geometryChangeKey_=null,this.addChangeListener(this.geometryName_,this.handleGeometryChanged_),t)if("function"==typeof t.getSimplifiedGeometry){const e=t;this.setGeometry(e)}else{const e=t;this.setProperties(e)}}clone(){const t=new Qr(this.hasProperties()?this.getProperties():null);t.setGeometryName(this.getGeometryName());const e=this.getGeometry();e&&t.setGeometry(e.clone());const i=this.getStyle();return i&&t.setStyle(i),t}getGeometry(){return this.get(this.geometryName_)}getId(){return this.id_}getGeometryName(){return this.geometryName_}getStyle(){return this.style_}getStyleFunction(){return this.styleFunction_}handleGeometryChange_(){this.changed()}handleGeometryChanged_(){this.geometryChangeKey_&&(b(this.geometryChangeKey_),this.geometryChangeKey_=null);const t=this.getGeometry();t&&(this.geometryChangeKey_=S(t,m,this.handleGeometryChange_,this)),this.changed()}setGeometry(t){this.set(this.geometryName_,t)}setStyle(t){this.style_=t,this.styleFunction_=t?function(t){if("function"==typeof t)return t;let e;return Array.isArray(t)?e=t:(H("function"==typeof t.getZIndex,"Expected an `ol/style/Style` or an array of `ol/style/Style.js`"),e=[t]),function(){return e}}(t):void 0,this.changed()}setId(t){this.id_=t,this.changed()}setGeometryName(t){this.removeChangeListener(this.geometryName_,this.handleGeometryChanged_),this.geometryName_=t,this.addChangeListener(this.geometryName_,this.handleGeometryChanged_),this.handleGeometryChanged_()}}const ts=Qr,es=class extends p{constructor(t,e,i){super(),i=i||{},this.tileCoord=t,this.state=e,this.interimTile=null,this.key="",this.transition_=void 0===i.transition?250:i.transition,this.transitionStarts_={},this.interpolate=!!i.interpolate}changed(){this.dispatchEvent(m)}release(){3===this.state&&this.setState(4)}getKey(){return this.key+"/"+this.tileCoord}getInterimTile(){let t=this.interimTile;if(!t)return this;do{if(2==t.getState())return this.transition_=0,t;t=t.interimTile}while(t);return this}refreshInterimChain(){let t=this.interimTile;if(!t)return;let e=this;do{if(2==t.getState()){t.interimTile=null;break}1==t.getState()?e=t:0==t.getState()?e.interimTile=t.interimTile:e=t,t=e.interimTile}while(t)}getTileCoord(){return this.tileCoord}getState(){return this.state}setState(t){if(3!==this.state&&this.state>t)throw new Error("Tile load sequence violation");this.state=t,this.changed()}load(){I()}getAlpha(t,e){if(!this.transition_)return 1;let i=this.transitionStarts_[t];if(i){if(-1===i)return 1}else i=e,this.transitionStarts_[t]=i;const n=e-i+1e3/60;return n>=this.transition_?1:bi(n/this.transition_)}inTransition(t){return!!this.transition_&&-1!==this.transitionStarts_[t]}endTransition(t){this.transition_&&(this.transitionStarts_[t]=-1)}};const is=class extends es{constructor(t,e,i,n,r,s){super(t,e,s),this.crossOrigin_=n,this.src_=i,this.key=i,this.image_=new Image,null!==n&&(this.image_.crossOrigin=n),this.unlisten_=null,this.tileLoadFunction_=r}getImage(){return this.image_}setImage(t){this.image_=t,this.state=2,this.unlistenImage_(),this.changed()}handleImageError_(){this.state=3,this.unlistenImage_(),this.image_=function(){const t=Tn(1,1);return t.fillStyle="rgba(0,0,0,0)",t.fillRect(0,0,1,1),t.canvas}(),this.changed()}handleImageLoad_(){const t=this.image_;t.naturalWidth&&t.naturalHeight?this.state=2:this.state=4,this.unlistenImage_(),this.changed()}load(){3==this.state&&(this.state=0,this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)),0==this.state&&(this.state=1,this.changed(),this.tileLoadFunction_(this,this.src_),this.unlisten_=function(t,e,i){const n=t;let r=!0,s=!1,o=!1;const a=[E(n,"load",(function(){o=!0,s||e()}))];return n.src&&q?(s=!0,n.decode().then((function(){r&&e()})).catch((function(t){r&&(o?e():i())}))):a.push(E(n,"error",i)),function(){r=!1,a.forEach(b)}}(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))}unlistenImage_(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)}},ns=class{constructor(t,e,i,n,r,s){this.sourceProj_=t,this.targetProj_=e;let o={};const a=si(this.targetProj_,this.sourceProj_);this.transformInv_=function(t){const e=t[0]+"/"+t[1];return o[e]||(o[e]=a(t)),o[e]},this.maxSourceExtent_=n,this.errorThresholdSquared_=r*r,this.triangles_=[],this.wrapsXInSource_=!1,this.canWrapXInSource_=this.sourceProj_.canWrapX()&&!!n&&!!this.sourceProj_.getExtent()&&Rt(n)>=Rt(this.sourceProj_.getExtent()),this.sourceWorldWidth_=this.sourceProj_.getExtent()?Rt(this.sourceProj_.getExtent()):null,this.targetWorldWidth_=this.targetProj_.getExtent()?Rt(this.targetProj_.getExtent()):null;const l=bt(i),h=Tt(i),c=yt(i),u=_t(i),d=this.transformInv_(l),g=this.transformInv_(h),f=this.transformInv_(c),p=this.transformInv_(u),m=10+(s?Math.max(0,Math.ceil(Math.log2(mt(i)/(s*s*256*256)))):0);if(this.addQuad_(l,h,c,u,d,g,f,p,m),this.wrapsXInSource_){let t=1/0;this.triangles_.forEach((function(e,i,n){t=Math.min(t,e.source[0][0],e.source[1][0],e.source[2][0])})),this.triangles_.forEach((e=>{if(Math.max(e.source[0][0],e.source[1][0],e.source[2][0])-t>this.sourceWorldWidth_/2){const i=[[e.source[0][0],e.source[0][1]],[e.source[1][0],e.source[1][1]],[e.source[2][0],e.source[2][1]]];i[0][0]-t>this.sourceWorldWidth_/2&&(i[0][0]-=this.sourceWorldWidth_),i[1][0]-t>this.sourceWorldWidth_/2&&(i[1][0]-=this.sourceWorldWidth_),i[2][0]-t>this.sourceWorldWidth_/2&&(i[2][0]-=this.sourceWorldWidth_);const n=Math.min(i[0][0],i[1][0],i[2][0]);Math.max(i[0][0],i[1][0],i[2][0])-n<this.sourceWorldWidth_/2&&(e.source=i)}}))}o={}}addTriangle_(t,e,i,n,r,s){this.triangles_.push({source:[n,r,s],target:[t,e,i]})}addQuad_(t,e,i,n,r,s,o,a,l){const h=Q([r,s,o,a]),c=this.sourceWorldWidth_?Rt(h)/this.sourceWorldWidth_:null,u=this.sourceWorldWidth_,d=this.sourceProj_.canWrapX()&&c>.5&&c<1;let g=!1;if(l>0&&(this.targetProj_.isGlobal()&&this.targetWorldWidth_&&(g=Rt(Q([t,e,i,n]))/this.targetWorldWidth_>.25||g),!d&&this.sourceProj_.isGlobal()&&c&&(g=c>.25||g)),!g&&this.maxSourceExtent_&&isFinite(h[0])&&isFinite(h[1])&&isFinite(h[2])&&isFinite(h[3])&&!It(h,this.maxSourceExtent_))return;let f=0;if(!(g||isFinite(r[0])&&isFinite(r[1])&&isFinite(s[0])&&isFinite(s[1])&&isFinite(o[0])&&isFinite(o[1])&&isFinite(a[0])&&isFinite(a[1])))if(l>0)g=!0;else if(f=(isFinite(r[0])&&isFinite(r[1])?0:8)+(isFinite(s[0])&&isFinite(s[1])?0:4)+(isFinite(o[0])&&isFinite(o[1])?0:2)+(isFinite(a[0])&&isFinite(a[1])?0:1),1!=f&&2!=f&&4!=f&&8!=f)return;if(l>0){if(!g){const e=[(t[0]+i[0])/2,(t[1]+i[1])/2],n=this.transformInv_(e);let s;s=d?(Yt(r[0],u)+Yt(o[0],u))/2-Yt(n[0],u):(r[0]+o[0])/2-n[0];const a=(r[1]+o[1])/2-n[1];g=s*s+a*a>this.errorThresholdSquared_}if(g){if(Math.abs(t[0]-i[0])<=Math.abs(t[1]-i[1])){const h=[(e[0]+i[0])/2,(e[1]+i[1])/2],c=this.transformInv_(h),u=[(n[0]+t[0])/2,(n[1]+t[1])/2],d=this.transformInv_(u);this.addQuad_(t,e,h,u,r,s,c,d,l-1),this.addQuad_(u,h,i,n,d,c,o,a,l-1)}else{const h=[(t[0]+e[0])/2,(t[1]+e[1])/2],c=this.transformInv_(h),u=[(i[0]+n[0])/2,(i[1]+n[1])/2],d=this.transformInv_(u);this.addQuad_(t,h,u,n,r,c,d,a,l-1),this.addQuad_(h,e,i,u,c,s,o,d,l-1)}return}}if(d){if(!this.canWrapXInSource_)return;this.wrapsXInSource_=!0}0==(11&f)&&this.addTriangle_(t,i,n,r,o,a),0==(14&f)&&this.addTriangle_(t,i,e,r,o,s),f&&(0==(13&f)&&this.addTriangle_(e,n,t,s,a,r),0==(7&f)&&this.addTriangle_(e,n,i,s,a,o))}calculateSourceExtent(){const t=[1/0,1/0,-1/0,-1/0];return this.triangles_.forEach((function(e,i,n){const r=e.source;dt(t,r[0]),dt(t,r[1]),dt(t,r[2])})),t}getTriangles(){return this.triangles_}};let rs;const ss=[];function os(t,e,i,n,r){t.beginPath(),t.moveTo(0,0),t.lineTo(e,i),t.lineTo(n,r),t.closePath(),t.save(),t.clip(),t.fillRect(0,0,Math.max(e,n)+1,Math.max(i,r)),t.restore()}function as(t,e){return Math.abs(t[4*e]-210)>2||Math.abs(t[4*e+3]-191.25)>2}function ls(t,e,i,n){const r=oi(i,e,t);let s=ti(e,n,i);const o=e.getMetersPerUnit();void 0!==o&&(s*=o);const a=t.getMetersPerUnit();void 0!==a&&(s/=a);const l=t.getExtent();if(!l||nt(l,r)){const e=ti(t,s,r)/s;isFinite(e)&&e>0&&(s/=e)}return s}const hs=class extends es{constructor(t,e,i,n,r,s,o,a,l,h,c,u){super(r,0,u),this.renderEdges_=void 0!==c&&c,this.pixelRatio_=o,this.gutter_=a,this.canvas_=null,this.sourceTileGrid_=e,this.targetTileGrid_=n,this.wrappedTileCoord_=s||r,this.sourceTiles_=[],this.sourcesListenerKeys_=null,this.sourceZ_=0;const d=n.getTileCoordExtent(this.wrappedTileCoord_),g=this.targetTileGrid_.getExtent();let f=this.sourceTileGrid_.getExtent();const p=g?Et(d,g):d;if(0===mt(p))return void(this.state=4);const m=t.getExtent();m&&(f=f?Et(f,m):m);const _=n.getResolution(this.wrappedTileCoord_[0]),y=function(t,e,i,n){const r=vt(i);let s=ls(t,e,r,n);return(!isFinite(s)||s<=0)&&pt(i,(function(i){return s=ls(t,e,i,n),isFinite(s)&&s>0})),s}(t,i,p,_);if(!isFinite(y)||y<=0)return void(this.state=4);const v=void 0!==h?h:.5;if(this.triangulation_=new ns(t,i,p,f,y*v,_),0===this.triangulation_.getTriangles().length)return void(this.state=4);this.sourceZ_=e.getZForResolution(y);let x=this.triangulation_.calculateSourceExtent();if(f&&(t.canWrapX()?(x[1]=zt(x[1],f[1],f[3]),x[3]=zt(x[3],f[1],f[3])):x=Et(x,f)),mt(x)){const t=e.getTileRangeForExtentAndZ(x,this.sourceZ_);for(let e=t.minX;e<=t.maxX;e++)for(let i=t.minY;i<=t.maxY;i++){const t=l(this.sourceZ_,e,i,o);t&&this.sourceTiles_.push(t)}0===this.sourceTiles_.length&&(this.state=4)}else this.state=4}getImage(){return this.canvas_}reproject_(){const t=[];if(this.sourceTiles_.forEach((e=>{e&&2==e.getState()&&t.push({extent:this.sourceTileGrid_.getTileCoordExtent(e.tileCoord),image:e.getImage()})})),this.sourceTiles_.length=0,0===t.length)this.state=3;else{const e=this.wrappedTileCoord_[0],i=this.targetTileGrid_.getTileSize(e),n="number"==typeof i?i:i[0],r="number"==typeof i?i:i[1],s=this.targetTileGrid_.getResolution(e),o=this.sourceTileGrid_.getResolution(this.sourceZ_),a=this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);this.canvas_=function(t,e,i,n,r,s,o,a,l,h,c,u,d){const g=Tn(Math.round(i*t),Math.round(i*e),ss);if(u||(g.imageSmoothingEnabled=!1),0===l.length)return g.canvas;function f(t){return Math.round(t*i)/i}g.scale(i,i),g.globalCompositeOperation="lighter";const p=[1/0,1/0,-1/0,-1/0];let m;if(l.forEach((function(t,e,i){var n,r;n=p,(r=t.extent)[0]<n[0]&&(n[0]=r[0]),r[2]>n[2]&&(n[2]=r[2]),r[1]<n[1]&&(n[1]=r[1]),r[3]>n[3]&&(n[3]=r[3])})),!d||1!==l.length||0!==h){const t=Rt(p),e=St(p);m=Tn(Math.round(i*t/n),Math.round(i*e/n),ss),u||(m.imageSmoothingEnabled=!1);const r=i/n;l.forEach((function(t,e,i){const n=t.extent[0]-p[0],s=-(t.extent[3]-p[3]),o=Rt(t.extent),a=St(t.extent);t.image.width>0&&t.image.height>0&&m.drawImage(t.image,h,h,t.image.width-2*h,t.image.height-2*h,n*r,s*r,o*r,a*r)}))}const _=bt(o);return a.getTriangles().forEach((function(t,e,r){const o=t.source,a=t.target;let h=o[0][0],c=o[0][1],d=o[1][0],y=o[1][1],v=o[2][0],x=o[2][1];const w=f((a[0][0]-_[0])/s),C=f(-(a[0][1]-_[1])/s),S=f((a[1][0]-_[0])/s),E=f(-(a[1][1]-_[1])/s),b=f((a[2][0]-_[0])/s),T=f(-(a[2][1]-_[1])/s),R=h,I=c;h=0,c=0,d-=R,y-=I,v-=R,x-=I;const M=function(t){const e=t.length;for(let i=0;i<e;i++){let n=i,r=Math.abs(t[i][i]);for(let s=i+1;s<e;s++){const e=Math.abs(t[s][i]);e>r&&(r=e,n=s)}if(0===r)return null;const s=t[n];t[n]=t[i],t[i]=s;for(let n=i+1;n<e;n++){const r=-t[n][i]/t[i][i];for(let s=i;s<e+1;s++)i==s?t[n][s]=0:t[n][s]+=r*t[i][s]}}const i=new Array(e);for(let n=e-1;n>=0;n--){i[n]=t[n][e]/t[n][n];for(let r=n-1;r>=0;r--)t[r][e]-=t[r][n]*i[n]}return i}([[d,y,0,0,S-w],[v,x,0,0,b-w],[0,0,d,y,E-C],[0,0,v,x,T-C]]);if(!M)return;if(g.save(),g.beginPath(),function(){if(void 0===rs){const t=Tn(6,6,ss);t.globalCompositeOperation="lighter",t.fillStyle="rgba(210, 0, 0, 0.75)",os(t,4,5,4,0),os(t,4,5,0,5);const e=t.getImageData(0,0,3,3).data;rs=as(e,0)||as(e,4)||as(e,8),Rn(t),ss.push(t.canvas)}return rs}()||!u){g.moveTo(S,E);const t=4,e=w-S,i=C-E;for(let n=0;n<t;n++)g.lineTo(S+f((n+1)*e/t),E+f(n*i/(t-1))),n!=t-1&&g.lineTo(S+f((n+1)*e/t),E+f((n+1)*i/(t-1)));g.lineTo(b,T)}else g.moveTo(S,E),g.lineTo(w,C),g.lineTo(b,T);let k;if(g.clip(),g.transform(M[0],M[2],M[1],M[3],w,C),g.translate(p[0]-R,p[3]-I),m)k=m.canvas,g.scale(n/i,-n/i);else{const t=l[0],e=t.extent;k=t.image,g.scale(Rt(e)/k.width,-St(e)/k.height)}g.drawImage(k,0,0),g.restore()})),m&&(Rn(m),ss.push(m.canvas)),c&&(g.save(),g.globalCompositeOperation="source-over",g.strokeStyle="black",g.lineWidth=1,a.getTriangles().forEach((function(t,e,i){const n=t.target,r=(n[0][0]-_[0])/s,o=-(n[0][1]-_[1])/s,a=(n[1][0]-_[0])/s,l=-(n[1][1]-_[1])/s,h=(n[2][0]-_[0])/s,c=-(n[2][1]-_[1])/s;g.beginPath(),g.moveTo(a,l),g.lineTo(r,o),g.lineTo(h,c),g.closePath(),g.stroke()})),g.restore()),g.canvas}(n,r,this.pixelRatio_,o,this.sourceTileGrid_.getExtent(),s,a,this.triangulation_,t,this.gutter_,this.renderEdges_,this.interpolate),this.state=2}this.changed()}load(){if(0==this.state){this.state=1,this.changed();let t=0;this.sourcesListenerKeys_=[],this.sourceTiles_.forEach((e=>{const i=e.getState();if(0==i||1==i){t++;const i=S(e,m,(function(n){const r=e.getState();2!=r&&3!=r&&4!=r||(b(i),t--,0===t&&(this.unlistenSources_(),this.reproject_()))}),this);this.sourcesListenerKeys_.push(i)}})),0===t?setTimeout(this.reproject_.bind(this),0):this.sourceTiles_.forEach((function(t,e,i){0==t.getState()&&t.load()}))}}unlistenSources_(){this.sourcesListenerKeys_.forEach(b),this.sourcesListenerKeys_=null}release(){this.canvas_&&(Rn(this.canvas_.getContext("2d")),ss.push(this.canvas_),this.canvas_=null),super.release()}},cs=class{constructor(t){this.highWaterMark=void 0!==t?t:2048,this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}canExpireCache(){return this.highWaterMark>0&&this.getCount()>this.highWaterMark}expireCache(t){for(;this.canExpireCache();)this.pop()}clear(){this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}containsKey(t){return this.entries_.hasOwnProperty(t)}forEach(t){let e=this.oldest_;for(;e;)t(e.value_,e.key_,this),e=e.newer}get(t,e){const i=this.entries_[t];return H(void 0!==i,"Tried to get a value for a key that does not exist in the cache"),i===this.newest_||(i===this.oldest_?(this.oldest_=this.oldest_.newer,this.oldest_.older=null):(i.newer.older=i.older,i.older.newer=i.newer),i.newer=null,i.older=this.newest_,this.newest_.newer=i,this.newest_=i),i.value_}remove(t){const e=this.entries_[t];return H(void 0!==e,"Tried to get a value for a key that does not exist in the cache"),e===this.newest_?(this.newest_=e.older,this.newest_&&(this.newest_.newer=null)):e===this.oldest_?(this.oldest_=e.newer,this.oldest_&&(this.oldest_.older=null)):(e.newer.older=e.older,e.older.newer=e.newer),delete this.entries_[t],--this.count_,e.value_}getCount(){return this.count_}getKeys(){const t=new Array(this.count_);let e,i=0;for(e=this.newest_;e;e=e.older)t[i++]=e.key_;return t}getValues(){const t=new Array(this.count_);let e,i=0;for(e=this.newest_;e;e=e.older)t[i++]=e.value_;return t}peekLast(){return this.oldest_.value_}peekLastKey(){return this.oldest_.key_}peekFirstKey(){return this.newest_.key_}peek(t){return this.entries_[t]?.value_}pop(){const t=this.oldest_;return delete this.entries_[t.key_],t.newer&&(t.newer.older=null),this.oldest_=t.newer,this.oldest_||(this.newest_=null),--this.count_,t.value_}replace(t,e){this.get(t),this.entries_[t].value_=e}set(t,e){H(!(t in this.entries_),"Tried to set a value for a key that is used already");const i={key_:t,newer:null,older:this.newest_,value_:e};this.newest_?this.newest_.newer=i:this.oldest_=i,this.newest_=i,this.entries_[t]=i,++this.count_}setSize(t){this.highWaterMark=t}};function us(t,e,i,n){return void 0!==n?(n[0]=t,n[1]=e,n[2]=i,n):[t,e,i]}function ds(t,e,i){return t+"/"+e+"/"+i}function gs(t){return ds(t[0],t[1],t[2])}const fs=class extends cs{clear(){for(;this.getCount()>0;)this.pop().release();super.clear()}expireCache(t){for(;this.canExpireCache()&&!(this.peekLast().getKey()in t);)this.pop().release()}pruneExceptNewestZ(){if(0===this.getCount())return;const t=this.peekFirstKey().split("/").map(Number)[0];this.forEach((e=>{e.tileCoord[0]!==t&&(this.remove(gs(e.tileCoord)),e.release())}))}};function ps(t){return t?Array.isArray(t)?function(e){return t}:"function"==typeof t?t:function(e){return[t]}:null}const ms=class extends A{constructor(t){super(),this.projection=Qe(t.projection),this.attributions_=ps(t.attributions),this.attributionsCollapsible_=void 0===t.attributionsCollapsible||t.attributionsCollapsible,this.loading=!1,this.state_=void 0!==t.state?t.state:"ready",this.wrapX_=void 0!==t.wrapX&&t.wrapX,this.interpolate_=!!t.interpolate,this.viewResolver=null,this.viewRejector=null;const e=this;this.viewPromise_=new Promise((function(t,i){e.viewResolver=t,e.viewRejector=i}))}getAttributions(){return this.attributions_}getAttributionsCollapsible(){return this.attributionsCollapsible_}getProjection(){return this.projection}getResolutions(t){return null}getView(){return this.viewPromise_}getState(){return this.state_}getWrapX(){return this.wrapX_}getInterpolate(){return this.interpolate_}refresh(){this.changed()}setAttributions(t){this.attributions_=ps(t),this.changed()}setState(t){this.state_=t,this.changed()}};class _s{constructor(t,e,i,n){this.minX=t,this.maxX=e,this.minY=i,this.maxY=n}contains(t){return this.containsXY(t[1],t[2])}containsTileRange(t){return this.minX<=t.minX&&t.maxX<=this.maxX&&this.minY<=t.minY&&t.maxY<=this.maxY}containsXY(t,e){return this.minX<=t&&t<=this.maxX&&this.minY<=e&&e<=this.maxY}equals(t){return this.minX==t.minX&&this.minY==t.minY&&this.maxX==t.maxX&&this.maxY==t.maxY}extend(t){t.minX<this.minX&&(this.minX=t.minX),t.maxX>this.maxX&&(this.maxX=t.maxX),t.minY<this.minY&&(this.minY=t.minY),t.maxY>this.maxY&&(this.maxY=t.maxY)}getHeight(){return this.maxY-this.minY+1}getSize(){return[this.getWidth(),this.getHeight()]}getWidth(){return this.maxX-this.minX+1}intersects(t){return this.minX<=t.maxX&&this.maxX>=t.minX&&this.minY<=t.maxY&&this.maxY>=t.minY}}function ys(t,e,i,n,r){return void 0!==r?(r.minX=t,r.maxX=e,r.minY=i,r.maxY=n,r):new _s(t,e,i,n)}const vs=_s,xs=[0,0,0],ws=class{constructor(t){let e;if(this.minZoom=void 0!==t.minZoom?t.minZoom:0,this.resolutions_=t.resolutions,H(function(t,e,i){const n=((t,e)=>e-t)||r;return t.every((function(e,i){if(0===i)return!0;const r=n(t[i-1],e);return!(r>0||0===r)}))}(this.resolutions_),"`resolutions` must be sorted in descending order"),!t.origins)for(let t=0,i=this.resolutions_.length-1;t<i;++t)if(e){if(this.resolutions_[t]/this.resolutions_[t+1]!==e){e=void 0;break}}else e=this.resolutions_[t]/this.resolutions_[t+1];this.zoomFactor_=e,this.maxZoom=this.resolutions_.length-1,this.origin_=void 0!==t.origin?t.origin:null,this.origins_=null,void 0!==t.origins&&(this.origins_=t.origins,H(this.origins_.length==this.resolutions_.length,"Number of `origins` and `resolutions` must be equal"));const i=t.extent;void 0===i||this.origin_||this.origins_||(this.origin_=bt(i)),H(!this.origin_&&this.origins_||this.origin_&&!this.origins_,"Either `origin` or `origins` must be configured, never both"),this.tileSizes_=null,void 0!==t.tileSizes&&(this.tileSizes_=t.tileSizes,H(this.tileSizes_.length==this.resolutions_.length,"Number of `tileSizes` and `resolutions` must be equal")),this.tileSize_=void 0!==t.tileSize?t.tileSize:this.tileSizes_?null:Ee,H(!this.tileSize_&&this.tileSizes_||this.tileSize_&&!this.tileSizes_,"Either `tileSize` or `tileSizes` must be configured, never both"),this.extent_=void 0!==i?i:null,this.fullTileRanges_=null,this.tmpSize_=[0,0],this.tmpExtent_=[0,0,0,0],void 0!==t.sizes?this.fullTileRanges_=t.sizes.map(((t,e)=>{const n=new vs(Math.min(0,t[0]),Math.max(t[0]-1,-1),Math.min(0,t[1]),Math.max(t[1]-1,-1));if(i){const t=this.getTileRangeForExtentAndZ(i,e);n.minX=Math.max(t.minX,n.minX),n.maxX=Math.min(t.maxX,n.maxX),n.minY=Math.max(t.minY,n.minY),n.maxY=Math.min(t.maxY,n.maxY)}return n})):i&&this.calculateTileRanges_(i)}forEachTileCoord(t,e,i){const n=this.getTileRangeForExtentAndZ(t,e);for(let t=n.minX,r=n.maxX;t<=r;++t)for(let r=n.minY,s=n.maxY;r<=s;++r)i([e,t,r])}forEachTileCoordParentTileRange(t,e,i,n){let r,s,o,a=null,l=t[0]-1;for(2===this.zoomFactor_?(s=t[1],o=t[2]):a=this.getTileCoordExtent(t,n);l>=this.minZoom;){if(void 0!==s&&void 0!==o?(s=Math.floor(s/2),o=Math.floor(o/2),r=ys(s,s,o,o,i)):r=this.getTileRangeForExtentAndZ(a,l,i),e(l,r))return!0;--l}return!1}getExtent(){return this.extent_}getMaxZoom(){return this.maxZoom}getMinZoom(){return this.minZoom}getOrigin(t){return this.origin_?this.origin_:this.origins_[t]}getResolution(t){return this.resolutions_[t]}getResolutions(){return this.resolutions_}getTileCoordChildTileRange(t,e,i){if(t[0]<this.maxZoom){if(2===this.zoomFactor_){const i=2*t[1],n=2*t[2];return ys(i,i+1,n,n+1,e)}const n=this.getTileCoordExtent(t,i||this.tmpExtent_);return this.getTileRangeForExtentAndZ(n,t[0]+1,e)}return null}getTileRangeForTileCoordAndZ(t,e,i){if(e>this.maxZoom||e<this.minZoom)return null;const n=t[0],r=t[1],s=t[2];if(e===n)return ys(r,s,r,s,i);if(this.zoomFactor_){const t=Math.pow(this.zoomFactor_,e-n),o=Math.floor(r*t),a=Math.floor(s*t);return e<n?ys(o,o,a,a,i):ys(o,Math.floor(t*(r+1))-1,a,Math.floor(t*(s+1))-1,i)}const o=this.getTileCoordExtent(t,this.tmpExtent_);return this.getTileRangeForExtentAndZ(o,e,i)}getTileRangeForExtentAndZ(t,e,i){this.getTileCoordForXYAndZ_(t[0],t[3],e,!1,xs);const n=xs[1],r=xs[2];return this.getTileCoordForXYAndZ_(t[2],t[1],e,!0,xs),ys(n,xs[1],r,xs[2],i)}getTileCoordCenter(t){const e=this.getOrigin(t[0]),i=this.getResolution(t[0]),n=Ur(this.getTileSize(t[0]),this.tmpSize_);return[e[0]+(t[1]+.5)*n[0]*i,e[1]-(t[2]+.5)*n[1]*i]}getTileCoordExtent(t,e){const i=this.getOrigin(t[0]),n=this.getResolution(t[0]),r=Ur(this.getTileSize(t[0]),this.tmpSize_),s=i[0]+t[1]*r[0]*n,o=i[1]-(t[2]+1)*r[1]*n;return at(s,o,s+r[0]*n,o+r[1]*n,e)}getTileCoordForCoordAndResolution(t,e,i){return this.getTileCoordForXYAndResolution_(t[0],t[1],e,!1,i)}getTileCoordForXYAndResolution_(t,e,i,n,r){const s=this.getZForResolution(i),o=i/this.getResolution(s),a=this.getOrigin(s),l=Ur(this.getTileSize(s),this.tmpSize_);let h=o*(t-a[0])/i/l[0],c=o*(a[1]-e)/i/l[1];return n?(h=Vt(h,5)-1,c=Vt(c,5)-1):(h=Zt(h,5),c=Zt(c,5)),us(s,h,c,r)}getTileCoordForXYAndZ_(t,e,i,n,r){const s=this.getOrigin(i),o=this.getResolution(i),a=Ur(this.getTileSize(i),this.tmpSize_);let l=(t-s[0])/o/a[0],h=(s[1]-e)/o/a[1];return n?(l=Vt(l,5)-1,h=Vt(h,5)-1):(l=Zt(l,5),h=Zt(h,5)),us(i,l,h,r)}getTileCoordForCoordAndZ(t,e,i){return this.getTileCoordForXYAndZ_(t[0],t[1],e,!1,i)}getTileCoordResolution(t){return this.resolutions_[t[0]]}getTileSize(t){return this.tileSize_?this.tileSize_:this.tileSizes_[t]}getFullTileRange(t){return this.fullTileRanges_?this.fullTileRanges_[t]:this.extent_?this.getTileRangeForExtentAndZ(this.extent_,t):null}getZForResolution(t,e){return zt(s(this.resolutions_,t,e||0),this.minZoom,this.maxZoom)}tileCoordIntersectsViewport(t,e){return nn(e,0,e.length,2,this.getTileCoordExtent(t))}calculateTileRanges_(t){const e=this.resolutions_.length,i=new Array(e);for(let n=this.minZoom;n<e;++n)i[n]=this.getTileRangeForExtentAndZ(t,n);this.fullTileRanges_=i}};function Cs(t){let e=t.getDefaultTileGrid();return e||(e=function(t,e,i,n){return function(t,e,i,n){n=void 0!==n?n:"top-left";const r=Ss(t,undefined,i);return new ws({extent:t,origin:xt(t,n),resolutions:r,tileSize:i})}(Es(t),0,void 0,void 0)}(t),t.setDefaultTileGrid(e)),e}function Ss(t,e,i,n){e=void 0!==e?e:Se,i=Ur(void 0!==i?i:Ee);const r=St(t),s=Rt(t);n=n>0?n:Math.max(s/i[0],r/i[1]);const o=e+1,a=new Array(o);for(let t=0;t<o;++t)a[t]=n/Math.pow(2,t);return a}function Es(t){let e=(t=Qe(t)).getExtent();if(!e){const i=180*be.degrees/t.getMetersPerUnit();e=at(-i,-i,i,i)}return e}class bs extends t{constructor(t,e){super(t),this.tile=e}}const Ts=class extends ms{constructor(t){super({attributions:t.attributions,attributionsCollapsible:t.attributionsCollapsible,projection:t.projection,state:t.state,wrapX:t.wrapX,interpolate:t.interpolate}),this.on,this.once,this.un,this.opaque_=void 0!==t.opaque&&t.opaque,this.tilePixelRatio_=void 0!==t.tilePixelRatio?t.tilePixelRatio:1,this.tileGrid=void 0!==t.tileGrid?t.tileGrid:null;this.tileGrid&&Ur(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()),[256,256]),this.tileCache=new fs(t.cacheSize||0),this.tmpSize=[0,0],this.key_=t.key||"",this.tileOptions={transition:t.transition,interpolate:t.interpolate},this.zDirection=t.zDirection?t.zDirection:0}canExpireCache(){return this.tileCache.canExpireCache()}expireCache(t,e){const i=this.getTileCacheForProjection(t);i&&i.expireCache(e)}forEachLoadedTile(t,e,i,n){const r=this.getTileCacheForProjection(t);if(!r)return!1;let s,o,a,l=!0;for(let t=i.minX;t<=i.maxX;++t)for(let h=i.minY;h<=i.maxY;++h)o=ds(e,t,h),a=!1,r.containsKey(o)&&(s=r.get(o),a=2===s.getState(),a&&(a=!1!==n(s))),a||(l=!1);return l}getGutterForProjection(t){return 0}getKey(){return this.key_}setKey(t){this.key_!==t&&(this.key_=t,this.changed())}getOpaque(t){return this.opaque_}getResolutions(t){const e=t?this.getTileGridForProjection(t):this.tileGrid;return e?e.getResolutions():null}getTile(t,e,i,n,r){return I()}getTileGrid(){return this.tileGrid}getTileGridForProjection(t){return this.tileGrid?this.tileGrid:Cs(t)}getTileCacheForProjection(t){const e=this.getProjection();return H(null===e||ni(e,t),"A VectorTile source can only be rendered if it has a projection compatible with the view projection."),this.tileCache}getTilePixelRatio(t){return this.tilePixelRatio_}getTilePixelSize(t,e,i){const n=this.getTileGridForProjection(i),r=this.getTilePixelRatio(e),s=Ur(n.getTileSize(t),this.tmpSize);return 1==r?s:(o=s,a=r,void 0===(l=this.tmpSize)&&(l=[0,0]),l[0]=o[0]*a+.5|0,l[1]=o[1]*a+.5|0,l);var o,a,l}getTileCoordForTileUrlFunction(t,e){e=void 0!==e?e:this.getProjection();const i=this.getTileGridForProjection(e);return this.getWrapX()&&e.isGlobal()&&(t=function(t,e,i){const n=e[0],r=t.getTileCoordCenter(e),s=Es(i);if(!nt(s,r)){const e=Rt(s),i=Math.ceil((s[0]-r[0])/e);return r[0]+=e*i,t.getTileCoordForCoordAndZ(r,n)}return e}(i,t,e)),function(t,e){const i=t[0],n=t[1],r=t[2];if(e.getMinZoom()>i||i>e.getMaxZoom())return!1;const s=e.getFullTileRange(i);return!s||s.containsXY(n,r)}(t,i)?t:null}clear(){this.tileCache.clear()}refresh(){this.clear(),super.refresh()}updateCacheSize(t,e){const i=this.getTileCacheForProjection(e);t>i.highWaterMark&&(i.highWaterMark=t)}useTile(t,e,i,n){}};function Rs(t,e){const i=/\{z\}/g,n=/\{x\}/g,r=/\{y\}/g,s=/\{-y\}/g;return function(o,a,l){if(o)return t.replace(i,o[0].toString()).replace(n,o[1].toString()).replace(r,o[2].toString()).replace(s,(function(){const t=o[0],i=e.getFullTileRange(t);if(!i)throw new Error("The {-y} placeholder requires a tile grid with extent");return(i.getHeight()-o[2]-1).toString()}))}}class Is extends Ts{constructor(t){super({attributions:t.attributions,cacheSize:t.cacheSize,opaque:t.opaque,projection:t.projection,state:t.state,tileGrid:t.tileGrid,tilePixelRatio:t.tilePixelRatio,wrapX:t.wrapX,transition:t.transition,interpolate:t.interpolate,key:t.key,attributionsCollapsible:t.attributionsCollapsible,zDirection:t.zDirection}),this.generateTileUrlFunction_=this.tileUrlFunction===Is.prototype.tileUrlFunction,this.tileLoadFunction=t.tileLoadFunction,t.tileUrlFunction&&(this.tileUrlFunction=t.tileUrlFunction),this.urls=null,t.urls?this.setUrls(t.urls):t.url&&this.setUrl(t.url),this.tileLoadingKeys_={}}getTileLoadFunction(){return this.tileLoadFunction}getTileUrlFunction(){return Object.getPrototypeOf(this).tileUrlFunction===this.tileUrlFunction?this.tileUrlFunction.bind(this):this.tileUrlFunction}getUrls(){return this.urls}handleTileChange(t){const e=t.target,i=k(e),n=e.getState();let r;1==n?(this.tileLoadingKeys_[i]=!0,r="tileloadstart"):i in this.tileLoadingKeys_&&(delete this.tileLoadingKeys_[i],r=3==n?"tileloaderror":2==n?"tileloadend":void 0),null!=r&&this.dispatchEvent(new bs(r,e))}setTileLoadFunction(t){this.tileCache.clear(),this.tileLoadFunction=t,this.changed()}setTileUrlFunction(t,e){this.tileUrlFunction=t,this.tileCache.pruneExceptNewestZ(),void 0!==e?this.setKey(e):this.changed()}setUrl(t){const e=function(t){const e=[];let i=/\{([a-z])-([a-z])\}/.exec(t);if(i){const n=i[1].charCodeAt(0),r=i[2].charCodeAt(0);let s;for(s=n;s<=r;++s)e.push(t.replace(i[0],String.fromCharCode(s)));return e}if(i=/\{(\d+)-(\d+)\}/.exec(t),i){const n=parseInt(i[2],10);for(let r=parseInt(i[1],10);r<=n;r++)e.push(t.replace(i[0],r.toString()));return e}return e.push(t),e}(t);this.urls=e,this.setUrls(e)}setUrls(t){this.urls=t;const e=t.join("\n");this.generateTileUrlFunction_?this.setTileUrlFunction(function(t,e){const i=t.length,n=new Array(i);for(let r=0;r<i;++r)n[r]=Rs(t[r],e);return function(t){return 1===t.length?t[0]:function(e,i,n){if(!e)return;const r=function(t){return(t[1]<<t[0])+t[2]}(e),s=Yt(r,t.length);return t[s](e,i,n)}}(n)}(t,this.tileGrid),e):this.setKey(e)}tileUrlFunction(t,e,i){}useTile(t,e,i){const n=ds(t,e,i);this.tileCache.containsKey(n)&&this.tileCache.get(n)}}const Ms=Is;function ks(t,e){t.getImage().src=e}const Ls=class extends Ms{constructor(t){super({attributions:t.attributions,cacheSize:t.cacheSize,opaque:t.opaque,projection:t.projection,state:t.state,tileGrid:t.tileGrid,tileLoadFunction:t.tileLoadFunction?t.tileLoadFunction:ks,tilePixelRatio:t.tilePixelRatio,tileUrlFunction:t.tileUrlFunction,url:t.url,urls:t.urls,wrapX:t.wrapX,transition:t.transition,interpolate:void 0===t.interpolate||t.interpolate,key:t.key,attributionsCollapsible:t.attributionsCollapsible,zDirection:t.zDirection}),this.crossOrigin=void 0!==t.crossOrigin?t.crossOrigin:null,this.tileClass=void 0!==t.tileClass?t.tileClass:is,this.tileCacheForProjection={},this.tileGridForProjection={},this.reprojectionErrorThreshold_=t.reprojectionErrorThreshold,this.renderReprojectionEdges_=!1}canExpireCache(){if(this.tileCache.canExpireCache())return!0;for(const t in this.tileCacheForProjection)if(this.tileCacheForProjection[t].canExpireCache())return!0;return!1}expireCache(t,e){const i=this.getTileCacheForProjection(t);this.tileCache.expireCache(this.tileCache==i?e:{});for(const t in this.tileCacheForProjection){const n=this.tileCacheForProjection[t];n.expireCache(n==i?e:{})}}getGutterForProjection(t){return this.getProjection()&&t&&!ni(this.getProjection(),t)?0:this.getGutter()}getGutter(){return 0}getKey(){let t=super.getKey();return this.getInterpolate()||(t+=":disable-interpolation"),t}getOpaque(t){return!(this.getProjection()&&t&&!ni(this.getProjection(),t))&&super.getOpaque(t)}getTileGridForProjection(t){const e=this.getProjection();if(this.tileGrid&&(!e||ni(e,t)))return this.tileGrid;const i=k(t);return i in this.tileGridForProjection||(this.tileGridForProjection[i]=Cs(t)),this.tileGridForProjection[i]}getTileCacheForProjection(t){const e=this.getProjection();if(!e||ni(e,t))return this.tileCache;const i=k(t);return i in this.tileCacheForProjection||(this.tileCacheForProjection[i]=new fs(this.tileCache.highWaterMark)),this.tileCacheForProjection[i]}createTile_(t,e,i,n,r,s){const o=[t,e,i],a=this.getTileCoordForTileUrlFunction(o,r),l=a?this.tileUrlFunction(a,n,r):void 0,h=new this.tileClass(o,void 0!==l?0:4,void 0!==l?l:"",this.crossOrigin,this.tileLoadFunction,this.tileOptions);return h.key=s,h.addEventListener(m,this.handleTileChange.bind(this)),h}getTile(t,e,i,n,r){const s=this.getProjection();if(!s||!r||ni(s,r))return this.getTileInternal(t,e,i,n,s||r);const o=this.getTileCacheForProjection(r),a=[t,e,i];let l;const h=gs(a);o.containsKey(h)&&(l=o.get(h));const c=this.getKey();if(l&&l.key==c)return l;const u=this.getTileGridForProjection(s),d=this.getTileGridForProjection(r),g=this.getTileCoordForTileUrlFunction(a,r),f=new hs(s,u,r,d,a,g,this.getTilePixelRatio(n),this.getGutter(),((t,e,i,n)=>this.getTileInternal(t,e,i,n,s)),this.reprojectionErrorThreshold_,this.renderReprojectionEdges_,this.tileOptions);return f.key=c,l?(f.interimTile=l,f.refreshInterimChain(),o.replace(h,f)):o.set(h,f),f}getTileInternal(t,e,i,n,r){let s=null;const o=ds(t,e,i),a=this.getKey();if(this.tileCache.containsKey(o)){if(s=this.tileCache.get(o),s.key!=a){const l=s;s=this.createTile_(t,e,i,n,r,a),0==l.getState()?s.interimTile=l.interimTile:s.interimTile=l,s.refreshInterimChain(),this.tileCache.replace(o,s)}}else s=this.createTile_(t,e,i,n,r,a),this.tileCache.set(o,s);return s}setRenderReprojectionEdges(t){if(this.renderReprojectionEdges_!=t){this.renderReprojectionEdges_=t;for(const t in this.tileCacheForProjection)this.tileCacheForProjection[t].clear();this.changed()}}setTileGridForProjection(t,e){const i=Qe(t);if(i){const t=k(i);t in this.tileGridForProjection||(this.tileGridForProjection[t]=e)}}clear(){super.clear();for(const t in this.tileCacheForProjection)this.tileCacheForProjection[t].clear()}},As=class extends Ls{constructor(t){const e=void 0!==(t=t||{}).projection?t.projection:"EPSG:3857",i=void 0!==t.tileGrid?t.tileGrid:function(t){const e=t||{},i=e.extent||Qe("EPSG:3857").getExtent(),n={extent:i,minZoom:e.minZoom,tileSize:e.tileSize,resolutions:Ss(i,e.maxZoom,e.tileSize,e.maxResolution)};return new ws(n)}({extent:Es(e),maxResolution:t.maxResolution,maxZoom:t.maxZoom,minZoom:t.minZoom,tileSize:t.tileSize});super({attributions:t.attributions,cacheSize:t.cacheSize,crossOrigin:t.crossOrigin,interpolate:t.interpolate,opaque:t.opaque,projection:e,reprojectionErrorThreshold:t.reprojectionErrorThreshold,tileGrid:i,tileLoadFunction:t.tileLoadFunction,tilePixelRatio:t.tilePixelRatio,tileUrlFunction:t.tileUrlFunction,url:t.url,urls:t.urls,wrapX:void 0===t.wrapX||t.wrapX,transition:t.transition,attributionsCollapsible:t.attributionsCollapsible,zDirection:t.zDirection}),this.gutter_=void 0!==t.gutter?t.gutter:0}getGutter(){return this.gutter_}};var Ps=i(582);const Fs=class{constructor(t){this.rbush_=new Ps(t),this.items_={}}insert(t,e){const i={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3],value:e};this.rbush_.insert(i),this.items_[k(e)]=i}load(t,e){const i=new Array(e.length);for(let n=0,r=e.length;n<r;n++){const r=t[n],s=e[n],o={minX:r[0],minY:r[1],maxX:r[2],maxY:r[3],value:s};i[n]=o,this.items_[k(s)]=o}this.rbush_.load(i)}remove(t){const e=k(t),i=this.items_[e];return delete this.items_[e],null!==this.rbush_.remove(i)}update(t,e){const i=this.items_[k(e)];ut([i.minX,i.minY,i.maxX,i.maxY],t)||(this.remove(e),this.insert(t,e))}getAll(){return this.rbush_.all().map((function(t){return t.value}))}getInExtent(t){const e={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3]};return this.rbush_.search(e).map((function(t){return t.value}))}forEach(t){return this.forEach_(this.getAll(),t)}forEachInExtent(t,e){return this.forEach_(this.getInExtent(t),e)}forEach_(t,e){let i;for(let n=0,r=t.length;n<r;n++)if(i=e(t[n]),i)return i;return i}isEmpty(){return f(this.items_)}clear(){this.rbush_.clear(),this.items_={}}getExtent(t){const e=this.rbush_.toJSON();return at(e.minX,e.minY,e.maxX,e.maxY,t)}concat(t){this.rbush_.load(t.rbush_.all());for(const e in t.items_)this.items_[e]=t.items_[e]}};function Ds(t,e,i,n,s,o,a){let l,h;const c=(i-e)/n;if(1===c)l=e;else if(2===c)l=e,h=s;else if(0!==c){let o=t[e],a=t[e+1],c=0;const u=[0];for(let r=e+n;r<i;r+=n){const e=t[r],i=t[r+1];c+=Math.sqrt((e-o)*(e-o)+(i-a)*(i-a)),u.push(c),o=e,a=i}const d=s*c,g=function(t,e,i){let n,s;i=i||r;let o=0,a=t.length,l=!1;for(;o<a;)n=o+(a-o>>1),s=+i(t[n],e),s<0?o=n+1:(a=n,l=!s);return l?o:~o}(u,d);g<0?(h=(d-u[-g-2])/(u[-g-1]-u[-g-2]),l=e+(-g-2)*n):l=e+g*n}a=a>1?a:2,o=o||new Array(a);for(let e=0;e<a;++e)o[e]=void 0===l?NaN:void 0===h?t[l+e]:Ht(t[l+e],t[l+n+e],h);return o}const Os=[1,0,0,1,0,0];class Ns{constructor(t,e,i,n,r,s){this.styleFunction,this.extent_,this.id_=s,this.type_=t,this.flatCoordinates_=e,this.flatInteriorPoints_=null,this.flatMidpoints_=null,this.ends_=i,this.properties_=r,this.squaredTolerance_,this.stride_=n,this.simplifiedGeometry_}get(t){return this.properties_[t]}getExtent(){return this.extent_||(this.extent_="Point"===this.type_?ht(this.flatCoordinates_):ct(this.flatCoordinates_,0,this.flatCoordinates_.length,2)),this.extent_}getFlatInteriorPoint(){if(!this.flatInteriorPoints_){const t=vt(this.getExtent());this.flatInteriorPoints_=tn(this.flatCoordinates_,0,this.ends_,2,t,0)}return this.flatInteriorPoints_}getFlatInteriorPoints(){if(!this.flatInteriorPoints_){const t=function(t,e){const i=[];let n,r=0,s=0;for(let o=0,a=e.length;o<a;++o){const a=e[o],l=sn(t,r,a,2);if(void 0===n&&(n=l),l===n)i.push(e.slice(s,o+1));else{if(0===i.length)continue;i[i.length-1].push(e[s])}s=o+1,r=a}return i}(this.flatCoordinates_,this.ends_),e=function(t,e,i,n){const r=[];let s=[1/0,1/0,-1/0,-1/0];for(let n=0,o=i.length;n<o;++n){const o=i[n];s=ct(t,e,o[0],2),r.push((s[0]+s[2])/2,(s[1]+s[3])/2),e=o[o.length-1]}return r}(this.flatCoordinates_,0,t);this.flatInteriorPoints_=function(t,e,i,n,r){let s=[];for(let n=0,o=i.length;n<o;++n){const o=i[n];s=tn(t,e,o,2,r,2*n,s),e=o[o.length-1]}return s}(this.flatCoordinates_,0,t,0,e)}return this.flatInteriorPoints_}getFlatMidpoint(){return this.flatMidpoints_||(this.flatMidpoints_=Ds(this.flatCoordinates_,0,this.flatCoordinates_.length,2,.5)),this.flatMidpoints_}getFlatMidpoints(){if(!this.flatMidpoints_){this.flatMidpoints_=[];const t=this.flatCoordinates_;let e=0;const i=this.ends_;for(let n=0,r=i.length;n<r;++n){const r=i[n],s=Ds(t,e,r,2,.5);a(this.flatMidpoints_,s),e=r}}return this.flatMidpoints_}getId(){return this.id_}getOrientedFlatCoordinates(){return this.flatCoordinates_}getGeometry(){return this}getSimplifiedGeometry(t){return this}simplifyTransformed(t,e){return this}getProperties(){return this.properties_}getPropertiesInternal(){return this.properties_}getStride(){return this.stride_}getStyleFunction(){return this.styleFunction}getType(){return this.type_}transform(t){const e=(t=Qe(t)).getExtent(),i=t.getWorldExtent();if(e&&i){const t=St(i)/St(e);Z(Os,i[0],i[3],t,-t,0,0,0),Mi(this.flatCoordinates_,0,this.flatCoordinates_.length,2,Os,this.flatCoordinates_)}}applyTransform(t){t(this.flatCoordinates_,this.flatCoordinates_,this.stride_)}clone(){return new Ns(this.type_,this.flatCoordinates_.slice(),this.ends_.slice(),this.stride_,Object.assign({},this.properties_),this.id_)}getEnds(){return this.ends_}enableSimplifyTransformed(){return this.simplifyTransformed=d(((t,e)=>{if(t===this.squaredTolerance_)return this.simplifiedGeometry_;this.simplifiedGeometry_=this.clone(),e&&this.simplifiedGeometry_.applyTransform(e);const i=this.simplifiedGeometry_.getFlatCoordinates();let n;switch(this.type_){case"LineString":i.length=Gi(i,0,this.simplifiedGeometry_.flatCoordinates_.length,this.simplifiedGeometry_.stride_,t,i,0),n=[i.length];break;case"MultiLineString":n=[],i.length=function(t,e,i,n,r,s,o,a){for(let l=0,h=i.length;l<h;++l){const h=i[l];o=Gi(t,e,h,n,r,s,o),a.push(o),e=h}return o}(i,0,this.simplifiedGeometry_.ends_,this.simplifiedGeometry_.stride_,t,i,0,n);break;case"Polygon":n=[],i.length=Xi(i,0,this.simplifiedGeometry_.ends_,this.simplifiedGeometry_.stride_,Math.sqrt(t),i,0,n)}return n&&(this.simplifiedGeometry_=new Ns(this.type_,i,n,2,this.properties_,this.id_)),this.squaredTolerance_=t,this.simplifiedGeometry_})),this}}Ns.prototype.getFlatCoordinates=Ns.prototype.getOrientedFlatCoordinates;const js=Ns,Gs="addfeature",Ws="removefeature";function zs(t,e){return[[-1/0,-1/0,1/0,1/0]]}function Xs(t,e){return function(i,n,r,s,o){const a=this;!function(t,e,i,n,r,s,o){const a=new XMLHttpRequest;a.open("GET","function"==typeof t?t(i,n,r):t,!0),"arraybuffer"==e.getType()&&(a.responseType="arraybuffer"),a.withCredentials=false,a.onload=function(t){if(!a.status||a.status>=200&&a.status<300){const t=e.getType();let n;"json"==t?n=JSON.parse(a.responseText):"text"==t?n=a.responseText:"xml"==t?(n=a.responseXML,n||(n=(new DOMParser).parseFromString(a.responseText,"application/xml"))):"arraybuffer"==t&&(n=a.response),n?s(e.readFeatures(n,{extent:i,featureProjection:r}),e.readProjection(n)):o()}else o()},a.onerror=o,a.send()}(t,e,i,n,r,(function(t,e){a.addFeatures(t),void 0!==s&&s(t)}),o||u)}}class Bs extends t{constructor(t,e,i){super(t),this.feature=e,this.features=i}}const qs="preload",Ys="useInterimTilesOnError",Hs=class extends pn{constructor(t){t=t||{};const e=Object.assign({},t);delete e.preload,delete e.useInterimTilesOnError,super(e),this.on,this.once,this.un,this.setPreload(void 0!==t.preload?t.preload:0),this.setUseInterimTilesOnError(void 0===t.useInterimTilesOnError||t.useInterimTilesOnError)}getPreload(){return this.get(qs)}setPreload(t){this.set(qs,t)}getUseInterimTilesOnError(){return this.get(Ys)}setUseInterimTilesOnError(t){this.set(Ys,t)}getData(t){return super.getData(t)}},Ks=class extends R{constructor(t){super(),this.ready=!0,this.boundHandleImageChange_=this.handleImageChange_.bind(this),this.layer_=t,this.declutterExecutorGroup=null}getFeatures(t){return I()}getData(t){return null}prepareFrame(t){return I()}renderFrame(t,e){return I()}loadedTileCallback(t,e,i){t[e]||(t[e]={}),t[e][i.tileCoord.toString()]=i}createLoadedTileFinder(t,e,i){return(n,r)=>{const s=this.loadedTileCallback.bind(this,i,n);return t.forEachLoadedTile(e,n,r,s)}}forEachFeatureAtCoordinate(t,e,i,n,r){}getLayer(){return this.layer_}handleFontsChanged(){}handleImageChange_(t){const e=t.target;2!==e.getState()&&3!==e.getState()||this.renderIfReadyAndVisible()}loadImage(t){let e=t.getState();return 2!=e&&3!=e&&t.addEventListener(m,this.boundHandleImageChange_),0==e&&(t.load(),e=t.getState()),2==e}renderIfReadyAndVisible(){const t=this.getLayer();t&&t.getVisible()&&"ready"===t.getSourceState()&&t.changed()}disposeInternal(){delete this.layer_,super.disposeInternal()}},Zs=[];let Vs=null;const Us=class extends Ks{constructor(t){super(t),this.container=null,this.renderedResolution,this.tempTransform=[1,0,0,1,0,0],this.pixelTransform=[1,0,0,1,0,0],this.inversePixelTransform=[1,0,0,1,0,0],this.context=null,this.containerReused=!1,this.pixelContext_=null,this.frameState=null}getImageData(t,e,i){let n;Vs||(Vs=Tn(1,1,void 0,{willReadFrequently:!0})),Vs.clearRect(0,0,1,1);try{Vs.drawImage(t,e,i,1,1,0,0,1,1),n=Vs.getImageData(0,0,1,1).data}catch(t){return Vs=null,null}return n}getBackground(t){let e=this.getLayer().getBackground();return"function"==typeof e&&(e=e(t.viewState.resolution)),e||void 0}useContainer(t,e,i){const n=this.getLayer().getClassName();let r,s;if(t&&t.className===n&&(!i||t&&t.style.backgroundColor&&l(ne(t.style.backgroundColor),ne(i)))){const e=t.firstElementChild;e instanceof HTMLCanvasElement&&(s=e.getContext("2d"))}if(s&&s.canvas.style.transform===e?(this.container=t,this.context=s,this.containerReused=!0):this.containerReused?(this.container=null,this.context=null,this.containerReused=!1):this.container&&(this.container.style.backgroundColor=null),!this.container){r=document.createElement("div"),r.className=n;let t=r.style;t.position="absolute",t.width="100%",t.height="100%",s=Tn();const e=s.canvas;r.appendChild(e),t=e.style,t.position="absolute",t.left="0",t.transformOrigin="top left",this.container=r,this.context=s}this.containerReused||!i||this.container.style.backgroundColor||(this.container.style.backgroundColor=i)}clipUnrotated(t,e,i){const n=bt(i),r=Tt(i),s=yt(i),o=_t(i);K(e.coordinateToPixelTransform,n),K(e.coordinateToPixelTransform,r),K(e.coordinateToPixelTransform,s),K(e.coordinateToPixelTransform,o);const a=this.inversePixelTransform;K(a,n),K(a,r),K(a,s),K(a,o),t.save(),t.beginPath(),t.moveTo(Math.round(n[0]),Math.round(n[1])),t.lineTo(Math.round(r[0]),Math.round(r[1])),t.lineTo(Math.round(s[0]),Math.round(s[1])),t.lineTo(Math.round(o[0]),Math.round(o[1])),t.clip()}dispatchRenderEvent_(t,e,i){const n=this.getLayer();if(n.hasListener(t)){const r=new yn(t,this.inversePixelTransform,i,e);n.dispatchEvent(r)}}preRender(t,e){this.frameState=e,this.dispatchRenderEvent_(ye,t,e)}postRender(t,e){this.dispatchRenderEvent_(ve,t,e)}getRenderTransform(t,e,i,n,r,s,o){const a=r/2,l=s/2,h=n/e,c=-h,u=-t[0]+o,d=-t[1];return Z(this.tempTransform,a,l,h,c,-i,u,d)}disposeInternal(){delete this.frameState,super.disposeInternal()}},$s=class extends Us{constructor(t){super(t),this.extentChanged=!0,this.renderedExtent_=null,this.renderedPixelRatio,this.renderedProjection=null,this.renderedRevision,this.renderedTiles=[],this.newTiles_=!1,this.tmpExtent=[1/0,1/0,-1/0,-1/0],this.tmpTileRange_=new vs(0,0,0,0)}isDrawableTile(t){const e=this.getLayer(),i=t.getState(),n=e.getUseInterimTilesOnError();return 2==i||4==i||3==i&&!n}getTile(t,e,i,n){const r=n.pixelRatio,s=n.viewState.projection,o=this.getLayer();let a=o.getSource().getTile(t,e,i,r,s);return 3==a.getState()&&o.getUseInterimTilesOnError()&&o.getPreload()>0&&(this.newTiles_=!0),this.isDrawableTile(a)||(a=a.getInterimTile()),a}getData(t){const e=this.frameState;if(!e)return null;const i=this.getLayer(),n=K(e.pixelToCoordinateTransform,t.slice()),r=i.getExtent();if(r&&!nt(r,n))return null;const s=e.pixelRatio,o=e.viewState.projection,a=e.viewState,l=i.getRenderSource(),h=l.getTileGridForProjection(a.projection),c=l.getTilePixelRatio(e.pixelRatio);for(let t=h.getZForResolution(a.resolution);t>=h.getMinZoom();--t){const e=h.getTileCoordForCoordAndZ(n,t),i=l.getTile(t,e[1],e[2],s,o);if(!(i instanceof is||i instanceof hs)||i instanceof hs&&4===i.getState())return null;if(2!==i.getState())continue;const r=h.getOrigin(t),u=Ur(h.getTileSize(t)),d=h.getResolution(t),g=Math.floor(c*((n[0]-r[0])/d-e[1]*u[0])),f=Math.floor(c*((r[1]-n[1])/d-e[2]*u[1])),p=Math.round(c*l.getGutterForProjection(a.projection));return this.getImageData(i.getImage(),g+p,f+p)}return null}loadedTileCallback(t,e,i){return!!this.isDrawableTile(i)&&super.loadedTileCallback(t,e,i)}prepareFrame(t){return!!this.getLayer().getSource()}renderFrame(t,e){const i=t.layerStatesArray[t.layerIndex],n=t.viewState,s=n.projection,o=n.resolution,a=n.center,l=n.rotation,h=t.pixelRatio,c=this.getLayer(),u=c.getSource(),d=u.getRevision(),g=u.getTileGridForProjection(s),f=g.getZForResolution(o,u.zDirection),p=g.getResolution(f);let m=t.extent;const _=t.viewState.resolution,y=u.getTilePixelRatio(h),v=Math.round(Rt(m)/_*h),x=Math.round(St(m)/_*h),w=i.extent&&gi(i.extent,s);w&&(m=Et(m,gi(i.extent,s)));const C=p*v/2/y,S=p*x/2/y,E=[a[0]-C,a[1]-S,a[0]+C,a[1]+S],b=g.getTileRangeForExtentAndZ(m,f),T={};T[f]={};const R=this.createLoadedTileFinder(u,s,T),I=this.tmpExtent,M=this.tmpTileRange_;this.newTiles_=!1;const L=l?Ct(n.center,_,l,t.size):void 0;for(let e=b.minX;e<=b.maxX;++e)for(let n=b.minY;n<=b.maxY;++n){if(l&&!g.tileCoordIntersectsViewport([f,e,n],L))continue;const r=this.getTile(f,e,n,t);if(this.isDrawableTile(r)){const e=k(this);if(2==r.getState()){T[f][r.tileCoord.toString()]=r;let t=r.inTransition(e);t&&1!==i.opacity&&(r.endTransition(e),t=!1),this.newTiles_||!t&&this.renderedTiles.includes(r)||(this.newTiles_=!0)}if(1===r.getAlpha(e,t.time))continue}const s=g.getTileCoordChildTileRange(r.tileCoord,M,I);let o=!1;s&&(o=R(f+1,s)),o||g.forEachTileCoordParentTileRange(r.tileCoord,R,M,I)}const A=p/o*h/y;Z(this.pixelTransform,t.size[0]/2,t.size[1]/2,1/h,1/h,l,-v/2,-x/2);const P=$(this.pixelTransform);this.useContainer(e,P,this.getBackground(t));const F=this.context,D=F.canvas;V(this.inversePixelTransform,this.pixelTransform),Z(this.tempTransform,v/2,x/2,A,A,0,-v/2,-x/2),D.width!=v||D.height!=x?(D.width=v,D.height=x):this.containerReused||F.clearRect(0,0,v,x),w&&this.clipUnrotated(F,t,w),u.getInterpolate()||(F.imageSmoothingEnabled=!1),this.preRender(F,t),this.renderedTiles.length=0;let O,N,j,G=Object.keys(T).map(Number);G.sort(r),1!==i.opacity||this.containerReused&&!u.getOpaque(t.viewState.projection)?(O=[],N=[]):G=G.reverse();for(let e=G.length-1;e>=0;--e){const i=G[e],n=u.getTilePixelSize(i,h,s),r=g.getResolution(i)/p,o=n[0]*r*A,a=n[1]*r*A,l=g.getTileCoordForCoordAndZ(bt(E),i),c=g.getTileCoordExtent(l),d=K(this.tempTransform,[y*(c[0]-E[0])/p,y*(E[3]-c[3])/p]),m=y*u.getGutterForProjection(s),_=T[i];for(const e in _){const n=_[e],r=n.tileCoord,s=l[1]-r[1],h=Math.round(d[0]-(s-1)*o),c=l[2]-r[2],g=Math.round(d[1]-(c-1)*a),p=Math.round(d[0]-s*o),y=Math.round(d[1]-c*a),v=h-p,x=g-y,w=f===i,C=w&&1!==n.getAlpha(k(this),t.time);let S=!1;if(!C)if(O){j=[p,y,p+v,y,p+v,y+x,p,y+x];for(let t=0,e=O.length;t<e;++t)if(f!==i&&i<N[t]){const e=O[t];It([p,y,p+v,y+x],[e[0],e[3],e[4],e[7]])&&(S||(F.save(),S=!0),F.beginPath(),F.moveTo(j[0],j[1]),F.lineTo(j[2],j[3]),F.lineTo(j[4],j[5]),F.lineTo(j[6],j[7]),F.moveTo(e[6],e[7]),F.lineTo(e[4],e[5]),F.lineTo(e[2],e[3]),F.lineTo(e[0],e[1]),F.clip())}O.push(j),N.push(i)}else F.clearRect(p,y,v,x);this.drawTileImage(n,t,p,y,v,x,m,w),O&&!C?(S&&F.restore(),this.renderedTiles.unshift(n)):this.renderedTiles.push(n),this.updateUsedTiles(t.usedTiles,u,n)}}return this.renderedRevision=d,this.renderedResolution=p,this.extentChanged=!this.renderedExtent_||!ut(this.renderedExtent_,E),this.renderedExtent_=E,this.renderedPixelRatio=h,this.renderedProjection=s,this.manageTilePyramid(t,u,g,h,s,m,f,c.getPreload()),this.scheduleExpireCache(t,u),this.postRender(F,t),i.extent&&F.restore(),F.imageSmoothingEnabled=!0,P!==D.style.transform&&(D.style.transform=P),this.container}drawTileImage(t,e,i,n,r,s,o,a){const l=this.getTileImage(t);if(!l)return;const h=k(this),c=e.layerStatesArray[e.layerIndex],u=c.opacity*(a?t.getAlpha(h,e.time):1),d=u!==this.context.globalAlpha;d&&(this.context.save(),this.context.globalAlpha=u),this.context.drawImage(l,o,o,l.width-2*o,l.height-2*o,i,n,r,s),d&&this.context.restore(),u!==c.opacity?e.animate=!0:a&&t.endTransition(h)}getImage(){const t=this.context;return t?t.canvas:null}getTileImage(t){return t.getImage()}scheduleExpireCache(t,e){if(e.canExpireCache()){const i=function(t,e,i){const n=k(t);n in i.usedTiles&&t.expireCache(i.viewState.projection,i.usedTiles[n])}.bind(null,e);t.postRenderFunctions.push(i)}}updateUsedTiles(t,e,i){const n=k(e);n in t||(t[n]={}),t[n][i.getKey()]=!0}manageTilePyramid(t,e,i,n,r,s,o,a,l){const h=k(e);h in t.wantedTiles||(t.wantedTiles[h]={});const c=t.wantedTiles[h],u=t.tileQueue,d=i.getMinZoom(),g=t.viewState.rotation,f=g?Ct(t.viewState.center,t.viewState.resolution,g,t.size):void 0;let p,m,_,y,v,x,w=0;for(x=d;x<=o;++x)for(m=i.getTileRangeForExtentAndZ(s,x,m),_=i.getResolution(x),y=m.minX;y<=m.maxX;++y)for(v=m.minY;v<=m.maxY;++v)g&&!i.tileCoordIntersectsViewport([x,y,v],f)||(o-x<=a?(++w,p=e.getTile(x,y,v,n,r),0==p.getState()&&(c[p.getKey()]=!0,u.isKeyQueued(p.getKey())||u.enqueue([p,h,i.getTileCoordCenter(p.tileCoord),_])),void 0!==l&&l(p)):e.useTile(x,y,v,r));e.updateCacheSize(w,r)}};class Js{constructor(t){this.opacity_=t.opacity,this.rotateWithView_=t.rotateWithView,this.rotation_=t.rotation,this.scale_=t.scale,this.scaleArray_=Ur(t.scale),this.displacement_=t.displacement,this.declutterMode_=t.declutterMode}clone(){const t=this.getScale();return new Js({opacity:this.getOpacity(),scale:Array.isArray(t)?t.slice():t,rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),displacement:this.getDisplacement().slice(),declutterMode:this.getDeclutterMode()})}getOpacity(){return this.opacity_}getRotateWithView(){return this.rotateWithView_}getRotation(){return this.rotation_}getScale(){return this.scale_}getScaleArray(){return this.scaleArray_}getDisplacement(){return this.displacement_}getDeclutterMode(){return this.declutterMode_}getAnchor(){return I()}getImage(t){return I()}getHitDetectionImage(){return I()}getPixelRatio(t){return 1}getImageState(){return I()}getImageSize(){return I()}getOrigin(){return I()}getSize(){return I()}setDisplacement(t){this.displacement_=t}setOpacity(t){this.opacity_=t}setRotateWithView(t){this.rotateWithView_=t}setRotation(t){this.rotation_=t}setScale(t){this.scale_=t,this.scaleArray_=Ur(t)}listenImageChange(t){I()}load(){I()}unlistenImageChange(t){I()}}const Qs=Js;function to(t){return Array.isArray(t)?se(t):t}class eo extends Qs{constructor(t){super({opacity:1,rotateWithView:void 0!==t.rotateWithView&&t.rotateWithView,rotation:void 0!==t.rotation?t.rotation:0,scale:void 0!==t.scale?t.scale:1,displacement:void 0!==t.displacement?t.displacement:[0,0],declutterMode:t.declutterMode}),this.canvases_,this.hitDetectionCanvas_=null,this.fill_=void 0!==t.fill?t.fill:null,this.origin_=[0,0],this.points_=t.points,this.radius_=void 0!==t.radius?t.radius:t.radius1,this.radius2_=t.radius2,this.angle_=void 0!==t.angle?t.angle:0,this.stroke_=void 0!==t.stroke?t.stroke:null,this.size_,this.renderOptions_,this.render()}clone(){const t=this.getScale(),e=new eo({fill:this.getFill()?this.getFill().clone():void 0,points:this.getPoints(),radius:this.getRadius(),radius2:this.getRadius2(),angle:this.getAngle(),stroke:this.getStroke()?this.getStroke().clone():void 0,rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),scale:Array.isArray(t)?t.slice():t,displacement:this.getDisplacement().slice(),declutterMode:this.getDeclutterMode()});return e.setOpacity(this.getOpacity()),e}getAnchor(){const t=this.size_,e=this.getDisplacement(),i=this.getScaleArray();return[t[0]/2-e[0]/i[0],t[1]/2+e[1]/i[1]]}getAngle(){return this.angle_}getFill(){return this.fill_}setFill(t){this.fill_=t,this.render()}getHitDetectionImage(){return this.hitDetectionCanvas_||(this.hitDetectionCanvas_=this.createHitDetectionCanvas_(this.renderOptions_)),this.hitDetectionCanvas_}getImage(t){let e=this.canvases_[t];if(!e){const i=this.renderOptions_,n=Tn(i.size*t,i.size*t);this.draw_(i,n,t),e=n.canvas,this.canvases_[t]=e}return e}getPixelRatio(t){return t}getImageSize(){return this.size_}getImageState(){return 2}getOrigin(){return this.origin_}getPoints(){return this.points_}getRadius(){return this.radius_}getRadius2(){return this.radius2_}getSize(){return this.size_}getStroke(){return this.stroke_}setStroke(t){this.stroke_=t,this.render()}listenImageChange(t){}load(){}unlistenImageChange(t){}calculateLineJoinSize_(t,e,i){if(0===e||this.points_===1/0||"bevel"!==t&&"miter"!==t)return e;let n=this.radius_,r=void 0===this.radius2_?n:this.radius2_;if(n<r){const t=n;n=r,r=t}const s=void 0===this.radius2_?this.points_:2*this.points_,o=2*Math.PI/s,a=r*Math.sin(o),l=n-Math.sqrt(r*r-a*a),h=Math.sqrt(a*a+l*l),c=h/a;if("miter"===t&&c<=i)return c*e;const u=e/2/c,d=e/2*(l/h),g=Math.sqrt((n+u)*(n+u)+d*d)-n;if(void 0===this.radius2_||"bevel"===t)return 2*g;const f=n*Math.sin(o),p=r-Math.sqrt(n*n-f*f),m=Math.sqrt(f*f+p*p)/f;if(m<=i){const t=m*e/2-r-n;return 2*Math.max(g,t)}return 2*g}createRenderOptions(){let t,e=An,i=Fn,n=0,r=null,s=0,o=0;this.stroke_&&(t=to(this.stroke_.getColor()??Dn),o=this.stroke_.getWidth()??1,r=this.stroke_.getLineDash(),s=this.stroke_.getLineDashOffset()??0,i=this.stroke_.getLineJoin()??Fn,e=this.stroke_.getLineCap()??An,n=this.stroke_.getMiterLimit()??10);const a=this.calculateLineJoinSize_(i,o,n),l=Math.max(this.radius_,this.radius2_||0);return{strokeStyle:t,strokeWidth:o,size:Math.ceil(2*l+a),lineCap:e,lineDash:r,lineDashOffset:s,lineJoin:i,miterLimit:n}}render(){this.renderOptions_=this.createRenderOptions();const t=this.renderOptions_.size;this.canvases_={},this.hitDetectionCanvas_=null,this.size_=[t,t]}draw_(t,e,i){if(e.scale(i,i),e.translate(t.size/2,t.size/2),this.createPath_(e),this.fill_){let t=this.fill_.getColor();null===t&&(t=Ln),e.fillStyle=to(t),e.fill()}t.strokeStyle&&(e.strokeStyle=t.strokeStyle,e.lineWidth=t.strokeWidth,t.lineDash&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.lineCap=t.lineCap,e.lineJoin=t.lineJoin,e.miterLimit=t.miterLimit,e.stroke())}createHitDetectionCanvas_(t){let e;if(this.fill_){let i=this.fill_.getColor(),n=0;"string"==typeof i&&(i=ne(i)),null===i?n=1:Array.isArray(i)&&(n=4===i.length?i[3]:1),0===n&&(e=Tn(t.size,t.size),this.drawHitDetectionCanvas_(t,e))}return e?e.canvas:this.getImage(1)}createPath_(t){let e=this.points_;const i=this.radius_;if(e===1/0)t.arc(0,0,i,0,2*Math.PI);else{const n=void 0===this.radius2_?i:this.radius2_;void 0!==this.radius2_&&(e*=2);const r=this.angle_-Math.PI/2,s=2*Math.PI/e;for(let o=0;o<e;o++){const e=r+o*s,a=o%2==0?i:n;t.lineTo(a*Math.cos(e),a*Math.sin(e))}t.closePath()}}drawHitDetectionCanvas_(t,e){e.translate(t.size/2,t.size/2),this.createPath_(e),e.fillStyle=Ln,e.fill(),t.strokeStyle&&(e.strokeStyle=t.strokeStyle,e.lineWidth=t.strokeWidth,t.lineDash&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.lineJoin=t.lineJoin,e.miterLimit=t.miterLimit,e.stroke())}}const io=eo;class no extends io{constructor(t){super({points:1/0,fill:(t=t||{radius:5}).fill,radius:t.radius,stroke:t.stroke,scale:void 0!==t.scale?t.scale:1,rotation:void 0!==t.rotation?t.rotation:0,rotateWithView:void 0!==t.rotateWithView&&t.rotateWithView,displacement:void 0!==t.displacement?t.displacement:[0,0],declutterMode:t.declutterMode})}clone(){const t=this.getScale(),e=new no({fill:this.getFill()?this.getFill().clone():void 0,stroke:this.getStroke()?this.getStroke().clone():void 0,radius:this.getRadius(),scale:Array.isArray(t)?t.slice():t,rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),displacement:this.getDisplacement().slice(),declutterMode:this.getDeclutterMode()});return e.setOpacity(this.getOpacity()),e}setRadius(t){this.radius_=t,this.render()}}const ro=no;class so{constructor(t){t=t||{},this.color_=void 0!==t.color?t.color:null}clone(){const t=this.getColor();return new so({color:Array.isArray(t)?t.slice():t||void 0})}getColor(){return this.color_}setColor(t){this.color_=t}}const oo=so;class ao{constructor(t){t=t||{},this.color_=void 0!==t.color?t.color:null,this.lineCap_=t.lineCap,this.lineDash_=void 0!==t.lineDash?t.lineDash:null,this.lineDashOffset_=t.lineDashOffset,this.lineJoin_=t.lineJoin,this.miterLimit_=t.miterLimit,this.width_=t.width}clone(){const t=this.getColor();return new ao({color:Array.isArray(t)?t.slice():t||void 0,lineCap:this.getLineCap(),lineDash:this.getLineDash()?this.getLineDash().slice():void 0,lineDashOffset:this.getLineDashOffset(),lineJoin:this.getLineJoin(),miterLimit:this.getMiterLimit(),width:this.getWidth()})}getColor(){return this.color_}getLineCap(){return this.lineCap_}getLineDash(){return this.lineDash_}getLineDashOffset(){return this.lineDashOffset_}getLineJoin(){return this.lineJoin_}getMiterLimit(){return this.miterLimit_}getWidth(){return this.width_}setColor(t){this.color_=t}setLineCap(t){this.lineCap_=t}setLineDash(t){this.lineDash_=t}setLineDashOffset(t){this.lineDashOffset_=t}setLineJoin(t){this.lineJoin_=t}setMiterLimit(t){this.miterLimit_=t}setWidth(t){this.width_=t}}const lo=ao;class ho{constructor(t){t=t||{},this.geometry_=null,this.geometryFunction_=go,void 0!==t.geometry&&this.setGeometry(t.geometry),this.fill_=void 0!==t.fill?t.fill:null,this.image_=void 0!==t.image?t.image:null,this.renderer_=void 0!==t.renderer?t.renderer:null,this.hitDetectionRenderer_=void 0!==t.hitDetectionRenderer?t.hitDetectionRenderer:null,this.stroke_=void 0!==t.stroke?t.stroke:null,this.text_=void 0!==t.text?t.text:null,this.zIndex_=t.zIndex}clone(){let t=this.getGeometry();return t&&"object"==typeof t&&(t=t.clone()),new ho({geometry:t??void 0,fill:this.getFill()?this.getFill().clone():void 0,image:this.getImage()?this.getImage().clone():void 0,renderer:this.getRenderer()??void 0,stroke:this.getStroke()?this.getStroke().clone():void 0,text:this.getText()?this.getText().clone():void 0,zIndex:this.getZIndex()})}getRenderer(){return this.renderer_}setRenderer(t){this.renderer_=t}setHitDetectionRenderer(t){this.hitDetectionRenderer_=t}getHitDetectionRenderer(){return this.hitDetectionRenderer_}getGeometry(){return this.geometry_}getGeometryFunction(){return this.geometryFunction_}getFill(){return this.fill_}setFill(t){this.fill_=t}getImage(){return this.image_}setImage(t){this.image_=t}getStroke(){return this.stroke_}setStroke(t){this.stroke_=t}getText(){return this.text_}setText(t){this.text_=t}getZIndex(){return this.zIndex_}setGeometry(t){"function"==typeof t?this.geometryFunction_=t:"string"==typeof t?this.geometryFunction_=function(e){return e.get(t)}:t?void 0!==t&&(this.geometryFunction_=function(){return t}):this.geometryFunction_=go,this.geometry_=t}setZIndex(t){this.zIndex_=t}}let co=null;function uo(t,e){if(!co){const t=new oo({color:"rgba(255,255,255,0.4)"}),e=new lo({color:"#3399CC",width:1.25});co=[new ho({image:new ro({fill:t,stroke:e,radius:5}),fill:t,stroke:e})]}return co}function go(t){return t.getGeometry()}const fo=ho;let po=null;class mo extends p{constructor(t,e,i,n,r){super(),this.hitDetectionImage_=null,this.image_=t,this.crossOrigin_=i,this.canvas_={},this.color_=r,this.imageState_=void 0===n?0:n,this.size_=t&&t.width&&t.height?[t.width,t.height]:null,this.src_=e,this.tainted_}initializeImage_(){this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)}isTainted_(){if(void 0===this.tainted_&&2===this.imageState_){po||(po=Tn(1,1,void 0,{willReadFrequently:!0})),po.drawImage(this.image_,0,0);try{po.getImageData(0,0,1,1),this.tainted_=!1}catch(t){po=null,this.tainted_=!0}}return!0===this.tainted_}dispatchChangeEvent_(){this.dispatchEvent(m)}handleImageError_(){this.imageState_=3,this.dispatchChangeEvent_()}handleImageLoad_(){this.imageState_=2,this.size_=[this.image_.width,this.image_.height],this.dispatchChangeEvent_()}getImage(t){return this.image_||this.initializeImage_(),this.replaceColor_(t),this.canvas_[t]?this.canvas_[t]:this.image_}getPixelRatio(t){return this.replaceColor_(t),this.canvas_[t]?t:1}getImageState(){return this.imageState_}getHitDetectionImage(){if(this.image_||this.initializeImage_(),!this.hitDetectionImage_)if(this.isTainted_()){const t=this.size_[0],e=this.size_[1],i=Tn(t,e);i.fillRect(0,0,t,e),this.hitDetectionImage_=i.canvas}else this.hitDetectionImage_=this.image_;return this.hitDetectionImage_}getSize(){return this.size_}getSrc(){return this.src_}load(){if(0===this.imageState_){this.image_||this.initializeImage_(),this.imageState_=1;try{void 0!==this.src_&&(this.image_.src=this.src_)}catch(t){this.handleImageError_()}this.image_ instanceof HTMLImageElement&&(t=this.image_,e=this.src_,e&&(t.src=e),t.src&&q?new Promise(((e,i)=>t.decode().then((()=>e(t))).catch((n=>t.complete&&t.width?e(t):i(n))))):function(t,e){return new Promise(((e,i)=>{function n(){s(),e(t)}function r(){s(),i(new Error("Image load error"))}function s(){t.removeEventListener("load",n),t.removeEventListener("error",r)}t.addEventListener("load",n),t.addEventListener("error",r)}))}(t)).then((t=>{this.image_=t,this.handleImageLoad_()})).catch(this.handleImageError_.bind(this))}var t,e}replaceColor_(t){if(!this.color_||this.canvas_[t]||2!==this.imageState_)return;const e=this.image_,i=document.createElement("canvas");i.width=Math.ceil(e.width*t),i.height=Math.ceil(e.height*t);const n=i.getContext("2d");n.scale(t,t),n.drawImage(e,0,0),n.globalCompositeOperation="multiply",n.fillStyle=Ut(this.color_),n.fillRect(0,0,i.width/t,i.height/t),n.globalCompositeOperation="destination-in",n.drawImage(e,0,0),this.canvas_[t]=i}}function _o(t,e,i,n){return void 0!==i&&void 0!==n?[i/t,n/e]:void 0!==i?i/t:void 0!==n?n/e:1}class yo extends Qs{constructor(t){const e=void 0!==(t=t||{}).opacity?t.opacity:1,i=void 0!==t.rotation?t.rotation:0,n=void 0!==t.scale?t.scale:1,r=void 0!==t.rotateWithView&&t.rotateWithView;super({opacity:e,rotation:i,scale:n,displacement:void 0!==t.displacement?t.displacement:[0,0],rotateWithView:r,declutterMode:t.declutterMode}),this.anchor_=void 0!==t.anchor?t.anchor:[.5,.5],this.normalizedAnchor_=null,this.anchorOrigin_=void 0!==t.anchorOrigin?t.anchorOrigin:"top-left",this.anchorXUnits_=void 0!==t.anchorXUnits?t.anchorXUnits:"fraction",this.anchorYUnits_=void 0!==t.anchorYUnits?t.anchorYUnits:"fraction",this.crossOrigin_=void 0!==t.crossOrigin?t.crossOrigin:null;const s=void 0!==t.img?t.img:null;let o,a=t.src;if(H(!(void 0!==a&&s),"`image` and `src` cannot be provided at the same time"),void 0!==a&&0!==a.length||!s||(a=s.src||k(s)),H(void 0!==a&&a.length>0,"A defined and non-empty `src` or `image` must be provided"),H(!((void 0!==t.width||void 0!==t.height)&&void 0!==t.scale),"`width` or `height` cannot be provided together with `scale`"),void 0!==t.src?o=0:void 0!==s&&(o=s instanceof HTMLImageElement?s.complete?s.src?2:0:1:2),this.color_=void 0!==t.color?ne(t.color):null,this.iconImage_=function(t,e,i,n,r){let s=void 0===e?void 0:ae.get(e,i,r);return s||(s=new mo(t,t instanceof HTMLImageElement?t.src||void 0:e,i,n,r),ae.set(e,i,r,s)),s}(s,a,this.crossOrigin_,o,this.color_),this.offset_=void 0!==t.offset?t.offset:[0,0],this.offsetOrigin_=void 0!==t.offsetOrigin?t.offsetOrigin:"top-left",this.origin_=null,this.size_=void 0!==t.size?t.size:null,void 0!==t.width||void 0!==t.height){let e,i;if(t.size)[e,i]=t.size;else{const n=this.getImage(1);if(n.width&&n.height)e=n.width,i=n.height;else if(n instanceof HTMLImageElement){this.initialOptions_=t;const e=()=>{if(this.unlistenImageChange(e),!this.initialOptions_)return;const i=this.iconImage_.getSize();this.setScale(_o(i[0],i[1],t.width,t.height))};return void this.listenImageChange(e)}}void 0!==e&&this.setScale(_o(e,i,t.width,t.height))}}clone(){let t,e,i;return this.initialOptions_?(e=this.initialOptions_.width,i=this.initialOptions_.height):(t=this.getScale(),t=Array.isArray(t)?t.slice():t),new yo({anchor:this.anchor_.slice(),anchorOrigin:this.anchorOrigin_,anchorXUnits:this.anchorXUnits_,anchorYUnits:this.anchorYUnits_,color:this.color_&&this.color_.slice?this.color_.slice():this.color_||void 0,crossOrigin:this.crossOrigin_,offset:this.offset_.slice(),offsetOrigin:this.offsetOrigin_,opacity:this.getOpacity(),rotateWithView:this.getRotateWithView(),rotation:this.getRotation(),scale:t,width:e,height:i,size:null!==this.size_?this.size_.slice():void 0,src:this.getSrc(),displacement:this.getDisplacement().slice(),declutterMode:this.getDeclutterMode()})}getAnchor(){let t=this.normalizedAnchor_;if(!t){t=this.anchor_;const e=this.getSize();if("fraction"==this.anchorXUnits_||"fraction"==this.anchorYUnits_){if(!e)return null;t=this.anchor_.slice(),"fraction"==this.anchorXUnits_&&(t[0]*=e[0]),"fraction"==this.anchorYUnits_&&(t[1]*=e[1])}if("top-left"!=this.anchorOrigin_){if(!e)return null;t===this.anchor_&&(t=this.anchor_.slice()),"top-right"!=this.anchorOrigin_&&"bottom-right"!=this.anchorOrigin_||(t[0]=-t[0]+e[0]),"bottom-left"!=this.anchorOrigin_&&"bottom-right"!=this.anchorOrigin_||(t[1]=-t[1]+e[1])}this.normalizedAnchor_=t}const e=this.getDisplacement(),i=this.getScaleArray();return[t[0]-e[0]/i[0],t[1]+e[1]/i[1]]}setAnchor(t){this.anchor_=t,this.normalizedAnchor_=null}getColor(){return this.color_}getImage(t){return this.iconImage_.getImage(t)}getPixelRatio(t){return this.iconImage_.getPixelRatio(t)}getImageSize(){return this.iconImage_.getSize()}getImageState(){return this.iconImage_.getImageState()}getHitDetectionImage(){return this.iconImage_.getHitDetectionImage()}getOrigin(){if(this.origin_)return this.origin_;let t=this.offset_;if("top-left"!=this.offsetOrigin_){const e=this.getSize(),i=this.iconImage_.getSize();if(!e||!i)return null;t=t.slice(),"top-right"!=this.offsetOrigin_&&"bottom-right"!=this.offsetOrigin_||(t[0]=i[0]-e[0]-t[0]),"bottom-left"!=this.offsetOrigin_&&"bottom-right"!=this.offsetOrigin_||(t[1]=i[1]-e[1]-t[1])}return this.origin_=t,this.origin_}getSrc(){return this.iconImage_.getSrc()}getSize(){return this.size_?this.size_:this.iconImage_.getSize()}getWidth(){const t=this.getScaleArray();return this.size_?this.size_[0]*t[0]:2==this.iconImage_.getImageState()?this.iconImage_.getSize()[0]*t[0]:void 0}getHeight(){const t=this.getScaleArray();return this.size_?this.size_[1]*t[1]:2==this.iconImage_.getImageState()?this.iconImage_.getSize()[1]*t[1]:void 0}setScale(t){delete this.initialOptions_,super.setScale(t)}listenImageChange(t){this.iconImage_.addEventListener(m,t)}load(){this.iconImage_.load()}unlistenImageChange(t){this.iconImage_.removeEventListener(m,t)}}const vo=yo;class xo{constructor(t){t=t||{},this.font_=t.font,this.rotation_=t.rotation,this.rotateWithView_=t.rotateWithView,this.scale_=t.scale,this.scaleArray_=Ur(void 0!==t.scale?t.scale:1),this.text_=t.text,this.textAlign_=t.textAlign,this.justify_=t.justify,this.repeat_=t.repeat,this.textBaseline_=t.textBaseline,this.fill_=void 0!==t.fill?t.fill:new oo({color:"#333"}),this.maxAngle_=void 0!==t.maxAngle?t.maxAngle:Math.PI/4,this.placement_=void 0!==t.placement?t.placement:"point",this.overflow_=!!t.overflow,this.stroke_=void 0!==t.stroke?t.stroke:null,this.offsetX_=void 0!==t.offsetX?t.offsetX:0,this.offsetY_=void 0!==t.offsetY?t.offsetY:0,this.backgroundFill_=t.backgroundFill?t.backgroundFill:null,this.backgroundStroke_=t.backgroundStroke?t.backgroundStroke:null,this.padding_=void 0===t.padding?null:t.padding}clone(){const t=this.getScale();return new xo({font:this.getFont(),placement:this.getPlacement(),repeat:this.getRepeat(),maxAngle:this.getMaxAngle(),overflow:this.getOverflow(),rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),scale:Array.isArray(t)?t.slice():t,text:this.getText(),textAlign:this.getTextAlign(),justify:this.getJustify(),textBaseline:this.getTextBaseline(),fill:this.getFill()?this.getFill().clone():void 0,stroke:this.getStroke()?this.getStroke().clone():void 0,offsetX:this.getOffsetX(),offsetY:this.getOffsetY(),backgroundFill:this.getBackgroundFill()?this.getBackgroundFill().clone():void 0,backgroundStroke:this.getBackgroundStroke()?this.getBackgroundStroke().clone():void 0,padding:this.getPadding()||void 0})}getOverflow(){return this.overflow_}getFont(){return this.font_}getMaxAngle(){return this.maxAngle_}getPlacement(){return this.placement_}getRepeat(){return this.repeat_}getOffsetX(){return this.offsetX_}getOffsetY(){return this.offsetY_}getFill(){return this.fill_}getRotateWithView(){return this.rotateWithView_}getRotation(){return this.rotation_}getScale(){return this.scale_}getScaleArray(){return this.scaleArray_}getStroke(){return this.stroke_}getText(){return this.text_}getTextAlign(){return this.textAlign_}getJustify(){return this.justify_}getTextBaseline(){return this.textBaseline_}getBackgroundFill(){return this.backgroundFill_}getBackgroundStroke(){return this.backgroundStroke_}getPadding(){return this.padding_}setOverflow(t){this.overflow_=t}setFont(t){this.font_=t}setMaxAngle(t){this.maxAngle_=t}setOffsetX(t){this.offsetX_=t}setOffsetY(t){this.offsetY_=t}setPlacement(t){this.placement_=t}setRepeat(t){this.repeat_=t}setRotateWithView(t){this.rotateWithView_=t}setFill(t){this.fill_=t}setRotation(t){this.rotation_=t}setScale(t){this.scale_=t,this.scaleArray_=Ur(void 0!==t?t:1)}setStroke(t){this.stroke_=t}setText(t){this.text_=t}setTextAlign(t){this.textAlign_=t}setJustify(t){this.justify_=t}setTextBaseline(t){this.textBaseline_=t}setBackgroundFill(t){this.backgroundFill_=t}setBackgroundStroke(t){this.backgroundStroke_=t}setPadding(t){this.padding_=t}}const wo=xo;let Co=0;const So=0,Eo=1<<Co++,bo=1<<Co++,To=1<<Co++,Ro=1<<Co++,Io=1<<Co++,Mo=Math.pow(2,5)-1,ko={[Eo]:"boolean",[bo]:"number",[To]:"string",[Ro]:"color",[Io]:"number[]"},Lo=Object.keys(ko).map(Number).sort(r);function Ao(t){const e=[];for(const n of Lo)(t&(i=n))===i&&e.push(ko[n]);var i;return 0===e.length?"untyped":e.length<3?e.join(" or "):e.slice(0,-1).join(", ")+", or "+e[e.length-1]}function Po(t,e){return!!(t&e)}function Fo(t,e){return t===e}class Do{constructor(t,e){this.type=t,this.value=e}}class Oo{constructor(t,e,...i){this.type=t,this.operator=e,this.args=i}}function No(){return{variables:new Set,properties:new Set,featureId:!1,style:{}}}function jo(t,e,i){switch(typeof t){case"boolean":return new Do(Eo,t);case"number":return new Do(bo,t);case"string":{let e=To;return function(t){try{return ie(t),!0}catch(t){return!1}}(t)&&(e|=Ro),Fo(e&i,So)||(e&=i),new Do(e,t)}}if(!Array.isArray(t))throw new Error("Expression must be an array or a primitive value");if(0===t.length)throw new Error("Empty expression");if("string"==typeof t[0])return function(t,e,i){const n=t[0],r=Wo[n];if(!r)throw new Error(`Unknown operator: ${n}`);return r(t,e,i)}(t,e,i);for(const e of t)if("number"!=typeof e)throw new Error("Expected an array of numbers");let n=Io;return 3!==t.length&&4!==t.length||(n|=Ro),i&&(n&=i),new Do(n,t)}const Go={Get:"get",Var:"var",Concat:"concat",GeometryType:"geometry-type",Any:"any",All:"all",Not:"!",Resolution:"resolution",Zoom:"zoom",Time:"time",Equal:"==",NotEqual:"!=",GreaterThan:">",GreaterThanOrEqualTo:">=",LessThan:"<",LessThanOrEqualTo:"<=",Multiply:"*",Divide:"/",Add:"+",Subtract:"-",Clamp:"clamp",Mod:"%",Pow:"^",Abs:"abs",Floor:"floor",Ceil:"ceil",Round:"round",Sin:"sin",Cos:"cos",Atan:"atan",Sqrt:"sqrt",Match:"match",Between:"between",Interpolate:"interpolate",Case:"case",In:"in",Number:"number",String:"string",Array:"array",Color:"color",Id:"id",Band:"band",Palette:"palette"},Wo={[Go.Get]:Ho((([t,e])=>void 0!==e?function(t){switch(t){case"string":return To;case"color":return Ro;case"number":return bo;case"boolean":return Eo;case"number[]":return Io;default:throw new Error(`Unrecognized type hint: ${t}`)}}(e.value):Mo),Xo(1,2),(function(t,e){const i=jo(t[1],e);if(!(i instanceof Do))throw new Error("Expected a literal argument for get operation");if("string"!=typeof i.value)throw new Error("Expected a string argument for get operation");return e.properties.add(i.value),3===t.length?[i,jo(t[2],e)]:[i]})),[Go.Var]:Ho((([t])=>t.type),Xo(1,1),(function(t,e,i,n){const r=t[1];if("string"!=typeof r)throw new Error("Expected a string argument for var operation");if(e.variables.add(r),!("variables"in e.style)||void 0===e.style.variables[r])return[new Do(Mo,r)];const s=jo(e.style.variables[r],e);if(s.value=r,n&&!Po(n,s.type))throw new Error(`The variable ${r} has type ${Ao(s.type)} but the following type was expected: ${Ao(n)}`);return[s]})),[Go.Id]:Ho(bo|To,zo,(function(t,e){e.featureId=!0})),[Go.Concat]:Ho(To,Xo(2,1/0),Bo(Mo)),[Go.GeometryType]:Ho(To,zo),[Go.Resolution]:Ho(bo,zo),[Go.Zoom]:Ho(bo,zo),[Go.Time]:Ho(bo,zo),[Go.Any]:Ho(Eo,Xo(2,1/0),Bo(Eo)),[Go.All]:Ho(Eo,Xo(2,1/0),Bo(Eo)),[Go.Not]:Ho(Eo,Xo(1,1),Bo(Eo)),[Go.Equal]:Ho(Eo,Xo(2,2),Bo(Mo),qo),[Go.NotEqual]:Ho(Eo,Xo(2,2),Bo(Mo),qo),[Go.GreaterThan]:Ho(Eo,Xo(2,2),Bo(Mo),qo),[Go.GreaterThanOrEqualTo]:Ho(Eo,Xo(2,2),Bo(Mo),qo),[Go.LessThan]:Ho(Eo,Xo(2,2),Bo(Mo),qo),[Go.LessThanOrEqualTo]:Ho(Eo,Xo(2,2),Bo(Mo),qo),[Go.Multiply]:Ho((t=>{let e=bo|Ro;for(let i=0;i<t.length;i++)e&=t[i].type;return e}),Xo(2,1/0),Bo(bo|Ro),qo),[Go.Divide]:Ho(bo,Xo(2,2),Bo(bo)),[Go.Add]:Ho(bo,Xo(2,1/0),Bo(bo)),[Go.Subtract]:Ho(bo,Xo(2,2),Bo(bo)),[Go.Clamp]:Ho(bo,Xo(3,3),Bo(bo)),[Go.Mod]:Ho(bo,Xo(2,2),Bo(bo)),[Go.Pow]:Ho(bo,Xo(2,2),Bo(bo)),[Go.Abs]:Ho(bo,Xo(1,1),Bo(bo)),[Go.Floor]:Ho(bo,Xo(1,1),Bo(bo)),[Go.Ceil]:Ho(bo,Xo(1,1),Bo(bo)),[Go.Round]:Ho(bo,Xo(1,1),Bo(bo)),[Go.Sin]:Ho(bo,Xo(1,1),Bo(bo)),[Go.Cos]:Ho(bo,Xo(1,1),Bo(bo)),[Go.Atan]:Ho(bo,Xo(1,2),Bo(bo)),[Go.Sqrt]:Ho(bo,Xo(1,1),Bo(bo)),[Go.Match]:Ho((t=>{let e=Mo;for(let i=2;i<t.length;i+=2)e&=t[i].type;return e&=t[t.length-1].type,e}),Xo(4,1/0),Yo,(function(t,e,i,n){const r=t.length-1;let s=jo(t[1],e).type;const o=jo(t[t.length-1],e);let a=void 0!==n?n&o.type:o.type;const l=new Array(r-2);for(let i=0;i<r-2;i+=2){const n=jo(t[i+2],e),r=jo(t[i+3],e);s&=n.type,a&=r.type,l[i]=n,l[i+1]=r}const h=To|bo|Eo;if(!Po(h,s))throw new Error(`Expected an input of type ${Ao(h)} for the interpolate operation, got ${Ao(s)} instead`);if(Fo(a,So))throw new Error("Could not find a common output type for the following match operation: "+JSON.stringify(t));for(let i=0;i<r-2;i+=2){const n=jo(t[i+2],e,s),r=jo(t[i+3],e,a);l[i]=n,l[i+1]=r}return[jo(t[1],e,s),...l,jo(t[t.length-1],e,a)]})),[Go.Between]:Ho(Eo,Xo(3,3),Bo(bo)),[Go.Interpolate]:Ho((t=>{let e=Ro|bo;for(let i=3;i<t.length;i+=2)e&=t[i].type;return e}),Xo(6,1/0),Yo,(function(t,e,i,n){const r=t[1];let s;switch(r[0]){case"linear":s=1;break;case"exponential":if(s=r[1],"number"!=typeof s)throw new Error(`Expected a number base for exponential interpolation, got ${JSON.stringify(s)} instead`);break;default:s=null}if(!s)throw new Error(`Invalid interpolation type: ${JSON.stringify(r)}`);s=jo(s,e);let o=jo(t[2],e);if(!Po(bo,o.type))throw new Error(`Expected an input of type number for the interpolate operation, got ${Ao(o.type)} instead`);o=jo(t[2],e,bo);const a=new Array(t.length-3);for(let i=0;i<a.length;i+=2){let n=jo(t[i+3],e);if(!Po(bo,n.type))throw new Error(`Expected all stop input values in the interpolate operation to be of type number, got ${Ao(n.type)} at position ${i+2} instead`);let r=jo(t[i+4],e);if(!Po(bo|Ro,r.type))throw new Error(`Expected all stop output values in the interpolate operation to be a number or color, got ${Ao(r.type)} at position ${i+3} instead`);n=jo(t[i+3],e,bo),r=jo(t[i+4],e,bo|Ro),a[i]=n,a[i+1]=r}return[s,o,...a]})),[Go.Case]:Ho((t=>{let e=Mo;for(let i=1;i<t.length;i+=2)e&=t[i].type;return e&=t[t.length-1].type,e}),Xo(3,1/0),(function(t,e){const i=t[0],n=t.length-1;if(n%2==0)throw new Error(`An odd amount of arguments was expected for operation ${i}, got ${JSON.stringify(n)} instead`)}),(function(t,e,i,n){const r=jo(t[t.length-1],e);let s=void 0!==n?n&r.type:r.type;const o=new Array(t.length-1);for(let i=0;i<o.length-1;i+=2){const n=jo(t[i+1],e),r=jo(t[i+2],e);if(!Po(Eo,n.type))throw new Error(`Expected all conditions in the case operation to be of type boolean, got ${Ao(n.type)} at position ${i} instead`);s&=r.type,o[i]=n,o[i+1]=r}if(Fo(s,So))throw new Error("Could not find a common output type for the following case operation: "+JSON.stringify(t));for(let i=0;i<o.length-1;i+=2)o[i+1]=jo(t[i+2],e,s);return o[o.length-1]=jo(t[t.length-1],e,s),o})),[Go.In]:Ho(Eo,Xo(2,2),(function(t,e){let i=t[2];if(!Array.isArray(i))throw new Error('The "in" operator was provided a literal value which was not an array as second argument.');if("string"==typeof i[0]){if("literal"!==i[0])throw new Error('For the "in" operator, a string array should be wrapped in a "literal" operator to disambiguate from expressions.');if(!Array.isArray(i[1]))throw new Error('The "in" operator was provided a literal value which was not an array as second argument.');i=i[1]}let n=To|bo;const r=new Array(i.length);for(let t=0;t<r.length;t++){const s=jo(i[t],e);n&=s.type,r[t]=s}if(Fo(n,So))throw new Error("Could not find a common type for the following in operation: "+JSON.stringify(t));return[jo(t[1],e,n),...r]})),[Go.Number]:Ho(bo,Xo(1,1/0),Bo(Mo)),[Go.String]:Ho(To,Xo(1,1/0),Bo(Mo)),[Go.Array]:Ho((t=>3===t.length||4===t.length?Io|Ro:Io),Xo(1,1/0),Bo(bo)),[Go.Color]:Ho(Ro,Xo(3,4),Bo(bo)),[Go.Band]:Ho(bo,Xo(1,3),Bo(bo)),[Go.Palette]:Ho(Ro,Xo(2,2),(function(t,e){const i=jo(t[1],e,bo);if(i.type!==bo)throw new Error(`The first argument of palette must be an number, got ${Ao(i.type)} instead`);const n=t[2];if(!Array.isArray(n))throw new Error("The second argument of palette must be an array");const r=new Array(n.length);for(let t=0;t<r.length;t++){const i=jo(n[t],e,Ro);if(!(i instanceof Do))throw new Error(`The palette color at index ${t} must be a literal value`);if(!Po(i.type,Ro))throw new Error(`The palette color at index ${t} should be of type color, got ${Ao(i.type)} instead`);r[t]=i}return[i,...r]}))};function zo(t,e){const i=t[0];if(1!==t.length)throw new Error(`Expected no arguments for ${i} operation`);return[]}function Xo(t,e){return function(i,n){const r=i[0],s=i.length-1;if(t===e){if(s!==t)throw new Error(`Expected ${t} argument${1===t?"":"s"} for ${r}, got ${s}`)}else if(s<t||s>e)throw new Error(`Expected ${e===1/0?`${t} or more`:`${t} to ${e}`} arguments for ${r}, got ${s}`)}}function Bo(t){return function(e,i){const n=e[0],r=e.length-1,s=new Array(r);for(let o=0;o<r;++o){const r=jo(e[o+1],i);if(!Po(t,r.type)){const e=Ao(t),i=Ao(r.type);throw new Error(`Unexpected type for argument ${o} of ${n} operation, got ${e} but expected ${i}`)}r.type&=t,s[o]=r}return s}}function qo(t,e,i){const n=t[0],r=t.length-1;let s=Mo;for(let t=0;t<i.length;++t)s&=i[t].type;if(s===So)throw new Error(`No common type could be found for arguments of ${n} operation`);const o=new Array(r);for(let i=0;i<r;++i)o[i]=jo(t[i+1],e,s);return o}function Yo(t,e){const i=t[0],n=t.length-1;if(n%2==1)throw new Error(`An even amount of arguments was expected for operation ${i}, got ${JSON.stringify(n)} instead`)}function Ho(t,...e){return function(i,n,r){const s=i[0];let o=[];for(let t=0;t<e.length;t++)o=e[t](i,n,o,r)||o;let a="function"==typeof t?t(o):t;if(void 0!==r){if(!Po(a,r))throw new Error(`The following expression was expected to return ${Ao(r)}, but returns ${Ao(a)} instead: ${JSON.stringify(i)}`);a&=r}if(a===So)throw new Error(`No matching type was found for the following expression: ${JSON.stringify(i)}`);return new Oo(a,s,...o)}}function Ko(t,e,i){const n=jo(t,i);if(!Po(e,n.type)){const t=Ao(e),i=Ao(n.type);throw new Error(`Expected expression to be of type ${t}, got ${i}`)}return Zo(n,i)}function Zo(t,e){if(t instanceof Do){if(t.type===Ro&&"string"==typeof t.value){const e=ie(t.value);return function(){return e}}return function(){return t.value}}const i=t.operator;switch(i){case Go.Number:case Go.String:return function(t,e){const i=t.operator,n=t.args.length,r=new Array(n);for(let i=0;i<n;++i)r[i]=Zo(t.args[i],e);switch(i){case Go.Number:case Go.String:return t=>{for(let e=0;e<n;++e){const n=r[e](t);if(typeof n===i)return n}throw new Error(`Expected one of the values to be a ${i}`)};default:throw new Error(`Unsupported assertion operator ${i}`)}}(t,e);case Go.Get:case Go.Var:return function(t,e){const i=t.args[0].value;switch(t.operator){case Go.Get:return t=>t.properties[i];case Go.Var:return t=>t.variables[i];default:throw new Error(`Unsupported accessor operator ${t.operator}`)}}(t);case Go.Id:return t=>t.featureId;case Go.Concat:{const i=t.args.map((t=>Zo(t,e)));return t=>"".concat(...i.map((e=>e(t).toString())))}case Go.Resolution:return t=>t.resolution;case Go.Any:case Go.All:case Go.Not:return function(t,e){const i=t.operator,n=t.args.length,r=new Array(n);for(let i=0;i<n;++i)r[i]=Zo(t.args[i],e);switch(i){case Go.Any:return t=>{for(let e=0;e<n;++e)if(r[e](t))return!0;return!1};case Go.All:return t=>{for(let e=0;e<n;++e)if(!r[e](t))return!1;return!0};case Go.Not:return t=>!r[0](t);default:throw new Error(`Unsupported logical operator ${i}`)}}(t,e);case Go.Equal:case Go.NotEqual:case Go.LessThan:case Go.LessThanOrEqualTo:case Go.GreaterThan:case Go.GreaterThanOrEqualTo:return function(t,e){const i=t.operator,n=Zo(t.args[0],e),r=Zo(t.args[1],e);switch(i){case Go.Equal:return t=>n(t)===r(t);case Go.NotEqual:return t=>n(t)!==r(t);case Go.LessThan:return t=>n(t)<r(t);case Go.LessThanOrEqualTo:return t=>n(t)<=r(t);case Go.GreaterThan:return t=>n(t)>r(t);case Go.GreaterThanOrEqualTo:return t=>n(t)>=r(t);default:throw new Error(`Unsupported comparison operator ${i}`)}}(t,e);case Go.Multiply:case Go.Divide:case Go.Add:case Go.Subtract:case Go.Clamp:case Go.Mod:case Go.Pow:case Go.Abs:case Go.Floor:case Go.Ceil:case Go.Round:case Go.Sin:case Go.Cos:case Go.Atan:case Go.Sqrt:return function(t,e){const i=t.operator,n=t.args.length,r=new Array(n);for(let i=0;i<n;++i)r[i]=Zo(t.args[i],e);switch(i){case Go.Multiply:return t=>{let e=1;for(let i=0;i<n;++i)e*=r[i](t);return e};case Go.Divide:return t=>r[0](t)/r[1](t);case Go.Add:return t=>{let e=0;for(let i=0;i<n;++i)e+=r[i](t);return e};case Go.Subtract:return t=>r[0](t)-r[1](t);case Go.Clamp:return t=>{const e=r[0](t),i=r[1](t);if(e<i)return i;const n=r[2](t);return e>n?n:e};case Go.Mod:return t=>r[0](t)%r[1](t);case Go.Pow:return t=>Math.pow(r[0](t),r[1](t));case Go.Abs:return t=>Math.abs(r[0](t));case Go.Floor:return t=>Math.floor(r[0](t));case Go.Ceil:return t=>Math.ceil(r[0](t));case Go.Round:return t=>Math.round(r[0](t));case Go.Sin:return t=>Math.sin(r[0](t));case Go.Cos:return t=>Math.cos(r[0](t));case Go.Atan:return 2===n?t=>Math.atan2(r[0](t),r[1](t)):t=>Math.atan(r[0](t));case Go.Sqrt:return t=>Math.sqrt(r[0](t));default:throw new Error(`Unsupported numeric operator ${i}`)}}(t,e);case Go.Match:return function(t,e){const i=t.args.length,n=new Array(i);for(let r=0;r<i;++r)n[r]=Zo(t.args[r],e);return t=>{const e=n[0](t);for(let r=1;r<i;r+=2)if(e===n[r](t))return n[r+1](t);return n[i-1](t)}}(t,e);case Go.Interpolate:return function(t,e){const i=t.args.length,n=new Array(i);for(let r=0;r<i;++r)n[r]=Zo(t.args[r],e);return t=>{const e=n[0](t),r=n[1](t);let s,o;for(let a=2;a<i;a+=2){const i=n[a](t);let l=n[a+1](t);const h=Array.isArray(l);if(h&&(l=te(l)),i>=r)return 2===a?l:h?Uo(e,r,s,o,i,l):Vo(e,r,s,o,i,l);s=i,o=l}return o}}(t,e);default:throw new Error(`Unsupported operator ${i}`)}}function Vo(t,e,i,n,r,s){const o=r-i;if(0===o)return n;const a=e-i;return n+(1===t?a/o:(Math.pow(t,a)-1)/(Math.pow(t,o)-1))*(s-n)}function Uo(t,e,i,n,r,s){if(0==r-i)return n;const o=ee(n),a=ee(s);let l=a[2]-o[2];return l>180?l-=360:l<-180&&(l+=360),re(function(t){const e=Pt.rgb(Ot.xyz(t));return e[3]=t[3],e}([Vo(t,e,i,o[0],r,a[0]),Vo(t,e,i,o[1],r,a[1]),o[2]+Vo(t,e,i,0,r,l),Vo(t,e,i,n[3],r,s[3])]))}function $o(t){return!0}function Jo(t){const e=No(),i=t.length,n=new Array(i);for(let r=0;r<i;++r)n[r]=Qo(t[r],e);const r={variables:{},properties:{},resolution:NaN,featureId:null},s=new Array(i);return function(t,o){if(r.properties=t.getPropertiesInternal(),r.resolution=o,e.featureId){const e=t.getId();r.featureId=void 0!==e?e:null}let a=0;for(let t=0;t<i;++t){const e=n[t](r);e&&(s[a]=e,a+=1)}return s.length=a,s}}function Qo(t,e){const i=ta(t,"",e),n=ea(t,"",e),r=function(t,e){const i="text-",n=na(t,i+"value",e);if(!n)return null;const r=ta(t,i,e),s=ta(t,i+"background-",e),o=ea(t,i,e),a=ea(t,i+"background-",e),l=na(t,i+"font",e),h=ia(t,i+"max-angle",e),c=ia(t,i+"offset-x",e),u=ia(t,i+"offset-y",e),d=ra(t,i+"overflow",e),g=na(t,i+"placement",e),f=ia(t,i+"repeat",e),p=la(t,i+"scale",e),m=ra(t,i+"rotate-with-view",e),_=ia(t,i+"rotation",e),y=na(t,i+"align",e),v=na(t,i+"justify",e),x=na(t,i+"baseline",e),w=oa(t,i+"padding",e),C=new wo({});return function(t){if(C.setText(n(t)),r&&C.setFill(r(t)),s&&C.setBackgroundFill(s(t)),o&&C.setStroke(o(t)),a&&C.setBackgroundStroke(a(t)),l&&C.setFont(l(t)),h&&C.setMaxAngle(h(t)),c&&C.setOffsetX(c(t)),u&&C.setOffsetY(u(t)),d&&C.setOverflow(d(t)),g){const e=g(t);if("point"!==e&&"line"!==e)throw new Error("Expected point or line for text-placement");C.setPlacement(e)}if(f&&C.setRepeat(f(t)),p&&C.setScale(p(t)),m&&C.setRotateWithView(m(t)),_&&C.setRotation(_(t)),y){const e=y(t);if("left"!==e&&"center"!==e&&"right"!==e&&"end"!==e&&"start"!==e)throw new Error("Expected left, right, center, start, or end for text-align");C.setTextAlign(e)}if(v){const e=v(t);if("left"!==e&&"right"!==e&&"center"!==e)throw new Error("Expected left, right, or center for text-justify");C.setJustify(e)}if(x){const e=x(t);if("bottom"!==e&&"top"!==e&&"middle"!==e&&"alphabetic"!==e&&"hanging"!==e)throw new Error("Expected bottom, top, middle, alphabetic, or hanging for text-baseline");C.setTextBaseline(e)}return w&&C.setPadding(w(t)),C}}(t,e),s=function(t,e){return"icon-src"in t?function(t,e){const i="icon-",n=i+"src",r=fa(t[n],n),s=aa(t,i+"anchor",e),o=la(t,i+"scale",e),a=ia(t,i+"opacity",e),l=aa(t,i+"displacement",e),h=ia(t,i+"rotation",e),c=ra(t,i+"rotate-with-view",e),u=ca(t,i+"anchor-origin"),d=ua(t,i+"anchor-x-units"),g=ua(t,i+"anchor-y-units"),f=function(t,e){const i=t[e];if(void 0!==i)return ma(i,e)}(t,i+"color"),p=function(t,e){const i=t[e];if(void 0!==i){if("string"!=typeof i)throw new Error(`Expected a string for ${e}`);return i}}(t,i+"cross-origin"),m=function(t,e){const i=t[e];if(void 0!==i)return ga(i,e)}(t,i+"offset"),_=ca(t,i+"offset-origin"),y=ha(t,i+"width"),v=ha(t,i+"height"),x=function(t,e){const i=t[e];if(void 0!==i){if("number"==typeof i)return Ur(i);if(!Array.isArray(i))throw new Error(`Expected a number or size array for ${e}`);if(2!==i.length||"number"!=typeof i[0]||"number"!=typeof i[1])throw new Error(`Expected a number or size array for ${e}`);return i}}(t,i+"size"),w=da(t,i+"declutter"),C=new vo({src:r,anchorOrigin:u,anchorXUnits:d,anchorYUnits:g,color:f,crossOrigin:p,offset:m,offsetOrigin:_,height:v,width:y,size:x,declutterMode:w});return function(t){return a&&C.setOpacity(a(t)),l&&C.setDisplacement(l(t)),h&&C.setRotation(h(t)),c&&C.setRotateWithView(c(t)),o&&C.setScale(o(t)),s&&C.setAnchor(s(t)),C}}(t,e):"shape-points"in t?function(t,e){const i="shape-",n=i+"points",r=pa(t[n],n),s=ta(t,i,e),o=ea(t,i,e),a=la(t,i+"scale",e),l=aa(t,i+"displacement",e),h=ia(t,i+"rotation",e),c=ra(t,i+"rotate-with-view",e),u=ha(t,i+"radius"),d=ha(t,i+"radius1"),g=ha(t,i+"radius2"),f=ha(t,i+"angle"),p=da(t,i+"declutter-mode"),m=new io({points:r,radius:u,radius1:d,radius2:g,angle:f,declutterMode:p});return function(t){return s&&m.setFill(s(t)),o&&m.setStroke(o(t)),l&&m.setDisplacement(l(t)),h&&m.setRotation(h(t)),c&&m.setRotateWithView(c(t)),a&&m.setScale(a(t)),m}}(t,e):"circle-radius"in t?function(t,e){const i="circle-",n=ta(t,i,e),r=ea(t,i,e),s=ia(t,i+"radius",e),o=la(t,i+"scale",e),a=aa(t,i+"displacement",e),l=ia(t,i+"rotation",e),h=ra(t,i+"rotate-with-view",e),c=da(t,i+"declutter-mode"),u=new ro({radius:5,declutterMode:c});return function(t){return s&&u.setRadius(s(t)),n&&u.setFill(n(t)),r&&u.setStroke(r(t)),a&&u.setDisplacement(a(t)),l&&u.setRotation(l(t)),h&&u.setRotateWithView(h(t)),o&&u.setScale(o(t)),u}}(t,e):null}(t,e),o=ia(t,"z-index",e);if(!(i||n||r||s||f(t)))throw new Error("No fill, stroke, point, or text symbolizer properties in style: "+JSON.stringify(t));const a=new fo;return function(t){let e=!0;if(i){const n=i(t);n&&(e=!1),a.setFill(n)}if(n){const i=n(t);i&&(e=!1),a.setStroke(i)}if(r){const i=r(t);i&&(e=!1),a.setText(i)}if(s){const i=s(t);i&&(e=!1),a.setImage(i)}return o&&a.setZIndex(o(t)),e?null:a}}function ta(t,e,i){const n=sa(t,e+"fill-color",i);if(!n)return null;const r=new oo;return function(t){const e=n(t);return"none"===e?null:(r.setColor(e),r)}}function ea(t,e,i){const n=ia(t,e+"stroke-width",i),r=sa(t,e+"stroke-color",i);if(!n&&!r)return null;const s=na(t,e+"stroke-line-cap",i),o=na(t,e+"stroke-line-join",i),a=oa(t,e+"stroke-line-dash",i),l=ia(t,e+"stroke-line-dash-offset",i),h=ia(t,e+"stroke-miter-limit",i),c=new lo;return function(t){if(r){const e=r(t);if("none"===e)return null;c.setColor(e)}if(n&&c.setWidth(n(t)),s){const e=s(t);if("butt"!==e&&"round"!==e&&"square"!==e)throw new Error("Expected butt, round, or square line cap");c.setLineCap(e)}if(o){const e=o(t);if("bevel"!==e&&"round"!==e&&"miter"!==e)throw new Error("Expected bevel, round, or miter line join");c.setLineJoin(e)}return a&&c.setLineDash(a(t)),l&&c.setLineDashOffset(l(t)),h&&c.setMiterLimit(h(t)),c}}function ia(t,e,i){if(!(e in t))return;const n=Ko(t[e],bo,i);return function(t){return pa(n(t),e)}}function na(t,e,i){if(!(e in t))return null;const n=Ko(t[e],To,i);return function(t){return fa(n(t),e)}}function ra(t,e,i){if(!(e in t))return null;const n=Ko(t[e],Eo,i);return function(t){const i=n(t);if("boolean"!=typeof i)throw new Error(`Expected a boolean for ${e}`);return i}}function sa(t,e,i){if(!(e in t))return null;const n=Ko(t[e],Ro|To,i);return function(t){return ma(n(t),e)}}function oa(t,e,i){if(!(e in t))return null;const n=Ko(t[e],Io,i);return function(t){return ga(n(t),e)}}function aa(t,e,i){if(!(e in t))return null;const n=Ko(t[e],Io,i);return function(t){const i=ga(n(t),e);if(2!==i.length)throw new Error(`Expected two numbers for ${e}`);return i}}function la(t,e,i){if(!(e in t))return null;const n=Ko(t[e],Io|bo,i);return function(t){return function(t,e){if("number"==typeof t)return t;const i=ga(t,e);if(2!==i.length)throw new Error(`Expected an array of two numbers for ${e}`);return i}(n(t),e)}}function ha(t,e){const i=t[e];if(void 0!==i){if("number"!=typeof i)throw new Error(`Expected a number for ${e}`);return i}}function ca(t,e){const i=t[e];if(void 0!==i){if("bottom-left"!==i&&"bottom-right"!==i&&"top-left"!==i&&"top-right"!==i)throw new Error(`Expected bottom-left, bottom-right, top-left, or top-right for ${e}`);return i}}function ua(t,e){const i=t[e];if(void 0!==i){if("pixels"!==i&&"fraction"!==i)throw new Error(`Expected pixels or fraction for ${e}`);return i}}function da(t,e){const i=t[e];if(void 0!==i){if("string"!=typeof i)throw new Error(`Expected a string for ${e}`);if("declutter"!==i&&"obstacle"!==i&&"none"!==i)throw new Error(`Expected declutter, obstacle, or none for ${e}`);return i}}function ga(t,e){if(!Array.isArray(t))throw new Error(`Expected an array for ${e}`);const i=t.length;for(let n=0;n<i;++n)if("number"!=typeof t[n])throw new Error(`Expected an array of numbers for ${e}`);return t}function fa(t,e){if("string"!=typeof t)throw new Error(`Expected a string for ${e}`);return t}function pa(t,e){if("number"!=typeof t)throw new Error(`Expected a number for ${e}`);return t}function ma(t,e){if("string"==typeof t)return t;const i=ga(t,e),n=i.length;if(n<3||n>4)throw new Error(`Expected a color with 3 or 4 values for ${e}`);return i}const _a="renderOrder",ya=class extends pn{constructor(t){t=t||{};const e=Object.assign({},t);delete e.style,delete e.renderBuffer,delete e.updateWhileAnimating,delete e.updateWhileInteracting,super(e),this.declutter_=void 0!==t.declutter&&t.declutter,this.renderBuffer_=void 0!==t.renderBuffer?t.renderBuffer:100,this.style_=null,this.styleFunction_=void 0,this.setStyle(t.style),this.updateWhileAnimating_=void 0!==t.updateWhileAnimating&&t.updateWhileAnimating,this.updateWhileInteracting_=void 0!==t.updateWhileInteracting&&t.updateWhileInteracting}getDeclutter(){return this.declutter_}getFeatures(t){return super.getFeatures(t)}getRenderBuffer(){return this.renderBuffer_}getRenderOrder(){return this.get(_a)}getStyle(){return this.style_}getStyleFunction(){return this.styleFunction_}getUpdateWhileAnimating(){return this.updateWhileAnimating_}getUpdateWhileInteracting(){return this.updateWhileInteracting_}renderDeclutter(t){t.declutterTree||(t.declutterTree=new Ps(9)),this.getRenderer().renderDeclutter(t)}setRenderOrder(t){this.set(_a,t)}setStyle(t){this.style_=function(t){if(void 0===t)return uo;if(!t)return null;if("function"==typeof t)return t;if(t instanceof fo)return t;if(!Array.isArray(t))return Jo([t]);if(0===t.length)return[];const e=t.length,i=t[0];if(i instanceof fo){const i=new Array(e);for(let n=0;n<e;++n){const e=t[n];if(!(e instanceof fo))throw new Error("Expected a list of style instances");i[n]=e}return i}if("style"in i){const i=new Array(e);for(let n=0;n<e;++n){const e=t[n];if(!("style"in e))throw new Error("Expected a list of rules with a style property");i[n]=e}return function(t){const e=No(),i=function(t,e){const i=t.length,n=new Array(i);for(let r=0;r<i;++r){const i=t[r],s="filter"in i?Ko(i.filter,Eo,e):$o;let o;if(Array.isArray(i.style)){const t=i.style.length;o=new Array(t);for(let n=0;n<t;++n)o[n]=Qo(i.style[n],e)}else o=[Qo(i.style,e)];n[r]={filter:s,styles:o}}return function(e){const r=[];let s=!1;for(let o=0;o<i;++o)if((0,n[o].filter)(e)&&(!t[o].else||!s)){s=!0;for(const t of n[o].styles){const i=t(e);i&&r.push(i)}}return r}}(t,e),n={variables:{},properties:{},resolution:NaN,featureId:null};return function(t,r){if(n.properties=t.getPropertiesInternal(),n.resolution=r,e.featureId){const e=t.getId();n.featureId=void 0!==e?e:null}return i(n)}}(i)}return Jo(t)}(t),this.styleFunction_=null===t?void 0:function(t){let e;if("function"==typeof t)e=t;else{let i;Array.isArray(t)?i=t:(H("function"==typeof t.getZIndex,"Expected an `Style` or an array of `Style`"),i=[t]),e=function(){return i}}return e}(this.style_),this.changed()}},va={BEGIN_GEOMETRY:0,BEGIN_PATH:1,CIRCLE:2,CLOSE_PATH:3,CUSTOM:4,DRAW_CHARS:5,DRAW_IMAGE:6,END_GEOMETRY:7,FILL:8,MOVE_TO_LINE_TO:9,SET_FILL_STYLE:10,SET_STROKE_STYLE:11,STROKE:12},xa=[va.FILL],wa=[va.STROKE],Ca=[va.BEGIN_PATH],Sa=[va.CLOSE_PATH],Ea=va,ba=class{drawCustom(t,e,i,n){}drawGeometry(t){}setStyle(t){}drawCircle(t,e){}drawFeature(t,e){}drawGeometryCollection(t,e){}drawLineString(t,e){}drawMultiLineString(t,e){}drawMultiPoint(t,e){}drawMultiPolygon(t,e){}drawPoint(t,e){}drawPolygon(t,e){}drawText(t,e){}setFillStrokeStyle(t,e){}setImageStyle(t,e){}setTextStyle(t,e){}},Ta=class extends ba{constructor(t,e,i,n){super(),this.tolerance=t,this.maxExtent=e,this.pixelRatio=n,this.maxLineWidth=0,this.resolution=i,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_=null,this.bufferedMaxExtent_=null,this.instructions=[],this.coordinates=[],this.tmpCoordinate_=[],this.hitDetectionInstructions=[],this.state={}}applyPixelRatio(t){const e=this.pixelRatio;return 1==e?t:t.map((function(t){return t*e}))}appendFlatPointCoordinates(t,e){const i=this.getBufferedMaxExtent(),n=this.tmpCoordinate_,r=this.coordinates;let s=r.length;for(let o=0,a=t.length;o<a;o+=e)n[0]=t[o],n[1]=t[o+1],nt(i,n)&&(r[s++]=n[0],r[s++]=n[1]);return s}appendFlatLineCoordinates(t,e,i,n,r,s){const o=this.coordinates;let a=o.length;const l=this.getBufferedMaxExtent();s&&(e+=n);let h=t[e],c=t[e+1];const u=this.tmpCoordinate_;let d,g,f,p=!0;for(d=e+n;d<i;d+=n)u[0]=t[d],u[1]=t[d+1],f=ot(l,u),f!==g?(p&&(o[a++]=h,o[a++]=c,p=!1),o[a++]=u[0],o[a++]=u[1]):f===J.INTERSECTING?(o[a++]=u[0],o[a++]=u[1],p=!1):p=!0,h=u[0],c=u[1],g=f;return(r&&p||d===e+n)&&(o[a++]=h,o[a++]=c),a}drawCustomCoordinates_(t,e,i,n,r){for(let s=0,o=i.length;s<o;++s){const o=i[s],a=this.appendFlatLineCoordinates(t,e,o,n,!1,!1);r.push(a),e=o}return e}drawCustom(t,e,i,n){this.beginGeometry(t,e);const r=t.getType(),s=t.getStride(),o=this.coordinates.length;let a,l,h,c,u;switch(r){case"MultiPolygon":a=t.getOrientedFlatCoordinates(),c=[];const e=t.getEndss();u=0;for(let t=0,i=e.length;t<i;++t){const i=[];u=this.drawCustomCoordinates_(a,u,e[t],s,i),c.push(i)}this.instructions.push([Ea.CUSTOM,o,c,t,i,Yi]),this.hitDetectionInstructions.push([Ea.CUSTOM,o,c,t,n||i,Yi]);break;case"Polygon":case"MultiLineString":h=[],a="Polygon"==r?t.getOrientedFlatCoordinates():t.getFlatCoordinates(),u=this.drawCustomCoordinates_(a,0,t.getEnds(),s,h),this.instructions.push([Ea.CUSTOM,o,h,t,i,qi]),this.hitDetectionInstructions.push([Ea.CUSTOM,o,h,t,n||i,qi]);break;case"LineString":case"Circle":a=t.getFlatCoordinates(),l=this.appendFlatLineCoordinates(a,0,a.length,s,!1,!1),this.instructions.push([Ea.CUSTOM,o,l,t,i,Bi]),this.hitDetectionInstructions.push([Ea.CUSTOM,o,l,t,n||i,Bi]);break;case"MultiPoint":a=t.getFlatCoordinates(),l=this.appendFlatPointCoordinates(a,s),l>o&&(this.instructions.push([Ea.CUSTOM,o,l,t,i,Bi]),this.hitDetectionInstructions.push([Ea.CUSTOM,o,l,t,n||i,Bi]));break;case"Point":a=t.getFlatCoordinates(),this.coordinates.push(a[0],a[1]),l=this.coordinates.length,this.instructions.push([Ea.CUSTOM,o,l,t,i]),this.hitDetectionInstructions.push([Ea.CUSTOM,o,l,t,n||i])}this.endGeometry(e)}beginGeometry(t,e){this.beginGeometryInstruction1_=[Ea.BEGIN_GEOMETRY,e,0,t],this.instructions.push(this.beginGeometryInstruction1_),this.beginGeometryInstruction2_=[Ea.BEGIN_GEOMETRY,e,0,t],this.hitDetectionInstructions.push(this.beginGeometryInstruction2_)}finish(){return{instructions:this.instructions,hitDetectionInstructions:this.hitDetectionInstructions,coordinates:this.coordinates}}reverseHitDetectionInstructions(){const t=this.hitDetectionInstructions;let e;t.reverse();const i=t.length;let n,r,s=-1;for(e=0;e<i;++e)n=t[e],r=n[0],r==Ea.END_GEOMETRY?s=e:r==Ea.BEGIN_GEOMETRY&&(n[2]=e,o(this.hitDetectionInstructions,s,e),s=-1)}setFillStrokeStyle(t,e){const i=this.state;if(t){const e=t.getColor();i.fillStyle=to(e||Ln)}else i.fillStyle=void 0;if(e){const t=e.getColor();i.strokeStyle=to(t||Dn);const n=e.getLineCap();i.lineCap=void 0!==n?n:An;const r=e.getLineDash();i.lineDash=r?r.slice():Pn;const s=e.getLineDashOffset();i.lineDashOffset=s||0;const o=e.getLineJoin();i.lineJoin=void 0!==o?o:Fn;const a=e.getWidth();i.lineWidth=void 0!==a?a:1;const l=e.getMiterLimit();i.miterLimit=void 0!==l?l:10,i.lineWidth>this.maxLineWidth&&(this.maxLineWidth=i.lineWidth,this.bufferedMaxExtent_=null)}else i.strokeStyle=void 0,i.lineCap=void 0,i.lineDash=null,i.lineDashOffset=void 0,i.lineJoin=void 0,i.lineWidth=void 0,i.miterLimit=void 0}createFill(t){const e=t.fillStyle,i=[Ea.SET_FILL_STYLE,e];return"string"!=typeof e&&i.push(!0),i}applyStroke(t){this.instructions.push(this.createStroke(t))}createStroke(t){return[Ea.SET_STROKE_STYLE,t.strokeStyle,t.lineWidth*this.pixelRatio,t.lineCap,t.lineJoin,t.miterLimit,this.applyPixelRatio(t.lineDash),t.lineDashOffset*this.pixelRatio]}updateFillStyle(t,e){const i=t.fillStyle;"string"==typeof i&&t.currentFillStyle==i||(void 0!==i&&this.instructions.push(e.call(this,t)),t.currentFillStyle=i)}updateStrokeStyle(t,e){const i=t.strokeStyle,n=t.lineCap,r=t.lineDash,s=t.lineDashOffset,o=t.lineJoin,a=t.lineWidth,h=t.miterLimit;(t.currentStrokeStyle!=i||t.currentLineCap!=n||r!=t.currentLineDash&&!l(t.currentLineDash,r)||t.currentLineDashOffset!=s||t.currentLineJoin!=o||t.currentLineWidth!=a||t.currentMiterLimit!=h)&&(void 0!==i&&e.call(this,t),t.currentStrokeStyle=i,t.currentLineCap=n,t.currentLineDash=r,t.currentLineDashOffset=s,t.currentLineJoin=o,t.currentLineWidth=a,t.currentMiterLimit=h)}endGeometry(t){this.beginGeometryInstruction1_[2]=this.instructions.length,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_[2]=this.hitDetectionInstructions.length,this.beginGeometryInstruction2_=null;const e=[Ea.END_GEOMETRY,t];this.instructions.push(e),this.hitDetectionInstructions.push(e)}getBufferedMaxExtent(){if(!this.bufferedMaxExtent_&&(this.bufferedMaxExtent_=et(this.maxExtent),this.maxLineWidth>0)){const t=this.resolution*(this.maxLineWidth+1)/2;tt(this.bufferedMaxExtent_,t,this.bufferedMaxExtent_)}return this.bufferedMaxExtent_}},Ra=class extends Ta{constructor(t,e,i,n){super(t,e,i,n)}drawFlatCoordinatess_(t,e,i,n){const r=this.state,s=void 0!==r.fillStyle,o=void 0!==r.strokeStyle,a=i.length;this.instructions.push(Ca),this.hitDetectionInstructions.push(Ca);for(let r=0;r<a;++r){const s=i[r],a=this.coordinates.length,l=this.appendFlatLineCoordinates(t,e,s,n,!0,!o),h=[Ea.MOVE_TO_LINE_TO,a,l];this.instructions.push(h),this.hitDetectionInstructions.push(h),o&&(this.instructions.push(Sa),this.hitDetectionInstructions.push(Sa)),e=s}return s&&(this.instructions.push(xa),this.hitDetectionInstructions.push(xa)),o&&(this.instructions.push(wa),this.hitDetectionInstructions.push(wa)),e}drawCircle(t,e){const i=this.state,n=i.fillStyle,r=i.strokeStyle;if(void 0===n&&void 0===r)return;this.setFillStrokeStyles_(),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([Ea.SET_FILL_STYLE,Ln]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([Ea.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,Pn,0]);const s=t.getFlatCoordinates(),o=t.getStride(),a=this.coordinates.length;this.appendFlatLineCoordinates(s,0,s.length,o,!1,!1);const l=[Ea.CIRCLE,a];this.instructions.push(Ca,l),this.hitDetectionInstructions.push(Ca,l),void 0!==i.fillStyle&&(this.instructions.push(xa),this.hitDetectionInstructions.push(xa)),void 0!==i.strokeStyle&&(this.instructions.push(wa),this.hitDetectionInstructions.push(wa)),this.endGeometry(e)}drawPolygon(t,e){const i=this.state,n=i.fillStyle,r=i.strokeStyle;if(void 0===n&&void 0===r)return;this.setFillStrokeStyles_(),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([Ea.SET_FILL_STYLE,Ln]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([Ea.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,Pn,0]);const s=t.getEnds(),o=t.getOrientedFlatCoordinates(),a=t.getStride();this.drawFlatCoordinatess_(o,0,s,a),this.endGeometry(e)}drawMultiPolygon(t,e){const i=this.state,n=i.fillStyle,r=i.strokeStyle;if(void 0===n&&void 0===r)return;this.setFillStrokeStyles_(),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([Ea.SET_FILL_STYLE,Ln]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([Ea.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,Pn,0]);const s=t.getEndss(),o=t.getOrientedFlatCoordinates(),a=t.getStride();let l=0;for(let t=0,e=s.length;t<e;++t)l=this.drawFlatCoordinatess_(o,l,s[t],a);this.endGeometry(e)}finish(){this.reverseHitDetectionInstructions(),this.state=null;const t=this.tolerance;if(0!==t){const e=this.coordinates;for(let i=0,n=e.length;i<n;++i)e[i]=Wi(e[i],t)}return super.finish()}setFillStrokeStyles_(){const t=this.state;void 0!==t.fillStyle&&this.updateFillStyle(t,this.createFill),void 0!==t.strokeStyle&&this.updateStrokeStyle(t,this.applyStroke)}};function Ia(t,e,i,n,r){const s=[];let o=i,a=0,l=e.slice(i,2);for(;a<t&&o+r<n;){const[i,n]=l.slice(-2),h=e[o+r],c=e[o+r+1],u=Math.sqrt((h-i)*(h-i)+(c-n)*(c-n));if(a+=u,a>=t){const e=(t-a+u)/u,d=Ht(i,h,e),g=Ht(n,c,e);l.push(d,g),s.push(l),l=[d,g],a==t&&(o+=r),a=0}else if(a<t)l.push(e[o+r],e[o+r+1]),o+=r;else{const t=u-a,e=Ht(i,h,t/u),d=Ht(n,c,t/u);l.push(e,d),s.push(l),l=[e,d],a=0,o+=r}}return a>0&&s.push(l),s}function Ma(t,e,i,n,r){let s,o,a,l,h,c,u,d,g,f,p=i,m=i,_=0,y=0,v=i;for(o=i;o<n;o+=r){const i=e[o],n=e[o+1];void 0!==h&&(g=i-h,f=n-c,l=Math.sqrt(g*g+f*f),void 0!==u&&(y+=a,s=Math.acos((u*g+d*f)/(a*l)),s>t&&(y>_&&(_=y,p=v,m=o),y=0,v=o-r)),a=l,u=g,d=f),h=i,c=n}return y+=l,y>_?[v,o]:[p,m]}const ka={left:0,center:.5,right:1,top:0,middle:.5,hanging:.2,alphabetic:.8,ideographic:.8,bottom:1},La={Circle:Ra,Default:Ta,Image:class extends Ta{constructor(t,e,i,n){super(t,e,i,n),this.hitDetectionImage_=null,this.image_=null,this.imagePixelRatio_=void 0,this.anchorX_=void 0,this.anchorY_=void 0,this.height_=void 0,this.opacity_=void 0,this.originX_=void 0,this.originY_=void 0,this.rotateWithView_=void 0,this.rotation_=void 0,this.scale_=void 0,this.width_=void 0,this.declutterMode_=void 0,this.declutterImageWithText_=void 0}drawPoint(t,e){if(!this.image_)return;this.beginGeometry(t,e);const i=t.getFlatCoordinates(),n=t.getStride(),r=this.coordinates.length,s=this.appendFlatPointCoordinates(i,n);this.instructions.push([Ea.DRAW_IMAGE,r,s,this.image_,this.anchorX_*this.imagePixelRatio_,this.anchorY_*this.imagePixelRatio_,Math.ceil(this.height_*this.imagePixelRatio_),this.opacity_,this.originX_*this.imagePixelRatio_,this.originY_*this.imagePixelRatio_,this.rotateWithView_,this.rotation_,[this.scale_[0]*this.pixelRatio/this.imagePixelRatio_,this.scale_[1]*this.pixelRatio/this.imagePixelRatio_],Math.ceil(this.width_*this.imagePixelRatio_),this.declutterMode_,this.declutterImageWithText_]),this.hitDetectionInstructions.push([Ea.DRAW_IMAGE,r,s,this.hitDetectionImage_,this.anchorX_,this.anchorY_,this.height_,1,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_,this.width_,this.declutterMode_,this.declutterImageWithText_]),this.endGeometry(e)}drawMultiPoint(t,e){if(!this.image_)return;this.beginGeometry(t,e);const i=t.getFlatCoordinates(),n=t.getStride(),r=this.coordinates.length,s=this.appendFlatPointCoordinates(i,n);this.instructions.push([Ea.DRAW_IMAGE,r,s,this.image_,this.anchorX_*this.imagePixelRatio_,this.anchorY_*this.imagePixelRatio_,Math.ceil(this.height_*this.imagePixelRatio_),this.opacity_,this.originX_*this.imagePixelRatio_,this.originY_*this.imagePixelRatio_,this.rotateWithView_,this.rotation_,[this.scale_[0]*this.pixelRatio/this.imagePixelRatio_,this.scale_[1]*this.pixelRatio/this.imagePixelRatio_],Math.ceil(this.width_*this.imagePixelRatio_),this.declutterMode_,this.declutterImageWithText_]),this.hitDetectionInstructions.push([Ea.DRAW_IMAGE,r,s,this.hitDetectionImage_,this.anchorX_,this.anchorY_,this.height_,1,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_,this.width_,this.declutterMode_,this.declutterImageWithText_]),this.endGeometry(e)}finish(){return this.reverseHitDetectionInstructions(),this.anchorX_=void 0,this.anchorY_=void 0,this.hitDetectionImage_=null,this.image_=null,this.imagePixelRatio_=void 0,this.height_=void 0,this.scale_=void 0,this.opacity_=void 0,this.originX_=void 0,this.originY_=void 0,this.rotateWithView_=void 0,this.rotation_=void 0,this.width_=void 0,super.finish()}setImageStyle(t,e){const i=t.getAnchor(),n=t.getSize(),r=t.getOrigin();this.imagePixelRatio_=t.getPixelRatio(this.pixelRatio),this.anchorX_=i[0],this.anchorY_=i[1],this.hitDetectionImage_=t.getHitDetectionImage(),this.image_=t.getImage(this.pixelRatio),this.height_=n[1],this.opacity_=t.getOpacity(),this.originX_=r[0],this.originY_=r[1],this.rotateWithView_=t.getRotateWithView(),this.rotation_=t.getRotation(),this.scale_=t.getScaleArray(),this.width_=n[0],this.declutterMode_=t.getDeclutterMode(),this.declutterImageWithText_=e}},LineString:class extends Ta{constructor(t,e,i,n){super(t,e,i,n)}drawFlatCoordinates_(t,e,i,n){const r=this.coordinates.length,s=this.appendFlatLineCoordinates(t,e,i,n,!1,!1),o=[Ea.MOVE_TO_LINE_TO,r,s];return this.instructions.push(o),this.hitDetectionInstructions.push(o),i}drawLineString(t,e){const i=this.state,n=i.strokeStyle,r=i.lineWidth;if(void 0===n||void 0===r)return;this.updateStrokeStyle(i,this.applyStroke),this.beginGeometry(t,e),this.hitDetectionInstructions.push([Ea.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,Pn,0],Ca);const s=t.getFlatCoordinates(),o=t.getStride();this.drawFlatCoordinates_(s,0,s.length,o),this.hitDetectionInstructions.push(wa),this.endGeometry(e)}drawMultiLineString(t,e){const i=this.state,n=i.strokeStyle,r=i.lineWidth;if(void 0===n||void 0===r)return;this.updateStrokeStyle(i,this.applyStroke),this.beginGeometry(t,e),this.hitDetectionInstructions.push([Ea.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,Pn,0],Ca);const s=t.getEnds(),o=t.getFlatCoordinates(),a=t.getStride();let l=0;for(let t=0,e=s.length;t<e;++t)l=this.drawFlatCoordinates_(o,l,s[t],a);this.hitDetectionInstructions.push(wa),this.endGeometry(e)}finish(){const t=this.state;return null!=t.lastStroke&&t.lastStroke!=this.coordinates.length&&this.instructions.push(wa),this.reverseHitDetectionInstructions(),this.state=null,super.finish()}applyStroke(t){null!=t.lastStroke&&t.lastStroke!=this.coordinates.length&&(this.instructions.push(wa),t.lastStroke=this.coordinates.length),t.lastStroke=0,super.applyStroke(t),this.instructions.push(Ca)}},Polygon:Ra,Text:class extends Ta{constructor(t,e,i,n){super(t,e,i,n),this.labels_=null,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=void 0,this.textRotation_=0,this.textFillState_=null,this.fillStates={},this.fillStates[Ln]={fillStyle:Ln},this.textStrokeState_=null,this.strokeStates={},this.textState_={},this.textStates={},this.textKey_="",this.fillKey_="",this.strokeKey_="",this.declutterImageWithText_=void 0}finish(){const t=super.finish();return t.textStates=this.textStates,t.fillStates=this.fillStates,t.strokeStates=this.strokeStates,t}drawText(t,e){const i=this.textFillState_,n=this.textStrokeState_,r=this.textState_;if(""===this.text_||!r||!i&&!n)return;const s=this.coordinates;let o=s.length;const a=t.getType();let l=null,h=t.getStride();if("line"!==r.placement||"LineString"!=a&&"MultiLineString"!=a&&"Polygon"!=a&&"MultiPolygon"!=a){let i=r.overflow?null:[];switch(a){case"Point":case"MultiPoint":l=t.getFlatCoordinates();break;case"LineString":l=t.getFlatMidpoint();break;case"Circle":l=t.getCenter();break;case"MultiLineString":l=t.getFlatMidpoints(),h=2;break;case"Polygon":l=t.getFlatInteriorPoint(),r.overflow||i.push(l[2]/this.resolution),h=3;break;case"MultiPolygon":const e=t.getFlatInteriorPoints();l=[];for(let t=0,n=e.length;t<n;t+=3)r.overflow||i.push(e[t+2]/this.resolution),l.push(e[t],e[t+1]);if(0===l.length)return;h=2}const n=this.appendFlatPointCoordinates(l,h);if(n===o)return;if(i&&(n-o)/2!=l.length/h){let t=o/2;i=i.filter(((e,i)=>{const n=s[2*(t+i)]===l[i*h]&&s[2*(t+i)+1]===l[i*h+1];return n||--t,n}))}this.saveTextStates_(),(r.backgroundFill||r.backgroundStroke)&&(this.setFillStrokeStyle(r.backgroundFill,r.backgroundStroke),r.backgroundFill&&this.updateFillStyle(this.state,this.createFill),r.backgroundStroke&&(this.updateStrokeStyle(this.state,this.applyStroke),this.hitDetectionInstructions.push(this.createStroke(this.state)))),this.beginGeometry(t,e);let c=r.padding;if(c!=jn&&(r.scale[0]<0||r.scale[1]<0)){let t=r.padding[0],e=r.padding[1],i=r.padding[2],n=r.padding[3];r.scale[0]<0&&(e=-e,n=-n),r.scale[1]<0&&(t=-t,i=-i),c=[t,e,i,n]}const u=this.pixelRatio;this.instructions.push([Ea.DRAW_IMAGE,o,n,null,NaN,NaN,NaN,1,0,0,this.textRotateWithView_,this.textRotation_,[1,1],NaN,void 0,this.declutterImageWithText_,c==jn?jn:c.map((function(t){return t*u})),!!r.backgroundFill,!!r.backgroundStroke,this.text_,this.textKey_,this.strokeKey_,this.fillKey_,this.textOffsetX_,this.textOffsetY_,i]);const d=1/u,g=this.state.fillStyle;r.backgroundFill&&(this.state.fillStyle=Ln,this.hitDetectionInstructions.push(this.createFill(this.state))),this.hitDetectionInstructions.push([Ea.DRAW_IMAGE,o,n,null,NaN,NaN,NaN,1,0,0,this.textRotateWithView_,this.textRotation_,[d,d],NaN,void 0,this.declutterImageWithText_,c,!!r.backgroundFill,!!r.backgroundStroke,this.text_,this.textKey_,this.strokeKey_,this.fillKey_?Ln:this.fillKey_,this.textOffsetX_,this.textOffsetY_,i]),r.backgroundFill&&(this.state.fillStyle=g,this.hitDetectionInstructions.push(this.createFill(this.state))),this.endGeometry(e)}else{if(!It(this.getBufferedMaxExtent(),t.getExtent()))return;let i;if(l=t.getFlatCoordinates(),"LineString"==a)i=[l.length];else if("MultiLineString"==a)i=t.getEnds();else if("Polygon"==a)i=t.getEnds().slice(0,1);else if("MultiPolygon"==a){const e=t.getEndss();i=[];for(let t=0,n=e.length;t<n;++t)i.push(e[t][0])}this.beginGeometry(t,e);const n=r.repeat,c=n?void 0:r.textAlign;let u=0;for(let t=0,e=i.length;t<e;++t){let e;e=n?Ia(n*this.resolution,l,u,i[t],h):[l.slice(u,i[t])];for(let n=0,a=e.length;n<a;++n){const a=e[n];let l=0,d=a.length;if(null==c){const t=Ma(r.maxAngle,a,0,a.length,2);l=t[0],d=t[1]}for(let t=l;t<d;t+=h)s.push(a[t],a[t+1]);const g=s.length;u=i[t],this.drawChars_(o,g),o=g}}this.endGeometry(e)}}saveTextStates_(){const t=this.textStrokeState_,e=this.textState_,i=this.textFillState_,n=this.strokeKey_;t&&(n in this.strokeStates||(this.strokeStates[n]={strokeStyle:t.strokeStyle,lineCap:t.lineCap,lineDashOffset:t.lineDashOffset,lineWidth:t.lineWidth,lineJoin:t.lineJoin,miterLimit:t.miterLimit,lineDash:t.lineDash}));const r=this.textKey_;r in this.textStates||(this.textStates[r]={font:e.font,textAlign:e.textAlign||On,justify:e.justify,textBaseline:e.textBaseline||Nn,scale:e.scale});const s=this.fillKey_;i&&(s in this.fillStates||(this.fillStates[s]={fillStyle:i.fillStyle}))}drawChars_(t,e){const i=this.textStrokeState_,n=this.textState_,r=this.strokeKey_,s=this.textKey_,o=this.fillKey_;this.saveTextStates_();const a=this.pixelRatio,l=ka[n.textBaseline],h=this.textOffsetY_*a,c=this.text_,u=i?i.lineWidth*Math.abs(n.scale[0])/2:0;this.instructions.push([Ea.DRAW_CHARS,t,e,l,n.overflow,o,n.maxAngle,a,h,r,u*a,c,s,1]),this.hitDetectionInstructions.push([Ea.DRAW_CHARS,t,e,l,n.overflow,o?Ln:o,n.maxAngle,a,h,r,u*a,c,s,1/a])}setTextStyle(t,e){let i,n,r;if(t){const e=t.getFill();e?(n=this.textFillState_,n||(n={},this.textFillState_=n),n.fillStyle=to(e.getColor()||Ln)):(n=null,this.textFillState_=n);const s=t.getStroke();if(s){r=this.textStrokeState_,r||(r={},this.textStrokeState_=r);const t=s.getLineDash(),e=s.getLineDashOffset(),i=s.getWidth(),n=s.getMiterLimit();r.lineCap=s.getLineCap()||An,r.lineDash=t?t.slice():Pn,r.lineDashOffset=void 0===e?0:e,r.lineJoin=s.getLineJoin()||Fn,r.lineWidth=void 0===i?1:i,r.miterLimit=void 0===n?10:n,r.strokeStyle=to(s.getColor()||Dn)}else r=null,this.textStrokeState_=r;i=this.textState_;const o=t.getFont()||kn;Bn(o);const a=t.getScaleArray();i.overflow=t.getOverflow(),i.font=o,i.maxAngle=t.getMaxAngle(),i.placement=t.getPlacement(),i.textAlign=t.getTextAlign(),i.repeat=t.getRepeat(),i.justify=t.getJustify(),i.textBaseline=t.getTextBaseline()||Nn,i.backgroundFill=t.getBackgroundFill(),i.backgroundStroke=t.getBackgroundStroke(),i.padding=t.getPadding()||jn,i.scale=void 0===a?[1,1]:a;const l=t.getOffsetX(),h=t.getOffsetY(),c=t.getRotateWithView(),u=t.getRotation();this.text_=t.getText()||"",this.textOffsetX_=void 0===l?0:l,this.textOffsetY_=void 0===h?0:h,this.textRotateWithView_=void 0!==c&&c,this.textRotation_=void 0===u?0:u,this.strokeKey_=r?("string"==typeof r.strokeStyle?r.strokeStyle:k(r.strokeStyle))+r.lineCap+r.lineDashOffset+"|"+r.lineWidth+r.lineJoin+r.miterLimit+"["+r.lineDash.join()+"]":"",this.textKey_=i.font+i.scale+(i.textAlign||"?")+(i.repeat||"?")+(i.justify||"?")+(i.textBaseline||"?"),this.fillKey_=n?"string"==typeof n.fillStyle?n.fillStyle:"|"+k(n.fillStyle):""}else this.text_="";this.declutterImageWithText_=e}}},Aa=class{constructor(t,e,i,n){this.tolerance_=t,this.maxExtent_=e,this.pixelRatio_=n,this.resolution_=i,this.buildersByZIndex_={}}finish(){const t={};for(const e in this.buildersByZIndex_){t[e]=t[e]||{};const i=this.buildersByZIndex_[e];for(const n in i){const r=i[n].finish();t[e][n]=r}}return t}getBuilder(t,e){const i=void 0!==t?t.toString():"0";let n=this.buildersByZIndex_[i];void 0===n&&(n={},this.buildersByZIndex_[i]=n);let r=n[e];return void 0===r&&(r=new(0,La[e])(this.tolerance_,this.maxExtent_,this.resolution_,this.pixelRatio_),n[e]=r),r}};function Pa(t,e,i,n,r,s,o,a,l,h,c,u){let d=t[e],g=t[e+1],f=0,p=0,m=0,_=0;function y(){f=d,p=g,d=t[e+=n],g=t[e+1],_+=m,m=Math.sqrt((d-f)*(d-f)+(g-p)*(g-p))}do{y()}while(e<i-n&&_+m<s);let v=0===m?0:(s-_)/m;const x=Ht(f,d,v),w=Ht(p,g,v),C=e-n,S=_,E=s+a*l(h,r,c);for(;e<i-n&&_+m<E;)y();v=0===m?0:(E-_)/m;const b=Ht(f,d,v),T=Ht(p,g,v);let R;if(u){const t=[x,w,b,T];ki(t,0,4,2,u,t,t),R=t[0]>t[2]}else R=x>b;const I=Math.PI,M=[],k=C+n===e;let L;if(m=0,_=S,d=t[e=C],g=t[e+1],k){y(),L=Math.atan2(g-p,d-f),R&&(L+=L>0?-I:I);const t=(b+x)/2,e=(T+w)/2;return M[0]=[t,e,(E-s)/2,L,r],M}for(let t=0,u=(r=r.replace(/\n/g," ")).length;t<u;){y();let x=Math.atan2(g-p,d-f);if(R&&(x+=x>0?-I:I),void 0!==L){let t=x-L;if(t+=t>I?-2*I:t<-I?2*I:0,Math.abs(t)>o)return null}L=x;const w=t;let C=0;for(;t<u;++t){const o=a*l(h,r[R?u-t-1:t],c);if(e+n<i&&_+m<s+C+o/2)break;C+=o}if(t===w)continue;const S=R?r.substring(u-w,u-t):r.substring(w,t);v=0===m?0:(s+C/2-_)/m;const E=Ht(f,d,v),b=Ht(p,g,v);M.push([E,b,C/2,x,S]),s+=C}return M}function Fa(t,e,i,n){let r=t[e],s=t[e+1],o=0;for(let a=e+n;a<i;a+=n){const e=t[a],i=t[a+1];o+=Math.sqrt((e-r)*(e-r)+(i-s)*(i-s)),r=e,s=i}return o}const Da=[1/0,1/0,-1/0,-1/0],Oa=[],Na=[],ja=[],Ga=[];function Wa(t){return t[3].declutterBox}const za=new RegExp("["+String.fromCharCode(1425)+"-"+String.fromCharCode(2303)+String.fromCharCode(64285)+"-"+String.fromCharCode(65023)+String.fromCharCode(65136)+"-"+String.fromCharCode(65276)+String.fromCharCode(67584)+"-"+String.fromCharCode(69631)+String.fromCharCode(124928)+"-"+String.fromCharCode(126975)+"]");function Xa(t,e){return"start"===e?e=za.test(t)?"right":"left":"end"===e&&(e=za.test(t)?"left":"right"),ka[e]}function Ba(t,e,i){return i>0&&t.push("\n",""),t.push(e,""),t}const qa=class{constructor(t,e,i,n){this.overlaps=i,this.pixelRatio=e,this.resolution=t,this.alignFill_,this.instructions=n.instructions,this.coordinates=n.coordinates,this.coordinateCache_={},this.renderedTransform_=[1,0,0,1,0,0],this.hitDetectionInstructions=n.hitDetectionInstructions,this.pixelCoordinates_=null,this.viewRotation_=0,this.fillStates=n.fillStates||{},this.strokeStates=n.strokeStates||{},this.textStates=n.textStates||{},this.widths_={},this.labels_={}}createLabel(t,e,i,n){const r=t+e+i+n;if(this.labels_[r])return this.labels_[r];const s=n?this.strokeStates[n]:null,o=i?this.fillStates[i]:null,a=this.textStates[e],l=this.pixelRatio,h=[a.scale[0]*l,a.scale[1]*l],c=Array.isArray(t),u=a.justify?ka[a.justify]:Xa(Array.isArray(t)?t[0]:t,a.textAlign||On),d=n&&s.lineWidth?s.lineWidth:0,g=c?t:t.split("\n").reduce(Ba,[]),{width:f,height:p,widths:m,heights:_,lineWidths:y}=function(t,e){const i=[],n=[],r=[];let s=0,o=0,a=0,l=0;for(let h=0,c=e.length;h<=c;h+=2){const u=e[h];if("\n"===u||h===c){s=Math.max(s,o),r.push(o),o=0,a+=l;continue}const d=e[h+1]||t.font,g=Hn(d,u);i.push(g),o+=g;const f=qn(d);n.push(f),l=Math.max(l,f)}return{width:s,height:a,widths:i,heights:n,lineWidths:r}}(a,g),v=f+d,x=[],w=(v+2)*h[0],C=(p+d)*h[1],S={width:w<0?Math.floor(w):Math.ceil(w),height:C<0?Math.floor(C):Math.ceil(C),contextInstructions:x};1==h[0]&&1==h[1]||x.push("scale",h),n&&(x.push("strokeStyle",s.strokeStyle),x.push("lineWidth",d),x.push("lineCap",s.lineCap),x.push("lineJoin",s.lineJoin),x.push("miterLimit",s.miterLimit),x.push("setLineDash",[s.lineDash]),x.push("lineDashOffset",s.lineDashOffset)),i&&x.push("fillStyle",o.fillStyle),x.push("textBaseline","middle"),x.push("textAlign","center");const E=.5-u;let b=u*v+E*d;const T=[],R=[];let I,M=0,k=0,L=0,A=0;for(let t=0,e=g.length;t<e;t+=2){const e=g[t];if("\n"===e){k+=M,M=0,b=u*v+E*d,++A;continue}const r=g[t+1]||a.font;r!==I&&(n&&T.push("font",r),i&&R.push("font",r),I=r),M=Math.max(M,_[L]);const s=[e,b+E*m[L]+u*(m[L]-y[A]),.5*(d+M)+k];b+=m[L],n&&T.push("strokeText",s),i&&R.push("fillText",s),++L}return Array.prototype.push.apply(x,T),Array.prototype.push.apply(x,R),this.labels_[r]=S,S}replayTextBackground_(t,e,i,n,r,s,o){t.beginPath(),t.moveTo.apply(t,e),t.lineTo.apply(t,i),t.lineTo.apply(t,n),t.lineTo.apply(t,r),t.lineTo.apply(t,e),s&&(this.alignFill_=s[2],this.fill_(t)),o&&(this.setStrokeStyle_(t,o),t.stroke())}calculateImageOrLabelDimensions_(t,e,i,n,r,s,o,a,l,h,c,u,d,g,f,p){let m=i-(o*=u[0]),_=n-(a*=u[1]);const y=r+l>t?t-l:r,v=s+h>e?e-h:s,x=g[3]+y*u[0]+g[1],w=g[0]+v*u[1]+g[2],C=m-g[3],S=_-g[0];let E;return(f||0!==c)&&(Oa[0]=C,Ga[0]=C,Oa[1]=S,Na[1]=S,Na[0]=C+x,ja[0]=Na[0],ja[1]=S+w,Ga[1]=ja[1]),0!==c?(E=Z([1,0,0,1,0,0],i,n,1,1,c,-i,-n),K(E,Oa),K(E,Na),K(E,ja),K(E,Ga),at(Math.min(Oa[0],Na[0],ja[0],Ga[0]),Math.min(Oa[1],Na[1],ja[1],Ga[1]),Math.max(Oa[0],Na[0],ja[0],Ga[0]),Math.max(Oa[1],Na[1],ja[1],Ga[1]),Da)):at(Math.min(C,C+x),Math.min(S,S+w),Math.max(C,C+x),Math.max(S,S+w),Da),d&&(m=Math.round(m),_=Math.round(_)),{drawImageX:m,drawImageY:_,drawImageW:y,drawImageH:v,originX:l,originY:h,declutterBox:{minX:Da[0],minY:Da[1],maxX:Da[2],maxY:Da[3],value:p},canvasTransform:E,scale:u}}replayImageOrLabel_(t,e,i,n,r,s,o){const a=!(!s&&!o),l=n.declutterBox,h=t.canvas,c=o?o[2]*n.scale[0]/2:0;return l.minX-c<=h.width/e&&l.maxX+c>=0&&l.minY-c<=h.height/e&&l.maxY+c>=0&&(a&&this.replayTextBackground_(t,Oa,Na,ja,Ga,s,o),function(t,e,i,n,r,s,o,a,l,h,c){t.save(),1!==i&&(t.globalAlpha*=i),e&&t.transform.apply(t,e),n.contextInstructions?(t.translate(l,h),t.scale(c[0],c[1]),function(t,e){const i=t.contextInstructions;for(let t=0,n=i.length;t<n;t+=2)Array.isArray(i[t+1])?e[i[t]].apply(e,i[t+1]):e[i[t]]=i[t+1]}(n,t)):c[0]<0||c[1]<0?(t.translate(l,h),t.scale(c[0],c[1]),t.drawImage(n,r,s,o,a,0,0,o,a)):t.drawImage(n,r,s,o,a,l,h,o*c[0],a*c[1]),t.restore()}(t,n.canvasTransform,r,i,n.originX,n.originY,n.drawImageW,n.drawImageH,n.drawImageX,n.drawImageY,n.scale)),!0}fill_(t){if(this.alignFill_){const e=K(this.renderedTransform_,[0,0]),i=512*this.pixelRatio;t.save(),t.translate(e[0]%i,e[1]%i),t.rotate(this.viewRotation_)}t.fill(),this.alignFill_&&t.restore()}setStrokeStyle_(t,e){t.strokeStyle=e[1],t.lineWidth=e[2],t.lineCap=e[3],t.lineJoin=e[4],t.miterLimit=e[5],t.lineDashOffset=e[7],t.setLineDash(e[6])}drawLabelWithPointPlacement_(t,e,i,n){const r=this.textStates[e],s=this.createLabel(t,e,n,i),o=this.strokeStates[i],a=this.pixelRatio,l=Xa(Array.isArray(t)?t[0]:t,r.textAlign||On),h=ka[r.textBaseline||Nn],c=o&&o.lineWidth?o.lineWidth:0;return{label:s,anchorX:l*(s.width/a-2*r.scale[0])+2*(.5-l)*c,anchorY:h*s.height/a+2*(.5-h)*c}}execute_(t,e,i,n,r,s,o,a){let h;var c,u;this.pixelCoordinates_&&l(i,this.renderedTransform_)?h=this.pixelCoordinates_:(this.pixelCoordinates_||(this.pixelCoordinates_=[]),h=Mi(this.coordinates,0,this.coordinates.length,2,i,this.pixelCoordinates_),u=i,(c=this.renderedTransform_)[0]=u[0],c[1]=u[1],c[2]=u[2],c[3]=u[3],c[4]=u[4],c[5]=u[5]);let d=0;const g=n.length;let f,p,m,_,y,v,x,w,C,S,E,b,T=0,R=0,I=0,M=null,k=null;const L=this.coordinateCache_,A=this.viewRotation_,P=Math.round(1e12*Math.atan2(-i[1],i[0]))/1e12,F={context:t,pixelRatio:this.pixelRatio,resolution:this.resolution,rotation:A},D=this.instructions!=n||this.overlaps?0:200;let O,N,j,G;for(;d<g;){const i=n[d];switch(i[0]){case Ea.BEGIN_GEOMETRY:O=i[1],G=i[3],O.getGeometry()?void 0===o||It(o,G.getExtent())?++d:d=i[2]+1:d=i[2];break;case Ea.BEGIN_PATH:R>D&&(this.fill_(t),R=0),I>D&&(t.stroke(),I=0),R||I||(t.beginPath(),_=NaN,y=NaN),++d;break;case Ea.CIRCLE:T=i[1];const n=h[T],l=h[T+1],c=h[T+2]-n,u=h[T+3]-l,g=Math.sqrt(c*c+u*u);t.moveTo(n+g,l),t.arc(n,l,g,0,2*Math.PI,!0),++d;break;case Ea.CLOSE_PATH:t.closePath(),++d;break;case Ea.CUSTOM:T=i[1],f=i[2];const W=i[3],z=i[4],X=6==i.length?i[5]:void 0;F.geometry=W,F.feature=O,d in L||(L[d]=[]);const B=L[d];X?X(h,T,f,2,B):(B[0]=h[T],B[1]=h[T+1],B.length=2),z(B,F),++d;break;case Ea.DRAW_IMAGE:T=i[1],f=i[2],w=i[3],p=i[4],m=i[5];let q=i[6];const Y=i[7],H=i[8],K=i[9],Z=i[10];let V=i[11];const U=i[12];let $=i[13];const J=i[14],Q=i[15];if(!w&&i.length>=20){C=i[19],S=i[20],E=i[21],b=i[22];const t=this.drawLabelWithPointPlacement_(C,S,E,b);w=t.label,i[3]=w;const e=i[23];p=(t.anchorX-e)*this.pixelRatio,i[4]=p;const n=i[24];m=(t.anchorY-n)*this.pixelRatio,i[5]=m,q=w.height,i[6]=q,$=w.width,i[13]=$}let tt,et,it,nt;i.length>25&&(tt=i[25]),i.length>17?(et=i[16],it=i[17],nt=i[18]):(et=jn,it=!1,nt=!1),Z&&P?V+=A:Z||P||(V-=A);let rt=0;for(;T<f;T+=2){if(tt&&tt[rt++]<$/this.pixelRatio)continue;const i=this.calculateImageOrLabelDimensions_(w.width,w.height,h[T],h[T+1],$,q,p,m,H,K,V,U,r,et,it||nt,O),n=[t,e,w,i,Y,it?M:null,nt?k:null];if(a){if("none"===J)continue;if("obstacle"===J){a.insert(i.declutterBox);continue}{let t,e;if(Q){const i=f-T;if(!Q[i]){Q[i]=n;continue}if(t=Q[i],delete Q[i],e=Wa(t),a.collides(e))continue}if(a.collides(i.declutterBox))continue;t&&(a.insert(e),this.replayImageOrLabel_.apply(this,t)),a.insert(i.declutterBox)}}this.replayImageOrLabel_.apply(this,n)}++d;break;case Ea.DRAW_CHARS:const st=i[1],ot=i[2],at=i[3],lt=i[4];b=i[5];const ht=i[6],ct=i[7],ut=i[8];E=i[9];const dt=i[10];C=i[11],S=i[12];const gt=[i[13],i[13]],ft=this.textStates[S],pt=ft.font,mt=[ft.scale[0]*ct,ft.scale[1]*ct];let _t;pt in this.widths_?_t=this.widths_[pt]:(_t={},this.widths_[pt]=_t);const yt=Fa(h,st,ot,2),vt=Math.abs(mt[0])*Kn(pt,C,_t);if(lt||vt<=yt){const i=Pa(h,st,ot,2,C,(yt-vt)*Xa(C,this.textStates[S].textAlign),ht,Math.abs(mt[0]),Kn,pt,_t,P?0:this.viewRotation_);t:if(i){const n=[];let r,s,o,l,h;if(E)for(r=0,s=i.length;r<s;++r){h=i[r],o=h[4],l=this.createLabel(o,S,"",E),p=h[2]+(mt[0]<0?-dt:dt),m=at*l.height+2*(.5-at)*dt*mt[1]/mt[0]-ut;const s=this.calculateImageOrLabelDimensions_(l.width,l.height,h[0],h[1],l.width,l.height,p,m,0,0,h[3],gt,!1,jn,!1,O);if(a&&a.collides(s.declutterBox))break t;n.push([t,e,l,s,1,null,null])}if(b)for(r=0,s=i.length;r<s;++r){h=i[r],o=h[4],l=this.createLabel(o,S,b,""),p=h[2],m=at*l.height-ut;const s=this.calculateImageOrLabelDimensions_(l.width,l.height,h[0],h[1],l.width,l.height,p,m,0,0,h[3],gt,!1,jn,!1,O);if(a&&a.collides(s.declutterBox))break t;n.push([t,e,l,s,1,null,null])}a&&a.load(n.map(Wa));for(let t=0,e=n.length;t<e;++t)this.replayImageOrLabel_.apply(this,n[t])}}++d;break;case Ea.END_GEOMETRY:if(void 0!==s){O=i[1];const t=s(O,G);if(t)return t}++d;break;case Ea.FILL:D?R++:this.fill_(t),++d;break;case Ea.MOVE_TO_LINE_TO:for(T=i[1],f=i[2],N=h[T],j=h[T+1],v=N+.5|0,x=j+.5|0,v===_&&x===y||(t.moveTo(N,j),_=v,y=x),T+=2;T<f;T+=2)N=h[T],j=h[T+1],v=N+.5|0,x=j+.5|0,T!=f-2&&v===_&&x===y||(t.lineTo(N,j),_=v,y=x);++d;break;case Ea.SET_FILL_STYLE:M=i,this.alignFill_=i[2],R&&(this.fill_(t),R=0,I&&(t.stroke(),I=0)),t.fillStyle=i[1],++d;break;case Ea.SET_STROKE_STYLE:k=i,I&&(t.stroke(),I=0),this.setStrokeStyle_(t,i),++d;break;case Ea.STROKE:D?I++:t.stroke(),++d;break;default:++d}}R&&this.fill_(t),I&&t.stroke()}execute(t,e,i,n,r,s){this.viewRotation_=n,this.execute_(t,e,i,this.instructions,r,void 0,void 0,s)}executeHitDetection(t,e,i,n,r){return this.viewRotation_=i,this.execute_(t,1,e,this.hitDetectionInstructions,!0,n,r)}},Ya=["Polygon","Circle","LineString","Image","Text","Default"],Ha={},Ka=class{constructor(t,e,i,n,r,s){this.maxExtent_=t,this.overlaps_=n,this.pixelRatio_=i,this.resolution_=e,this.renderBuffer_=s,this.executorsByZIndex_={},this.hitDetectionContext_=null,this.hitDetectionTransform_=[1,0,0,1,0,0],this.createExecutors_(r)}clip(t,e){const i=this.getClipCoords(e);t.beginPath(),t.moveTo(i[0],i[1]),t.lineTo(i[2],i[3]),t.lineTo(i[4],i[5]),t.lineTo(i[6],i[7]),t.clip()}createExecutors_(t){for(const e in t){let i=this.executorsByZIndex_[e];void 0===i&&(i={},this.executorsByZIndex_[e]=i);const n=t[e];for(const t in n){const e=n[t];i[t]=new qa(this.resolution_,this.pixelRatio_,this.overlaps_,e)}}}hasExecutors(t){for(const e in this.executorsByZIndex_){const i=this.executorsByZIndex_[e];for(let e=0,n=t.length;e<n;++e)if(t[e]in i)return!0}return!1}forEachFeatureAtCoordinate(t,e,i,n,s,o){const a=2*(n=Math.round(n))+1,l=Z(this.hitDetectionTransform_,n+.5,n+.5,1/e,-1/e,-i,-t[0],-t[1]),h=!this.hitDetectionContext_;h&&(this.hitDetectionContext_=Tn(a,a,void 0,{willReadFrequently:!0}));const c=this.hitDetectionContext_;let u;c.canvas.width!==a||c.canvas.height!==a?(c.canvas.width=a,c.canvas.height=a):h||c.clearRect(0,0,a,a),void 0!==this.renderBuffer_&&(u=[1/0,1/0,-1/0,-1/0],dt(u,t),tt(u,e*(this.renderBuffer_+n),u));const d=function(t){if(void 0!==Ha[t])return Ha[t];const e=2*t+1,i=t*t,n=new Array(i+1);for(let r=0;r<=t;++r)for(let s=0;s<=t;++s){const o=r*r+s*s;if(o>i)break;let a=n[o];a||(a=[],n[o]=a),a.push(4*((t+r)*e+(t+s))+3),r>0&&a.push(4*((t-r)*e+(t+s))+3),s>0&&(a.push(4*((t+r)*e+(t-s))+3),r>0&&a.push(4*((t-r)*e+(t-s))+3))}const r=[];for(let t=0,e=n.length;t<e;++t)n[t]&&r.push(...n[t]);return Ha[t]=r,r}(n);let g;function f(t,e){const i=c.getImageData(0,0,a,a).data;for(let r=0,l=d.length;r<l;r++)if(i[d[r]]>0){if(!o||"Image"!==g&&"Text"!==g||o.includes(t)){const i=(d[r]-3)/4,o=n-i%a,l=n-(i/a|0),h=s(t,e,o*o+l*l);if(h)return h}c.clearRect(0,0,a,a);break}}const p=Object.keys(this.executorsByZIndex_).map(Number);let m,_,y,v,x;for(p.sort(r),m=p.length-1;m>=0;--m){const t=p[m].toString();for(y=this.executorsByZIndex_[t],_=Ya.length-1;_>=0;--_)if(g=Ya[_],v=y[g],void 0!==v&&(x=v.executeHitDetection(c,l,i,f,u),x))return x}}getClipCoords(t){const e=this.maxExtent_;if(!e)return null;const i=e[0],n=e[1],r=e[2],s=e[3],o=[i,n,i,s,r,s,r,n];return Mi(o,0,8,2,t,o),o}isEmpty(){return f(this.executorsByZIndex_)}execute(t,e,i,n,s,o,a){const l=Object.keys(this.executorsByZIndex_).map(Number);let h,c,u,d,g,f;for(l.sort(r),this.maxExtent_&&(t.save(),this.clip(t,i)),o=o||Ya,a&&l.reverse(),h=0,c=l.length;h<c;++h){const r=l[h].toString();for(g=this.executorsByZIndex_[r],u=0,d=o.length;u<d;++u)f=g[o[u]],void 0!==f&&f.execute(t,e,i,n,s,a)}this.maxExtent_&&t.restore()}},Za=class extends ba{constructor(t,e,i,n,r,s,o){super(),this.context_=t,this.pixelRatio_=e,this.extent_=i,this.transform_=n,this.transformRotation_=n?Kt(Math.atan2(n[1],n[0]),10):0,this.viewRotation_=r,this.squaredTolerance_=s,this.userTransform_=o,this.contextFillState_=null,this.contextStrokeState_=null,this.contextTextState_=null,this.fillState_=null,this.strokeState_=null,this.image_=null,this.imageAnchorX_=0,this.imageAnchorY_=0,this.imageHeight_=0,this.imageOpacity_=0,this.imageOriginX_=0,this.imageOriginY_=0,this.imageRotateWithView_=!1,this.imageRotation_=0,this.imageScale_=[0,0],this.imageWidth_=0,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=!1,this.textRotation_=0,this.textScale_=[0,0],this.textFillState_=null,this.textStrokeState_=null,this.textState_=null,this.pixelCoordinates_=[],this.tmpLocalTransform_=[1,0,0,1,0,0]}drawImages_(t,e,i,n){if(!this.image_)return;const r=Mi(t,e,i,n,this.transform_,this.pixelCoordinates_),s=this.context_,o=this.tmpLocalTransform_,a=s.globalAlpha;1!=this.imageOpacity_&&(s.globalAlpha=a*this.imageOpacity_);let l=this.imageRotation_;0===this.transformRotation_&&(l-=this.viewRotation_),this.imageRotateWithView_&&(l+=this.viewRotation_);for(let t=0,e=r.length;t<e;t+=2){const e=r[t]-this.imageAnchorX_,i=r[t+1]-this.imageAnchorY_;if(0!==l||1!=this.imageScale_[0]||1!=this.imageScale_[1]){const t=e+this.imageAnchorX_,n=i+this.imageAnchorY_;Z(o,t,n,1,1,l,-t,-n),s.save(),s.transform.apply(s,o),s.translate(t,n),s.scale(this.imageScale_[0],this.imageScale_[1]),s.drawImage(this.image_,this.imageOriginX_,this.imageOriginY_,this.imageWidth_,this.imageHeight_,-this.imageAnchorX_,-this.imageAnchorY_,this.imageWidth_,this.imageHeight_),s.restore()}else s.drawImage(this.image_,this.imageOriginX_,this.imageOriginY_,this.imageWidth_,this.imageHeight_,e,i,this.imageWidth_,this.imageHeight_)}1!=this.imageOpacity_&&(s.globalAlpha=a)}drawText_(t,e,i,n){if(!this.textState_||""===this.text_)return;this.textFillState_&&this.setContextFillState_(this.textFillState_),this.textStrokeState_&&this.setContextStrokeState_(this.textStrokeState_),this.setContextTextState_(this.textState_);const r=Mi(t,e,i,n,this.transform_,this.pixelCoordinates_),s=this.context_;let o=this.textRotation_;for(0===this.transformRotation_&&(o-=this.viewRotation_),this.textRotateWithView_&&(o+=this.viewRotation_);e<i;e+=n){const t=r[e]+this.textOffsetX_,i=r[e+1]+this.textOffsetY_;0!==o||1!=this.textScale_[0]||1!=this.textScale_[1]?(s.save(),s.translate(t-this.textOffsetX_,i-this.textOffsetY_),s.rotate(o),s.translate(this.textOffsetX_,this.textOffsetY_),s.scale(this.textScale_[0],this.textScale_[1]),this.textStrokeState_&&s.strokeText(this.text_,0,0),this.textFillState_&&s.fillText(this.text_,0,0),s.restore()):(this.textStrokeState_&&s.strokeText(this.text_,t,i),this.textFillState_&&s.fillText(this.text_,t,i))}}moveToLineTo_(t,e,i,n,r){const s=this.context_,o=Mi(t,e,i,n,this.transform_,this.pixelCoordinates_);s.moveTo(o[0],o[1]);let a=o.length;r&&(a-=2);for(let t=2;t<a;t+=2)s.lineTo(o[t],o[t+1]);return r&&s.closePath(),i}drawRings_(t,e,i,n){for(let r=0,s=i.length;r<s;++r)e=this.moveToLineTo_(t,e,i[r],n,!0);return e}drawCircle(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),It(this.extent_,t.getExtent())){if(this.fillState_||this.strokeState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);const e=function(t,e,i){const n=t.getFlatCoordinates();if(!n)return null;const r=t.getStride();return Mi(n,0,n.length,r,e,i)}(t,this.transform_,this.pixelCoordinates_),i=e[2]-e[0],n=e[3]-e[1],r=Math.sqrt(i*i+n*n),s=this.context_;s.beginPath(),s.arc(e[0],e[1],r,0,2*Math.PI),this.fillState_&&s.fill(),this.strokeState_&&s.stroke()}""!==this.text_&&this.drawText_(t.getCenter(),0,2,2)}}setStyle(t){this.setFillStrokeStyle(t.getFill(),t.getStroke()),this.setImageStyle(t.getImage()),this.setTextStyle(t.getText())}setTransform(t){this.transform_=t}drawGeometry(t){switch(t.getType()){case"Point":this.drawPoint(t);break;case"LineString":this.drawLineString(t);break;case"Polygon":this.drawPolygon(t);break;case"MultiPoint":this.drawMultiPoint(t);break;case"MultiLineString":this.drawMultiLineString(t);break;case"MultiPolygon":this.drawMultiPolygon(t);break;case"GeometryCollection":this.drawGeometryCollection(t);break;case"Circle":this.drawCircle(t)}}drawFeature(t,e){const i=e.getGeometryFunction()(t);i&&(this.setStyle(e),this.drawGeometry(i))}drawGeometryCollection(t){const e=t.getGeometriesArray();for(let t=0,i=e.length;t<i;++t)this.drawGeometry(e[t])}drawPoint(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));const e=t.getFlatCoordinates(),i=t.getStride();this.image_&&this.drawImages_(e,0,e.length,i),""!==this.text_&&this.drawText_(e,0,e.length,i)}drawMultiPoint(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));const e=t.getFlatCoordinates(),i=t.getStride();this.image_&&this.drawImages_(e,0,e.length,i),""!==this.text_&&this.drawText_(e,0,e.length,i)}drawLineString(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),It(this.extent_,t.getExtent())){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);const e=this.context_,i=t.getFlatCoordinates();e.beginPath(),this.moveToLineTo_(i,0,i.length,t.getStride(),!1),e.stroke()}if(""!==this.text_){const e=t.getFlatMidpoint();this.drawText_(e,0,2,2)}}}drawMultiLineString(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));const e=t.getExtent();if(It(this.extent_,e)){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);const e=this.context_,i=t.getFlatCoordinates();let n=0;const r=t.getEnds(),s=t.getStride();e.beginPath();for(let t=0,e=r.length;t<e;++t)n=this.moveToLineTo_(i,n,r[t],s,!1);e.stroke()}if(""!==this.text_){const e=t.getFlatMidpoints();this.drawText_(e,0,e.length,2)}}}drawPolygon(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),It(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);const e=this.context_;e.beginPath(),this.drawRings_(t.getOrientedFlatCoordinates(),0,t.getEnds(),t.getStride()),this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){const e=t.getFlatInteriorPoint();this.drawText_(e,0,2,2)}}}drawMultiPolygon(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),It(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);const e=this.context_,i=t.getOrientedFlatCoordinates();let n=0;const r=t.getEndss(),s=t.getStride();e.beginPath();for(let t=0,e=r.length;t<e;++t){const e=r[t];n=this.drawRings_(i,n,e,s)}this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){const e=t.getFlatInteriorPoints();this.drawText_(e,0,e.length,2)}}}setContextFillState_(t){const e=this.context_,i=this.contextFillState_;i?i.fillStyle!=t.fillStyle&&(i.fillStyle=t.fillStyle,e.fillStyle=t.fillStyle):(e.fillStyle=t.fillStyle,this.contextFillState_={fillStyle:t.fillStyle})}setContextStrokeState_(t){const e=this.context_,i=this.contextStrokeState_;i?(i.lineCap!=t.lineCap&&(i.lineCap=t.lineCap,e.lineCap=t.lineCap),l(i.lineDash,t.lineDash)||e.setLineDash(i.lineDash=t.lineDash),i.lineDashOffset!=t.lineDashOffset&&(i.lineDashOffset=t.lineDashOffset,e.lineDashOffset=t.lineDashOffset),i.lineJoin!=t.lineJoin&&(i.lineJoin=t.lineJoin,e.lineJoin=t.lineJoin),i.lineWidth!=t.lineWidth&&(i.lineWidth=t.lineWidth,e.lineWidth=t.lineWidth),i.miterLimit!=t.miterLimit&&(i.miterLimit=t.miterLimit,e.miterLimit=t.miterLimit),i.strokeStyle!=t.strokeStyle&&(i.strokeStyle=t.strokeStyle,e.strokeStyle=t.strokeStyle)):(e.lineCap=t.lineCap,e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset,e.lineJoin=t.lineJoin,e.lineWidth=t.lineWidth,e.miterLimit=t.miterLimit,e.strokeStyle=t.strokeStyle,this.contextStrokeState_={lineCap:t.lineCap,lineDash:t.lineDash,lineDashOffset:t.lineDashOffset,lineJoin:t.lineJoin,lineWidth:t.lineWidth,miterLimit:t.miterLimit,strokeStyle:t.strokeStyle})}setContextTextState_(t){const e=this.context_,i=this.contextTextState_,n=t.textAlign?t.textAlign:On;i?(i.font!=t.font&&(i.font=t.font,e.font=t.font),i.textAlign!=n&&(i.textAlign=n,e.textAlign=n),i.textBaseline!=t.textBaseline&&(i.textBaseline=t.textBaseline,e.textBaseline=t.textBaseline)):(e.font=t.font,e.textAlign=n,e.textBaseline=t.textBaseline,this.contextTextState_={font:t.font,textAlign:n,textBaseline:t.textBaseline})}setFillStrokeStyle(t,e){if(t){const e=t.getColor();this.fillState_={fillStyle:to(e||Ln)}}else this.fillState_=null;if(e){const t=e.getColor(),i=e.getLineCap(),n=e.getLineDash(),r=e.getLineDashOffset(),s=e.getLineJoin(),o=e.getWidth(),a=e.getMiterLimit(),l=n||Pn;this.strokeState_={lineCap:void 0!==i?i:An,lineDash:1===this.pixelRatio_?l:l.map((t=>t*this.pixelRatio_)),lineDashOffset:(r||0)*this.pixelRatio_,lineJoin:void 0!==s?s:Fn,lineWidth:(void 0!==o?o:1)*this.pixelRatio_,miterLimit:void 0!==a?a:10,strokeStyle:to(t||Dn)}}else this.strokeState_=null}setImageStyle(t){let e;if(!t||!(e=t.getSize()))return void(this.image_=null);const i=t.getPixelRatio(this.pixelRatio_),n=t.getAnchor(),r=t.getOrigin();this.image_=t.getImage(this.pixelRatio_),this.imageAnchorX_=n[0]*i,this.imageAnchorY_=n[1]*i,this.imageHeight_=e[1]*i,this.imageOpacity_=t.getOpacity(),this.imageOriginX_=r[0],this.imageOriginY_=r[1],this.imageRotateWithView_=t.getRotateWithView(),this.imageRotation_=t.getRotation();const s=t.getScaleArray();this.imageScale_=[s[0]*this.pixelRatio_/i,s[1]*this.pixelRatio_/i],this.imageWidth_=e[0]*i}setTextStyle(t){if(t){const e=t.getFill();if(e){const t=e.getColor();this.textFillState_={fillStyle:to(t||Ln)}}else this.textFillState_=null;const i=t.getStroke();if(i){const t=i.getColor(),e=i.getLineCap(),n=i.getLineDash(),r=i.getLineDashOffset(),s=i.getLineJoin(),o=i.getWidth(),a=i.getMiterLimit();this.textStrokeState_={lineCap:void 0!==e?e:An,lineDash:n||Pn,lineDashOffset:r||0,lineJoin:void 0!==s?s:Fn,lineWidth:void 0!==o?o:1,miterLimit:void 0!==a?a:10,strokeStyle:to(t||Dn)}}else this.textStrokeState_=null;const n=t.getFont(),r=t.getOffsetX(),s=t.getOffsetY(),o=t.getRotateWithView(),a=t.getRotation(),l=t.getScaleArray(),h=t.getText(),c=t.getTextAlign(),u=t.getTextBaseline();this.textState_={font:void 0!==n?n:kn,textAlign:void 0!==c?c:On,textBaseline:void 0!==u?u:Nn},this.text_=void 0!==h?Array.isArray(h)?h.reduce(((t,e,i)=>t+(i%2?" ":e)),""):h:"",this.textOffsetX_=void 0!==r?this.pixelRatio_*r:0,this.textOffsetY_=void 0!==s?this.pixelRatio_*s:0,this.textRotateWithView_=void 0!==o&&o,this.textRotation_=void 0!==a?a:0,this.textScale_=[this.pixelRatio_*l[0],this.pixelRatio_*l[1]]}else this.text_=""}},Va=.5,Ua={Point:function(t,e,i,n,r){const s=i.getImage(),o=i.getText();let a;if(s){if(2!=s.getImageState())return;let l=t;if(r){const h=s.getDeclutterMode();if("none"!==h)if(l=r,"obstacle"===h){const r=t.getBuilder(i.getZIndex(),"Image");r.setImageStyle(s,a),r.drawPoint(e,n)}else o&&o.getText()&&(a={})}const h=l.getBuilder(i.getZIndex(),"Image");h.setImageStyle(s,a),h.drawPoint(e,n)}if(o&&o.getText()){let s=t;r&&(s=r);const l=s.getBuilder(i.getZIndex(),"Text");l.setTextStyle(o,a),l.drawText(e,n)}},LineString:function(t,e,i,n,r){const s=i.getStroke();if(s){const r=t.getBuilder(i.getZIndex(),"LineString");r.setFillStrokeStyle(null,s),r.drawLineString(e,n)}const o=i.getText();if(o&&o.getText()){const s=(r||t).getBuilder(i.getZIndex(),"Text");s.setTextStyle(o),s.drawText(e,n)}},Polygon:function(t,e,i,n,r){const s=i.getFill(),o=i.getStroke();if(s||o){const r=t.getBuilder(i.getZIndex(),"Polygon");r.setFillStrokeStyle(s,o),r.drawPolygon(e,n)}const a=i.getText();if(a&&a.getText()){const s=(r||t).getBuilder(i.getZIndex(),"Text");s.setTextStyle(a),s.drawText(e,n)}},MultiPoint:function(t,e,i,n,r){const s=i.getImage(),o=i.getText();let a;if(s){if(2!=s.getImageState())return;let l=t;if(r){const h=s.getDeclutterMode();if("none"!==h)if(l=r,"obstacle"===h){const r=t.getBuilder(i.getZIndex(),"Image");r.setImageStyle(s,a),r.drawMultiPoint(e,n)}else o&&o.getText()&&(a={})}const h=l.getBuilder(i.getZIndex(),"Image");h.setImageStyle(s,a),h.drawMultiPoint(e,n)}if(o&&o.getText()){let s=t;r&&(s=r);const l=s.getBuilder(i.getZIndex(),"Text");l.setTextStyle(o,a),l.drawText(e,n)}},MultiLineString:function(t,e,i,n,r){const s=i.getStroke();if(s){const r=t.getBuilder(i.getZIndex(),"LineString");r.setFillStrokeStyle(null,s),r.drawMultiLineString(e,n)}const o=i.getText();if(o&&o.getText()){const s=(r||t).getBuilder(i.getZIndex(),"Text");s.setTextStyle(o),s.drawText(e,n)}},MultiPolygon:function(t,e,i,n,r){const s=i.getFill(),o=i.getStroke();if(o||s){const r=t.getBuilder(i.getZIndex(),"Polygon");r.setFillStrokeStyle(s,o),r.drawMultiPolygon(e,n)}const a=i.getText();if(a&&a.getText()){const s=(r||t).getBuilder(i.getZIndex(),"Text");s.setTextStyle(a),s.drawText(e,n)}},GeometryCollection:function(t,e,i,n,r){const s=e.getGeometriesArray();let o,a;for(o=0,a=s.length;o<a;++o)(0,Ua[s[o].getType()])(t,s[o],i,n,r)},Circle:function(t,e,i,n,r){const s=i.getFill(),o=i.getStroke();if(s||o){const r=t.getBuilder(i.getZIndex(),"Circle");r.setFillStrokeStyle(s,o),r.drawCircle(e,n)}const a=i.getText();if(a&&a.getText()){const s=(r||t).getBuilder(i.getZIndex(),"Text");s.setTextStyle(a),s.drawText(e,n)}}};function $a(t,e){return parseInt(k(t),10)-parseInt(k(e),10)}function Ja(t,e){return.5*t/e}function Qa(t,e,i,n,r,s,o){let a=!1;const l=i.getImage();if(l){const t=l.getImageState();2==t||3==t?l.unlistenImageChange(r):(0==t&&l.load(),l.listenImageChange(r),a=!0)}return function(t,e,i,n,r,s){const o=i.getGeometryFunction()(e);if(!o)return;const a=o.simplifyTransformed(n,r);i.getRenderer()?tl(t,a,i,e):(0,Ua[a.getType()])(t,a,i,e,s)}(t,e,i,n,s,o),a}function tl(t,e,i,n){if("GeometryCollection"!=e.getType())t.getBuilder(i.getZIndex(),"Default").drawCustom(e,n,i.getRenderer(),i.getHitDetectionRenderer());else{const r=e.getGeometries();for(let e=0,s=r.length;e<s;++e)tl(t,r[e],i,n)}}const el=class extends Us{constructor(t){super(t),this.boundHandleStyleImageChange_=this.handleStyleImageChange_.bind(this),this.animatingOrInteracting_,this.hitDetectionImageData_=null,this.renderedFeatures_=null,this.renderedRevision_=-1,this.renderedResolution_=NaN,this.renderedExtent_=[1/0,1/0,-1/0,-1/0],this.wrappedRenderedExtent_=[1/0,1/0,-1/0,-1/0],this.renderedRotation_,this.renderedCenter_=null,this.renderedProjection_=null,this.renderedRenderOrder_=null,this.replayGroup_=null,this.replayGroupChanged=!0,this.declutterExecutorGroup=null,this.clipping=!0,this.compositionContext_=null,this.opacity_=1}renderWorlds(t,e,i){const n=e.extent,r=e.viewState,s=r.center,o=r.resolution,a=r.projection,l=r.rotation,h=a.getExtent(),c=this.getLayer().getSource(),u=e.pixelRatio,d=e.viewHints,g=!(d[0]||d[1]),f=this.compositionContext_,p=Math.round(e.size[0]*u),m=Math.round(e.size[1]*u),_=c.getWrapX()&&a.canWrapX(),y=_?Rt(h):null,v=_?Math.ceil((n[2]-h[2])/y)+1:1;let x=_?Math.floor((n[0]-h[0])/y):0;do{const e=this.getRenderTransform(s,o,l,u,p,m,x*y);t.execute(f,1,e,l,g,void 0,i)}while(++x<v)}setupCompositionContext_(){if(1!==this.opacity_){const t=Tn(this.context.canvas.width,this.context.canvas.height,Zs);this.compositionContext_=t}else this.compositionContext_=this.context}releaseCompositionContext_(){if(1!==this.opacity_){const t=this.context.globalAlpha;this.context.globalAlpha=this.opacity_,this.context.drawImage(this.compositionContext_.canvas,0,0),this.context.globalAlpha=t,Rn(this.compositionContext_),Zs.push(this.compositionContext_.canvas),this.compositionContext_=null}}renderDeclutter(t){this.declutterExecutorGroup&&(this.setupCompositionContext_(),this.renderWorlds(this.declutterExecutorGroup,t,t.declutterTree),this.releaseCompositionContext_())}renderFrame(t,e){const i=t.pixelRatio,n=t.layerStatesArray[t.layerIndex];!function(t,e,i){!function(t,e,i,n,r,s,o){t[0]=e,t[1]=i,t[2]=n,t[3]=r,t[4]=s,t[5]=o}(t,e,0,0,i,0,0)}(this.pixelTransform,1/i,1/i),V(this.inversePixelTransform,this.pixelTransform);const r=$(this.pixelTransform);this.useContainer(e,r,this.getBackground(t));const s=this.context,o=s.canvas,a=this.replayGroup_,l=this.declutterExecutorGroup;let h=a&&!a.isEmpty()||l&&!l.isEmpty();if(!h&&!this.getLayer().hasListener(ye)&&!this.getLayer().hasListener(ve))return null;const c=Math.round(t.size[0]*i),u=Math.round(t.size[1]*i);o.width!=c||o.height!=u?(o.width=c,o.height=u,o.style.transform!==r&&(o.style.transform=r)):this.containerReused||s.clearRect(0,0,c,u),this.preRender(s,t);const d=t.viewState,g=d.projection;this.opacity_=n.opacity,this.setupCompositionContext_();let f=!1;if(h&&n.extent&&this.clipping){const e=gi(n.extent,g);h=It(e,t.extent),f=h&&!rt(e,t.extent),f&&this.clipUnrotated(this.compositionContext_,t,e)}return h&&this.renderWorlds(a,t),f&&this.compositionContext_.restore(),this.releaseCompositionContext_(),this.postRender(s,t),this.renderedRotation_!==d.rotation&&(this.renderedRotation_=d.rotation,this.hitDetectionImageData_=null),this.container}getFeatures(t){return new Promise((e=>{if(!this.hitDetectionImageData_&&!this.animatingOrInteracting_){const t=[this.context.canvas.width,this.context.canvas.height];K(this.pixelTransform,t);const e=this.renderedCenter_,i=this.renderedResolution_,n=this.renderedRotation_,s=this.renderedProjection_,o=this.wrappedRenderedExtent_,a=this.getLayer(),l=[],h=t[0]*Va,c=t[1]*Va;l.push(this.getRenderTransform(e,i,n,Va,h,c,0).slice());const u=a.getSource(),d=s.getExtent();if(u.getWrapX()&&s.canWrapX()&&!rt(d,o)){let t=o[0];const r=Rt(d);let s,a=0;for(;t<d[0];)--a,s=r*a,l.push(this.getRenderTransform(e,i,n,Va,h,c,s).slice()),t+=r;for(a=0,t=o[2];t>d[2];)++a,s=r*a,l.push(this.getRenderTransform(e,i,n,Va,h,c,s).slice()),t-=r}this.hitDetectionImageData_=function(t,e,i,n,s,o,a){const l=Tn(t[0]*Va,t[1]*Va);l.imageSmoothingEnabled=!1;const h=l.canvas,c=new Za(l,Va,s,null,a),u=i.length,d=Math.floor(16777215/u),g={};for(let t=1;t<=u;++t){const e=i[t-1],r=e.getStyleFunction()||n;if(!r)continue;let a=r(e,o);if(!a)continue;Array.isArray(a)||(a=[a]);const l=(t*d).toString(16).padStart(7,"#00000");for(let t=0,i=a.length;t<i;++t){const i=a[t],n=i.getGeometryFunction()(e);if(!n||!It(s,n.getExtent()))continue;const r=i.clone(),o=r.getFill();o&&o.setColor(l);const h=r.getStroke();h&&(h.setColor(l),h.setLineDash(null)),r.setText(void 0);const c=i.getImage();if(c){const t=c.getImageSize();if(!t)continue;const e=Tn(t[0],t[1],void 0,{alpha:!1}),i=e.canvas;e.fillStyle=l,e.fillRect(0,0,i.width,i.height),r.setImage(new vo({img:i,anchor:c.getAnchor(),anchorXUnits:"pixels",anchorYUnits:"pixels",offset:c.getOrigin(),opacity:1,size:c.getSize(),scale:c.getScale(),rotation:c.getRotation(),rotateWithView:c.getRotateWithView()}))}const u=r.getZIndex()||0;let d=g[u];d||(d={},g[u]=d,d.Polygon=[],d.Circle=[],d.LineString=[],d.Point=[]);const f=n.getType();if("GeometryCollection"===f){const t=n.getGeometriesArrayRecursive();for(let e=0,i=t.length;e<i;++e){const i=t[e];d[i.getType().replace("Multi","")].push(i,r)}}else d[f.replace("Multi","")].push(n,r)}}const f=Object.keys(g).map(Number).sort(r);for(let t=0,i=f.length;t<i;++t){const i=g[f[t]];for(const t in i){const n=i[t];for(let t=0,i=n.length;t<i;t+=2){c.setStyle(n[t+1]);for(let i=0,r=e.length;i<r;++i)c.setTransform(e[i]),c.drawGeometry(n[t])}}}return l.getImageData(0,0,h.width,h.height)}(t,l,this.renderedFeatures_,a.getStyleFunction(),o,i,n)}e(function(t,e,i){const n=[];if(i){const r=Math.floor(Math.round(t[0])*Va),s=Math.floor(Math.round(t[1])*Va),o=4*(zt(r,0,i.width-1)+zt(s,0,i.height-1)*i.width),a=i.data[o],l=i.data[o+1],h=i.data[o+2]+256*(l+256*a),c=Math.floor(16777215/e.length);h&&h%c==0&&n.push(e[h/c-1])}return n}(t,this.renderedFeatures_,this.hitDetectionImageData_))}))}forEachFeatureAtCoordinate(t,e,i,n,r){if(!this.replayGroup_)return;const s=e.viewState.resolution,o=e.viewState.rotation,a=this.getLayer(),l={},h=function(t,e,i){const s=k(t),o=l[s];if(o){if(!0!==o&&i<o.distanceSq){if(0===i)return l[s]=!0,r.splice(r.lastIndexOf(o),1),n(t,a,e);o.geometry=e,o.distanceSq=i}}else{if(0===i)return l[s]=!0,n(t,a,e);r.push(l[s]={feature:t,layer:a,geometry:e,distanceSq:i,callback:n})}};let c;const u=[this.replayGroup_];return this.declutterExecutorGroup&&u.push(this.declutterExecutorGroup),u.some((n=>c=n.forEachFeatureAtCoordinate(t,s,o,i,h,n===this.declutterExecutorGroup&&e.declutterTree?e.declutterTree.all().map((t=>t.value)):null))),c}handleFontsChanged(){const t=this.getLayer();t.getVisible()&&this.replayGroup_&&t.changed()}handleStyleImageChange_(t){this.renderIfReadyAndVisible()}prepareFrame(t){const e=this.getLayer(),i=e.getSource();if(!i)return!1;const n=t.viewHints[0],r=t.viewHints[1],s=e.getUpdateWhileAnimating(),o=e.getUpdateWhileInteracting();if(this.ready&&!s&&n||!o&&r)return this.animatingOrInteracting_=!0,!0;this.animatingOrInteracting_=!1;const a=t.extent,h=t.viewState,c=h.projection,u=h.resolution,d=t.pixelRatio,g=e.getRevision(),f=e.getRenderBuffer();let p=e.getRenderOrder();void 0===p&&(p=$a);const m=h.center.slice(),_=tt(a,f*u),y=_.slice(),v=[_.slice()],x=c.getExtent();if(i.getWrapX()&&c.canWrapX()&&!rt(x,t.extent)){const t=Rt(x),e=Math.max(Rt(_)/2,t);_[0]=x[0]-e,_[2]=x[2]+e,Be(m,c);const i=kt(v[0],c);i[0]<x[0]&&i[2]<x[2]?v.push([i[0]+t,i[1],i[2]+t,i[3]]):i[0]>x[0]&&i[2]>x[2]&&v.push([i[0]-t,i[1],i[2]-t,i[3]])}if(this.ready&&this.renderedResolution_==u&&this.renderedRevision_==g&&this.renderedRenderOrder_==p&&rt(this.wrappedRenderedExtent_,_))return l(this.renderedExtent_,y)||(this.hitDetectionImageData_=null,this.renderedExtent_=y),this.renderedCenter_=m,this.replayGroupChanged=!1,!0;this.replayGroup_=null;const w=new Aa(Ja(u,d),_,u,d);let C;this.getLayer().getDeclutter()&&(C=new Aa(Ja(u,d),_,u,d));const S=hi();let E;if(S){for(let t=0,e=v.length;t<e;++t){const e=di(v[t],c);i.loadFeatures(e,fi(u,c),S)}E=ri(S,c)}else for(let t=0,e=v.length;t<e;++t)i.loadFeatures(v[t],u,c);const b=function(t,e){const i=Ja(t,e);return i*i}(u,d);let T=!0;const R=t=>{let i;const n=t.getStyleFunction()||e.getStyleFunction();if(n&&(i=n(t,u)),i){const e=this.renderFeature(t,b,i,w,E,C);T=T&&!e}},I=di(_,c),M=i.getFeaturesInExtent(I);p&&M.sort(p);for(let t=0,e=M.length;t<e;++t)R(M[t]);this.renderedFeatures_=M,this.ready=T;const k=w.finish(),L=new Ka(_,u,d,i.getOverlaps(),k,e.getRenderBuffer());return C&&(this.declutterExecutorGroup=new Ka(_,u,d,i.getOverlaps(),C.finish(),e.getRenderBuffer())),this.renderedResolution_=u,this.renderedRevision_=g,this.renderedRenderOrder_=p,this.renderedExtent_=y,this.wrappedRenderedExtent_=_,this.renderedCenter_=m,this.renderedProjection_=c,this.replayGroup_=L,this.hitDetectionImageData_=null,this.replayGroupChanged=!0,!0}renderFeature(t,e,i,n,r,s){if(!i)return!1;let o=!1;if(Array.isArray(i))for(let a=0,l=i.length;a<l;++a)o=Qa(n,t,i[a],e,this.boundHandleStyleImageChange_,r,s)||o;else o=Qa(n,t,i,e,this.boundHandleStyleImageChange_,r,s);return o}};class il{constructor(t,e,i,n){this.name=t,this.feature=e,this.x=i,this.y=n}rename=t=>{this.name=t}}var nl=i(755),rl=i(755);li=Qe("EPSG:4326");const sl=[],ol=new class extends A{constructor(t){super(),t=t||{},this.on,this.once,this.un;const e=function(t){let e=null;void 0!==t.keyboardEventTarget&&(e="string"==typeof t.keyboardEventTarget?document.getElementById(t.keyboardEventTarget):t.keyboardEventTarget);const i={},n=t.layers&&"function"==typeof t.layers.getLayers?t.layers:new Jn({layers:t.layers});let r,s,o;return i[ar]=n,i[hr]=t.target,i[cr]=t.view instanceof gn?t.view:new gn,void 0!==t.controls&&(Array.isArray(t.controls)?r=new N(t.controls.slice()):(H("function"==typeof t.controls.getArray,"Expected `controls` to be an array or an `ol/Collection.js`"),r=t.controls)),void 0!==t.interactions&&(Array.isArray(t.interactions)?s=new N(t.interactions.slice()):(H("function"==typeof t.interactions.getArray,"Expected `interactions` to be an array or an `ol/Collection.js`"),s=t.interactions)),void 0!==t.overlays?Array.isArray(t.overlays)?o=new N(t.overlays.slice()):(H("function"==typeof t.overlays.getArray,"Expected `overlays` to be an array or an `ol/Collection.js`"),o=t.overlays):o=new N,{controls:r,interactions:s,keyboardEventTarget:e,overlays:o,values:i}}(t);this.renderComplete_,this.loaded_=!0,this.boundHandleBrowserEvent_=this.handleBrowserEvent.bind(this),this.maxTilesLoading_=void 0!==t.maxTilesLoading?t.maxTilesLoading:16,this.pixelRatio_=void 0!==t.pixelRatio?t.pixelRatio:X,this.postRenderTimeoutHandle_,this.animationDelayKey_,this.animationDelay_=this.animationDelay_.bind(this),this.coordinateToPixelTransform_=[1,0,0,1,0,0],this.pixelToCoordinateTransform_=[1,0,0,1,0,0],this.frameIndex_=0,this.frameState_=null,this.previousExtent_=null,this.viewPropertyListenerKey_=null,this.viewChangeListenerKey_=null,this.layerGroupPropertyListenerKeys_=null,this.viewport_=document.createElement("div"),this.viewport_.className="ol-viewport"+("ontouchstart"in window?" ol-touch":""),this.viewport_.style.position="relative",this.viewport_.style.overflow="hidden",this.viewport_.style.width="100%",this.viewport_.style.height="100%",this.overlayContainer_=document.createElement("div"),this.overlayContainer_.style.position="absolute",this.overlayContainer_.style.zIndex="0",this.overlayContainer_.style.width="100%",this.overlayContainer_.style.height="100%",this.overlayContainer_.style.pointerEvents="none",this.overlayContainer_.className="ol-overlaycontainer",this.viewport_.appendChild(this.overlayContainer_),this.overlayContainerStopEvent_=document.createElement("div"),this.overlayContainerStopEvent_.style.position="absolute",this.overlayContainerStopEvent_.style.zIndex="0",this.overlayContainerStopEvent_.style.width="100%",this.overlayContainerStopEvent_.style.height="100%",this.overlayContainerStopEvent_.style.pointerEvents="none",this.overlayContainerStopEvent_.className="ol-overlaycontainer-stopevent",this.viewport_.appendChild(this.overlayContainerStopEvent_),this.mapBrowserEventHandler_=null,this.moveTolerance_=t.moveTolerance,this.keyboardEventTarget_=e.keyboardEventTarget,this.targetChangeHandlerKeys_=null,this.targetElement_=null,this.resizeObserver_=new ResizeObserver((()=>this.updateSize())),this.controls=e.controls||function(t){t=t||{};const e=new N;return(void 0===t.zoom||t.zoom)&&e.push(new _r(t.zoomOptions)),(void 0===t.rotate||t.rotate)&&e.push(new mr(t.rotateOptions)),(void 0===t.attribution||t.attribution)&&e.push(new pr(t.attributionOptions)),e}(),this.interactions=e.interactions||function(t){t=t||{};const e=new N,i=new Yr(-.005,.05,100);return(void 0===t.altShiftDragRotate||t.altShiftDragRotate)&&e.push(new Dr),(void 0===t.doubleClickZoom||t.doubleClickZoom)&&e.push(new wr({delta:t.zoomDelta,duration:t.zoomDuration})),(void 0===t.dragPan||t.dragPan)&&e.push(new Fr({onFocusOnly:t.onFocusOnly,kinetic:i})),(void 0===t.pinchRotate||t.pinchRotate)&&e.push(new Kr),(void 0===t.pinchZoom||t.pinchZoom)&&e.push(new Zr({duration:t.zoomDuration})),(void 0===t.keyboard||t.keyboard)&&(e.push(new Br),e.push(new qr({delta:t.zoomDelta,duration:t.zoomDuration}))),(void 0===t.mouseWheelZoom||t.mouseWheelZoom)&&e.push(new Hr({onFocusOnly:t.onFocusOnly,duration:t.zoomDuration})),(void 0===t.shiftDragZoom||t.shiftDragZoom)&&e.push(new Gr({duration:t.zoomDuration})),e}({onFocusOnly:!0}),this.overlays_=e.overlays,this.overlayIdIndex_={},this.renderer_=null,this.postRenderFunctions_=[],this.tileQueue_=new gr(this.getTilePriority.bind(this),this.handleTileChange_.bind(this)),this.addChangeListener(ar,this.handleLayerGroupChanged_),this.addChangeListener(cr,this.handleViewChanged_),this.addChangeListener(lr,this.handleSizeChanged_),this.addChangeListener(hr,this.handleTargetChanged_),this.setProperties(e.values);const i=this;!t.view||t.view instanceof gn||t.view.then((function(t){i.setView(new gn(t))})),this.controls.addEventListener(P,(t=>{t.element.setMap(this)})),this.controls.addEventListener(F,(t=>{t.element.setMap(null)})),this.interactions.addEventListener(P,(t=>{t.element.setMap(this)})),this.interactions.addEventListener(F,(t=>{t.element.setMap(null)})),this.overlays_.addEventListener(P,(t=>{this.addOverlayInternal_(t.element)})),this.overlays_.addEventListener(F,(t=>{const e=t.element.getId();void 0!==e&&delete this.overlayIdIndex_[e.toString()],t.element.setMap(null)})),this.controls.forEach((t=>{t.setMap(this)})),this.interactions.forEach((t=>{t.setMap(this)})),this.overlays_.forEach(this.addOverlayInternal_.bind(this))}addControl(t){this.getControls().push(t)}addInteraction(t){this.getInteractions().push(t)}addLayer(t){this.getLayerGroup().getLayers().push(t)}handleLayerAdd_(t){Jr(t.layer,this)}addOverlay(t){this.getOverlays().push(t)}addOverlayInternal_(t){const e=t.getId();void 0!==e&&(this.overlayIdIndex_[e.toString()]=t),t.setMap(this)}disposeInternal(){this.controls.clear(),this.interactions.clear(),this.overlays_.clear(),this.resizeObserver_.disconnect(),this.setTarget(null),super.disposeInternal()}forEachFeatureAtPixel(t,e,i){if(!this.frameState_||!this.renderer_)return;const n=this.getCoordinateFromPixelInternal(t),r=void 0!==(i=void 0!==i?i:{}).hitTolerance?i.hitTolerance:0,s=void 0!==i.layerFilter?i.layerFilter:h,o=!1!==i.checkWrapped;return this.renderer_.forEachFeatureAtCoordinate(n,this.frameState_,r,o,e,null,s,null)}getFeaturesAtPixel(t,e){const i=[];return this.forEachFeatureAtPixel(t,(function(t){i.push(t)}),e),i}getAllLayers(){const t=[];return function e(i){i.forEach((function(i){i instanceof Jn?e(i.getLayers()):t.push(i)}))}(this.getLayers()),t}hasFeatureAtPixel(t,e){if(!this.frameState_||!this.renderer_)return!1;const i=this.getCoordinateFromPixelInternal(t),n=void 0!==(e=void 0!==e?e:{}).layerFilter?e.layerFilter:h,r=void 0!==e.hitTolerance?e.hitTolerance:0,s=!1!==e.checkWrapped;return this.renderer_.hasFeatureAtCoordinate(i,this.frameState_,r,s,n,null)}getEventCoordinate(t){return this.getCoordinateFromPixel(this.getEventPixel(t))}getEventCoordinateInternal(t){return this.getCoordinateFromPixelInternal(this.getEventPixel(t))}getEventPixel(t){const e=this.viewport_.getBoundingClientRect(),i=this.getSize(),n=e.width/i[0],r=e.height/i[1],s="changedTouches"in t?t.changedTouches[0]:t;return[(s.clientX-e.left)/n,(s.clientY-e.top)/r]}getTarget(){return this.get(hr)}getTargetElement(){return this.targetElement_}getCoordinateFromPixel(t){return ci(this.getCoordinateFromPixelInternal(t),this.getView().getProjection())}getCoordinateFromPixelInternal(t){const e=this.frameState_;return e?K(e.pixelToCoordinateTransform,t.slice()):null}getControls(){return this.controls}getOverlays(){return this.overlays_}getOverlayById(t){const e=this.overlayIdIndex_[t.toString()];return void 0!==e?e:null}getInteractions(){return this.interactions}getLayerGroup(){return this.get(ar)}setLayers(t){const e=this.getLayerGroup();if(t instanceof N)return void e.setLayers(t);const i=e.getLayers();i.clear(),i.extend(t)}getLayers(){return this.getLayerGroup().getLayers()}getLoadingOrNotReady(){const t=this.getLayerGroup().getLayerStatesArray();for(let e=0,i=t.length;e<i;++e){const i=t[e];if(!i.visible)continue;const n=i.layer.getRenderer();if(n&&!n.ready)return!0;const r=i.layer.getSource();if(r&&r.loading)return!0}return!1}getPixelFromCoordinate(t){const e=ui(t,this.getView().getProjection());return this.getPixelFromCoordinateInternal(e)}getPixelFromCoordinateInternal(t){const e=this.frameState_;return e?K(e.coordinateToPixelTransform,t.slice(0,2)):null}getRenderer(){return this.renderer_}getSize(){return this.get(lr)}getView(){return this.get(cr)}getViewport(){return this.viewport_}getOverlayContainer(){return this.overlayContainer_}getOverlayContainerStopEvent(){return this.overlayContainerStopEvent_}getOwnerDocument(){const t=this.getTargetElement();return t?t.ownerDocument:document}getTilePriority(t,e,i,n){return function(t,e,i,n,r){if(!t||!(i in t.wantedTiles))return ur;if(!t.wantedTiles[i][e.getKey()])return ur;const s=t.viewState.center,o=n[0]-s[0],a=n[1]-s[1];return 65536*Math.log(r)+Math.sqrt(o*o+a*a)/r}(this.frameState_,t,e,i,n)}handleBrowserEvent(t,e){e=e||t.type;const i=new tr(e,this,t);this.handleMapBrowserEvent(i)}handleMapBrowserEvent(t){if(!this.frameState_)return;const e=t.originalEvent,i=e.type;if(i===ir||i===C||i===v){const t=this.getOwnerDocument(),i=this.viewport_.getRootNode?this.viewport_.getRootNode():t,n=e.target;if(this.overlayContainerStopEvent_.contains(n)||!(i===t?t.documentElement:i).contains(n))return}if(t.frameState=this.frameState_,!1!==this.dispatchEvent(t)){const e=this.getInteractions().getArray().slice();for(let i=e.length-1;i>=0;i--){const n=e[i];if(n.getMap()===this&&n.getActive()&&this.getTargetElement()&&(!n.handleEvent(t)||t.propagationStopped))break}}}handlePostRender(){const t=this.frameState_,e=this.tileQueue_;if(!e.isEmpty()){let i=this.maxTilesLoading_,n=i;if(t){const e=t.viewHints;if(e[0]||e[1]){const e=Date.now()-t.time>8;i=e?0:8,n=e?0:2}}e.getTilesLoading()<i&&(e.reprioritize(),e.loadMoreTiles(i,n))}t&&this.renderer_&&!t.animate&&(!0===this.renderComplete_?(this.hasListener(we)&&this.renderer_.dispatchRenderEvent(we,t),!1===this.loaded_&&(this.loaded_=!0,this.dispatchEvent(new Qn(or,this,t)))):!0===this.loaded_&&(this.loaded_=!1,this.dispatchEvent(new Qn(sr,this,t))));const i=this.postRenderFunctions_;for(let e=0,n=i.length;e<n;++e)i[e](this,t);i.length=0}handleSizeChanged_(){this.getView()&&!this.getView().getAnimating()&&this.getView().resolveConstraints(0),this.render()}handleTargetChanged_(){if(this.mapBrowserEventHandler_){for(let t=0,e=this.targetChangeHandlerKeys_.length;t<e;++t)b(this.targetChangeHandlerKeys_[t]);this.targetChangeHandlerKeys_=null,this.viewport_.removeEventListener(_,this.boundHandleBrowserEvent_),this.viewport_.removeEventListener(C,this.boundHandleBrowserEvent_),this.mapBrowserEventHandler_.dispose(),this.mapBrowserEventHandler_=null,Mn(this.viewport_)}if(this.targetElement_){this.resizeObserver_.unobserve(this.targetElement_);const t=this.targetElement_.getRootNode();t instanceof ShadowRoot&&this.resizeObserver_.unobserve(t.host),this.setSize(void 0)}const t=this.getTarget(),e="string"==typeof t?document.getElementById(t):t;if(this.targetElement_=e,e){e.appendChild(this.viewport_),this.renderer_||(this.renderer_=new Zn(this)),this.mapBrowserEventHandler_=new nr(this,this.moveTolerance_);for(const t in er)this.mapBrowserEventHandler_.addEventListener(er[t],this.handleMapBrowserEvent.bind(this));this.viewport_.addEventListener(_,this.boundHandleBrowserEvent_,!1),this.viewport_.addEventListener(C,this.boundHandleBrowserEvent_,!!Y&&{passive:!1});const t=this.keyboardEventTarget_?this.keyboardEventTarget_:e;this.targetChangeHandlerKeys_=[S(t,v,this.handleBrowserEvent,this),S(t,x,this.handleBrowserEvent,this)];const i=e.getRootNode();i instanceof ShadowRoot&&this.resizeObserver_.observe(i.host),this.resizeObserver_.observe(e)}else this.renderer_&&(clearTimeout(this.postRenderTimeoutHandle_),this.postRenderTimeoutHandle_=void 0,this.postRenderFunctions_.length=0,this.renderer_.dispose(),this.renderer_=null),this.animationDelayKey_&&(cancelAnimationFrame(this.animationDelayKey_),this.animationDelayKey_=void 0);this.updateSize()}handleTileChange_(){this.render()}handleViewPropertyChanged_(){this.render()}handleViewChanged_(){this.viewPropertyListenerKey_&&(b(this.viewPropertyListenerKey_),this.viewPropertyListenerKey_=null),this.viewChangeListenerKey_&&(b(this.viewChangeListenerKey_),this.viewChangeListenerKey_=null);const t=this.getView();t&&(this.updateViewportSize_(this.getSize()),this.viewPropertyListenerKey_=S(t,e,this.handleViewPropertyChanged_,this),this.viewChangeListenerKey_=S(t,m,this.handleViewPropertyChanged_,this),t.resolveConstraints(0)),this.render()}handleLayerGroupChanged_(){this.layerGroupPropertyListenerKeys_&&(this.layerGroupPropertyListenerKeys_.forEach(b),this.layerGroupPropertyListenerKeys_=null);const t=this.getLayerGroup();t&&(this.handleLayerAdd_(new Vn("addlayer",t)),this.layerGroupPropertyListenerKeys_=[S(t,e,this.render,this),S(t,m,this.render,this),S(t,"addlayer",this.handleLayerAdd_,this),S(t,"removelayer",this.handleLayerRemove_,this)]),this.render()}isRendered(){return!!this.frameState_}animationDelay_(){this.animationDelayKey_=void 0,this.renderFrame_(Date.now())}renderSync(){this.animationDelayKey_&&cancelAnimationFrame(this.animationDelayKey_),this.animationDelay_()}redrawText(){const t=this.getLayerGroup().getLayerStatesArray();for(let e=0,i=t.length;e<i;++e){const i=t[e].layer;i.hasRenderer()&&i.getRenderer().handleFontsChanged()}}render(){this.renderer_&&void 0===this.animationDelayKey_&&(this.animationDelayKey_=requestAnimationFrame(this.animationDelay_))}flushDeclutterItems(){const t=this.frameState_;t&&this.renderer_.flushDeclutterItems(t)}removeControl(t){return this.getControls().remove(t)}removeInteraction(t){return this.getInteractions().remove(t)}removeLayer(t){return this.getLayerGroup().getLayers().remove(t)}handleLayerRemove_(t){$r(t.layer)}removeOverlay(t){return this.getOverlays().remove(t)}renderFrame_(t){const e=this.getSize(),i=this.getView(),n=this.frameState_;let r=null;if(void 0!==e&&Vr(e)&&i&&i.isDef()){const n=i.getHints(this.frameState_?this.frameState_.viewHints:void 0),s=i.getState();if(r={animate:!1,coordinateToPixelTransform:this.coordinateToPixelTransform_,declutterTree:null,extent:wt(s.center,s.resolution,s.rotation,e),index:this.frameIndex_++,layerIndex:0,layerStatesArray:this.getLayerGroup().getLayerStatesArray(),pixelRatio:this.pixelRatio_,pixelToCoordinateTransform:this.pixelToCoordinateTransform_,postRenderFunctions:[],size:e,tileQueue:this.tileQueue_,time:t,usedTiles:{},viewState:s,viewHints:n,wantedTiles:{},mapId:k(this),renderTargets:{}},s.nextCenter&&s.nextResolution){const t=isNaN(s.nextRotation)?s.rotation:s.nextRotation;r.nextExtent=wt(s.nextCenter,s.nextResolution,t,e)}}this.frameState_=r,this.renderer_.renderFrame(r),r&&(r.animate&&this.render(),Array.prototype.push.apply(this.postRenderFunctions_,r.postRenderFunctions),n&&(!this.previousExtent_||!Mt(this.previousExtent_)&&!ut(r.extent,this.previousExtent_))&&(this.dispatchEvent(new Qn("movestart",this,n)),this.previousExtent_=lt(this.previousExtent_)),this.previousExtent_&&!r.viewHints[0]&&!r.viewHints[1]&&!ut(r.extent,this.previousExtent_)&&(this.dispatchEvent(new Qn("moveend",this,r)),et(r.extent,this.previousExtent_))),this.dispatchEvent(new Qn(rr,this,r)),this.renderComplete_=this.hasListener(sr)||this.hasListener(or)||this.hasListener(we)?!this.tileQueue_.getTilesLoading()&&!this.tileQueue_.getCount()&&!this.getLoadingOrNotReady():void 0,this.postRenderTimeoutHandle_||(this.postRenderTimeoutHandle_=setTimeout((()=>{this.postRenderTimeoutHandle_=void 0,this.handlePostRender()}),0))}setLayerGroup(t){const e=this.getLayerGroup();e&&this.handleLayerRemove_(new Vn("removelayer",e)),this.set(ar,t)}setSize(t){this.set(lr,t)}setTarget(t){this.set(hr,t)}setView(t){if(!t||t instanceof gn)return void this.set(cr,t);this.set(cr,new gn);const e=this;t.then((function(t){e.setView(new gn(t))}))}updateSize(){const t=this.getTargetElement();let e;if(t){const i=getComputedStyle(t),n=t.offsetWidth-parseFloat(i.borderLeftWidth)-parseFloat(i.paddingLeft)-parseFloat(i.paddingRight)-parseFloat(i.borderRightWidth),r=t.offsetHeight-parseFloat(i.borderTopWidth)-parseFloat(i.paddingTop)-parseFloat(i.paddingBottom)-parseFloat(i.borderBottomWidth);isNaN(n)||isNaN(r)||(e=[n,r],!Vr(e)&&(t.offsetWidth||t.offsetHeight||t.getClientRects().length)&&Ze("No map visible because the map container's width or height are 0."))}const i=this.getSize();!e||i&&l(e,i)||(this.setSize(e),this.updateViewportSize_(e))}updateViewportSize_(t){const e=this.getView();e&&e.setViewportSize(t)}}({target:"map",layers:[new class extends Hs{constructor(t){super(t)}createRenderer(){return new $s(this)}}({source:new class extends As{constructor(t){let e;e=void 0!==(t=t||{}).attributions?t.attributions:['&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.'];const i=void 0!==t.crossOrigin?t.crossOrigin:"anonymous",n=void 0!==t.url?t.url:"https://tile.openstreetmap.org/{z}/{x}/{y}.png";super({attributions:e,attributionsCollapsible:!1,cacheSize:t.cacheSize,crossOrigin:i,interpolate:t.interpolate,maxZoom:void 0!==t.maxZoom?t.maxZoom:19,opaque:void 0===t.opaque||t.opaque,reprojectionErrorThreshold:t.reprojectionErrorThreshold,tileLoadFunction:t.tileLoadFunction,transition:t.transition,url:n,wrapX:t.wrapX,zDirection:t.zDirection})}}})],view:new gn({center:[0,0],zoom:2})}),al=new class extends ms{constructor(t){super({attributions:(t=t||{}).attributions,interpolate:!0,projection:void 0,state:"ready",wrapX:void 0===t.wrapX||t.wrapX}),this.on,this.once,this.un,this.loader_=u,this.format_=t.format,this.overlaps_=void 0===t.overlaps||t.overlaps,this.url_=t.url,void 0!==t.loader?this.loader_=t.loader:void 0!==this.url_&&(H(this.format_,"`format` must be set when `url` is set"),this.loader_=Xs(this.url_,this.format_)),this.strategy_=void 0!==t.strategy?t.strategy:zs;const e=void 0===t.useSpatialIndex||t.useSpatialIndex;let i,n;this.featuresRtree_=e?new Fs:null,this.loadedExtentsRtree_=new Fs,this.loadingExtentsCount_=0,this.nullGeometryFeatures_={},this.idIndex_={},this.uidIndex_={},this.featureChangeKeys_={},this.featuresCollection_=null,Array.isArray(t.features)?n=t.features:t.features&&(i=t.features,n=i.getArray()),e||void 0!==i||(i=new N(n)),void 0!==n&&this.addFeaturesInternal(n),void 0!==i&&this.bindFeaturesCollection_(i)}addFeature(t){this.addFeatureInternal(t),this.changed()}addFeatureInternal(t){const e=k(t);if(!this.addToIndex_(e,t))return void(this.featuresCollection_&&this.featuresCollection_.remove(t));this.setupChangeEvents_(e,t);const i=t.getGeometry();if(i){const e=i.getExtent();this.featuresRtree_&&this.featuresRtree_.insert(e,t)}else this.nullGeometryFeatures_[e]=t;this.dispatchEvent(new Bs(Gs,t))}setupChangeEvents_(t,i){i instanceof js||(this.featureChangeKeys_[t]=[S(i,m,this.handleFeatureChange_,this),S(i,e,this.handleFeatureChange_,this)])}addToIndex_(t,e){let i=!0;if(void 0!==e.getId()){const t=String(e.getId());if(t in this.idIndex_)if(e instanceof js){const n=this.idIndex_[t];n instanceof js?Array.isArray(n)?n.push(e):this.idIndex_[t]=[n,e]:i=!1}else i=!1;else this.idIndex_[t]=e}return i&&(H(!(t in this.uidIndex_),"The passed `feature` was already added to the source"),this.uidIndex_[t]=e),i}addFeatures(t){this.addFeaturesInternal(t),this.changed()}addFeaturesInternal(t){const e=[],i=[],n=[];for(let e=0,n=t.length;e<n;e++){const n=t[e],r=k(n);this.addToIndex_(r,n)&&i.push(n)}for(let t=0,r=i.length;t<r;t++){const r=i[t],s=k(r);this.setupChangeEvents_(s,r);const o=r.getGeometry();if(o){const t=o.getExtent();e.push(t),n.push(r)}else this.nullGeometryFeatures_[s]=r}if(this.featuresRtree_&&this.featuresRtree_.load(e,n),this.hasListener(Gs))for(let t=0,e=i.length;t<e;t++)this.dispatchEvent(new Bs(Gs,i[t]))}bindFeaturesCollection_(t){let e=!1;this.addEventListener(Gs,(function(i){e||(e=!0,t.push(i.feature),e=!1)})),this.addEventListener(Ws,(function(i){e||(e=!0,t.remove(i.feature),e=!1)})),t.addEventListener(P,(t=>{e||(e=!0,this.addFeature(t.element),e=!1)})),t.addEventListener(F,(t=>{e||(e=!0,this.removeFeature(t.element),e=!1)})),this.featuresCollection_=t}clear(t){if(t){for(const t in this.featureChangeKeys_)this.featureChangeKeys_[t].forEach(b);this.featuresCollection_||(this.featureChangeKeys_={},this.idIndex_={},this.uidIndex_={})}else if(this.featuresRtree_){const t=t=>{this.removeFeatureInternal(t)};this.featuresRtree_.forEach(t);for(const t in this.nullGeometryFeatures_)this.removeFeatureInternal(this.nullGeometryFeatures_[t])}this.featuresCollection_&&this.featuresCollection_.clear(),this.featuresRtree_&&this.featuresRtree_.clear(),this.nullGeometryFeatures_={};const e=new Bs("clear");this.dispatchEvent(e),this.changed()}forEachFeature(t){if(this.featuresRtree_)return this.featuresRtree_.forEach(t);this.featuresCollection_&&this.featuresCollection_.forEach(t)}forEachFeatureAtCoordinateDirect(t,e){const i=[t[0],t[1],t[0],t[1]];return this.forEachFeatureInExtent(i,(function(i){const n=i.getGeometry();if(n instanceof js||n.intersectsCoordinate(t))return e(i)}))}forEachFeatureInExtent(t,e){if(this.featuresRtree_)return this.featuresRtree_.forEachInExtent(t,e);this.featuresCollection_&&this.featuresCollection_.forEach(e)}forEachFeatureIntersectingExtent(t,e){return this.forEachFeatureInExtent(t,(function(i){const n=i.getGeometry();if(n instanceof js||n.intersectsExtent(t)){const t=e(i);if(t)return t}}))}getFeaturesCollection(){return this.featuresCollection_}getFeatures(){let t;return this.featuresCollection_?t=this.featuresCollection_.getArray().slice(0):this.featuresRtree_&&(t=this.featuresRtree_.getAll(),f(this.nullGeometryFeatures_)||a(t,Object.values(this.nullGeometryFeatures_))),t}getFeaturesAtCoordinate(t){const e=[];return this.forEachFeatureAtCoordinateDirect(t,(function(t){e.push(t)})),e}getFeaturesInExtent(t,e){if(this.featuresRtree_){if(!(e&&e.canWrapX()&&this.getWrapX()))return this.featuresRtree_.getInExtent(t);const i=function(t,e){if(e.canWrapX()){const i=e.getExtent();if(!isFinite(t[0])||!isFinite(t[2]))return[[i[0],t[1],i[2],t[3]]];kt(t,e);const n=Rt(i);if(Rt(t)>n)return[[i[0],t[1],i[2],t[3]]];if(t[0]<i[0])return[[t[0]+n,t[1],i[2],t[3]],[i[0],t[1],t[2],t[3]]];if(t[2]>i[2])return[[t[0],t[1],i[2],t[3]],[i[0],t[1],t[2]-n,t[3]]]}return[t]}(t,e);return[].concat(...i.map((t=>this.featuresRtree_.getInExtent(t))))}return this.featuresCollection_?this.featuresCollection_.getArray().slice(0):[]}getClosestFeatureToCoordinate(t,e){const i=t[0],n=t[1];let r=null;const s=[NaN,NaN];let o=1/0;const a=[-1/0,-1/0,1/0,1/0];return e=e||h,this.featuresRtree_.forEachInExtent(a,(function(t){if(e(t)){const e=t.getGeometry(),l=o;if(o=e instanceof js?0:e.closestPointXY(i,n,s,o),o<l){r=t;const e=Math.sqrt(o);a[0]=i-e,a[1]=n-e,a[2]=i+e,a[3]=n+e}}})),r}getExtent(t){return this.featuresRtree_.getExtent(t)}getFeatureById(t){const e=this.idIndex_[t.toString()];return void 0!==e?e:null}getFeatureByUid(t){const e=this.uidIndex_[t];return void 0!==e?e:null}getFormat(){return this.format_}getOverlaps(){return this.overlaps_}getUrl(){return this.url_}handleFeatureChange_(t){const e=t.target,i=k(e),n=e.getGeometry();if(n){const t=n.getExtent();i in this.nullGeometryFeatures_?(delete this.nullGeometryFeatures_[i],this.featuresRtree_&&this.featuresRtree_.insert(t,e)):this.featuresRtree_&&this.featuresRtree_.update(t,e)}else i in this.nullGeometryFeatures_||(this.featuresRtree_&&this.featuresRtree_.remove(e),this.nullGeometryFeatures_[i]=e);const r=e.getId();if(void 0!==r){const t=r.toString();this.idIndex_[t]!==e&&(this.removeFromIdIndex_(e),this.idIndex_[t]=e)}else this.removeFromIdIndex_(e),this.uidIndex_[i]=e;this.changed(),this.dispatchEvent(new Bs("changefeature",e))}hasFeature(t){const e=t.getId();return void 0!==e?e in this.idIndex_:k(t)in this.uidIndex_}isEmpty(){return this.featuresRtree_?this.featuresRtree_.isEmpty()&&f(this.nullGeometryFeatures_):!this.featuresCollection_||0===this.featuresCollection_.getLength()}loadFeatures(t,e,i){const n=this.loadedExtentsRtree_,r=this.strategy_(t,e,i);for(let t=0,s=r.length;t<s;++t){const s=r[t];n.forEachInExtent(s,(function(t){return rt(t.extent,s)}))||(++this.loadingExtentsCount_,this.dispatchEvent(new Bs("featuresloadstart")),this.loader_.call(this,s,e,i,(t=>{--this.loadingExtentsCount_,this.dispatchEvent(new Bs("featuresloadend",void 0,t))}),(()=>{--this.loadingExtentsCount_,this.dispatchEvent(new Bs("featuresloaderror"))})),n.insert(s,{extent:s.slice()}))}this.loading=!(this.loader_.length<4)&&this.loadingExtentsCount_>0}refresh(){this.clear(!0),this.loadedExtentsRtree_.clear(),super.refresh()}removeLoadedExtent(t){const e=this.loadedExtentsRtree_;let i;e.forEachInExtent(t,(function(e){if(ut(e.extent,t))return i=e,!0})),i&&e.remove(i)}removeFeature(t){if(!t)return;const e=k(t);e in this.nullGeometryFeatures_?delete this.nullGeometryFeatures_[e]:this.featuresRtree_&&this.featuresRtree_.remove(t),this.removeFeatureInternal(t)&&this.changed()}removeFeatureInternal(t){const e=k(t),i=this.featureChangeKeys_[e];if(!i)return;i.forEach(b),delete this.featureChangeKeys_[e];const n=t.getId();return void 0!==n&&delete this.idIndex_[n.toString()],delete this.uidIndex_[e],this.dispatchEvent(new Bs(Ws,t)),t}removeFromIdIndex_(t){let e=!1;for(const i in this.idIndex_){const n=this.idIndex_[i];if(t instanceof js&&Array.isArray(n)&&n.includes(t))n.splice(n.indexOf(t),1);else if(this.idIndex_[i]===t){delete this.idIndex_[i],e=!0;break}}return e}setLoader(t){this.loader_=t}setUrl(t){H(this.format_,"`format` must be set when `url` is set"),this.url_=t,this.setLoader(Xs(t,this.format_))}},ll=new class extends ya{constructor(t){super(t)}createRenderer(){return new el(this)}}({source:al,style:{"circle-radius":5,"circle-fill-color":"red"}});ol.addLayer(ll);const hl=()=>{nl("#modal").show(),nl("#overlay").show()},cl=()=>{nl("#modal").hide(),nl("#overlay").hide(),nl("#name").val(""),nl("#longitude").val(""),nl("#latitude").val("")};rl((function(){nl("#open-modal").on("click",(()=>{hl()})),nl("#close-modal").on("click",(()=>{cl()})),ol.on("click",(t=>{const[e,i]=t.coordinate;hl(),nl("#longitude").val(e),nl("#latitude").val(i)})),nl("form").on("submit",(t=>{t.preventDefault(),((t,e,i)=>{const n=new Ui([e,i]),r=new ts(n);al.addFeature(r),sl.push(new il(t,r,e,i))})(nl("#name").val(),parseFloat(nl("#longitude").val()),parseFloat(nl("#latitude").val())),cl(),nl("#locations").empty(),sl.forEach((t=>{nl("li"),nl("#locations").append(`\n            <li>\n                <button><i class="fa-solid fa-bars"></i></button>\n                <button><i class="fa-solid fa-map-location-dot"></i></button>\n                <button id="rename-location"><i class="fa-solid fa-pen"></i></button>\n                <button id="delete-location"><i class="fa-solid fa-trash"></i></button>\n                <h3>${t.name}</h3>\n                Long: ${t.x.toFixed(2)} \n                Lat: ${t.y.toFixed(2)}\n            </li>\n        `)}))}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,